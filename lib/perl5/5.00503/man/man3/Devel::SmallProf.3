.rn '' }`
''' $RCSfile$$Revision$$Date$
'''
''' $Log$
'''
.de Sh
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp
.if t .sp .5v
.if n .sp
..
.de Ip
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb
.ft CW
.nf
.ne \\$1
..
.de Ve
.ft R

.fi
..
'''
'''
'''     Set up \*(-- to give an unbreakable dash;
'''     string Tr holds user defined translation string.
'''     Bell System Logo is used as a dummy character.
'''
.tr \(*W-|\(bv\*(Tr
.ie n \{\
.ds -- \(*W-
.ds PI pi
.if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\" diablo 12 pitch
.ds L" ""
.ds R" ""
'''   \*(M", \*(S", \*(N" and \*(T" are the equivalent of
'''   \*(L" and \*(R", except that they are used on ".xx" lines,
'''   such as .IP and .SH, which do another additional levels of
'''   double-quote interpretation
.ds M" """
.ds S" """
.ds N" """""
.ds T" """""
.ds L' '
.ds R' '
.ds M' '
.ds S' '
.ds N' '
.ds T' '
'br\}
.el\{\
.ds -- \(em\|
.tr \*(Tr
.ds L" ``
.ds R" ''
.ds M" ``
.ds S" ''
.ds N" ``
.ds T" ''
.ds L' `
.ds R' '
.ds M' `
.ds S' '
.ds N' `
.ds T' '
.ds PI \(*p
'br\}
.\"	If the F register is turned on, we'll generate
.\"	index entries out stderr for the following things:
.\"		TH	Title 
.\"		SH	Header
.\"		Sh	Subsection 
.\"		Ip	Item
.\"		X<>	Xref  (embedded
.\"	Of course, you have to process the output yourself
.\"	in some meaninful fashion.
.if \nF \{
.de IX
.tm Index:\\$1\t\\n%\t"\\$2"
..
.nr % 0
.rr F
.\}
.TH SmallProf 3 "perl 5.005, patch 03" "2/Aug/1999" "User Contributed Perl Documentation"
.UC
.if n .hy 0
.if n .na
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.de CQ          \" put $1 in typewriter font
.ft CW
'if n "\c
'if t \\&\\$1\c
'if n \\&\\$1\c
'if n \&"
\\&\\$2 \\$3 \\$4 \\$5 \\$6 \\$7
'.ft R
..
.\" @(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2
.	\" AM - accent mark definitions
.bd B 3
.	\" fudge factors for nroff and troff
.if n \{\
.	ds #H 0
.	ds #V .8m
.	ds #F .3m
.	ds #[ \f1
.	ds #] \fP
.\}
.if t \{\
.	ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.	ds #V .6m
.	ds #F 0
.	ds #[ \&
.	ds #] \&
.\}
.	\" simple accents for nroff and troff
.if n \{\
.	ds ' \&
.	ds ` \&
.	ds ^ \&
.	ds , \&
.	ds ~ ~
.	ds ? ?
.	ds ! !
.	ds /
.	ds q
.\}
.if t \{\
.	ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.	ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.	ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.	ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.	ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.	ds ? \s-2c\h'-\w'c'u*7/10'\u\h'\*(#H'\zi\d\s+2\h'\w'c'u*8/10'
.	ds ! \s-2\(or\s+2\h'-\w'\(or'u'\v'-.8m'.\v'.8m'
.	ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.	ds q o\h'-\w'o'u*8/10'\s-4\v'.4m'\z\(*i\v'-.4m'\s+4\h'\w'o'u*8/10'
.\}
.	\" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds v \\k:\h'-(\\n(.wu*9/10-\*(#H)'\v'-\*(#V'\*(#[\s-4v\s0\v'\*(#V'\h'|\\n:u'\*(#]
.ds _ \\k:\h'-(\\n(.wu*9/10-\*(#H+(\*(#F*2/3))'\v'-.4m'\z\(hy\v'.4m'\h'|\\n:u'
.ds . \\k:\h'-(\\n(.wu*8/10)'\v'\*(#V*4/10'\z.\v'-\*(#V*4/10'\h'|\\n:u'
.ds 3 \*(#[\v'.2m'\s-2\&3\s0\v'-.2m'\*(#]
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.ds oe o\h'-(\w'o'u*4/10)'e
.ds Oe O\h'-(\w'O'u*4/10)'E
.	\" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.	\" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.	ds : e
.	ds 8 ss
.	ds v \h'-1'\o'\(aa\(ga'
.	ds _ \h'-1'^
.	ds . \h'-1'.
.	ds 3 3
.	ds o a
.	ds d- d\h'-1'\(ga
.	ds D- D\h'-1'\(hy
.	ds th \o'bp'
.	ds Th \o'LP'
.	ds ae ae
.	ds Ae AE
.	ds oe oe
.	ds Oe OE
.\}
.rm #[ #] #H #V #F C
.SH "NAME"
Devel::SmallProf \- per-line Perl profiler
.SH "SYNOPSIS"
.PP
.Vb 1
\&        perl5 -d:SmallProf test.pl
.Ve
.SH "DESCRIPTION"
The Devel::SmallProf profiler is focused on the time taken for a program run on
a line-by-line basis.  It is intended to be as \*(L"small\*(R" in terms of impact on
the speed and memory usage of the profiled program as possible and also in
terms of being simple to use.  Those statistics are placed in the file
\fIsmallprof.out\fR in the following format:
.PP
.Vb 1
\&        <num> <time> <ctime> <line>:<text>
.Ve
where <num> is the number of times that the line was executed, <time> is the
amount of \*(L"wall time\*(R" (time according the the clock on the wall vs. cpu time)
spent executing it, <ctime> is the amount of cpu time expended on it and <line>
and <text> are the line number and the actual text of the executed line (read
from the file).
.PP
The package uses the debugging hooks in Perl and thus needs the \fB\-d\fR switch,
so to profile \fItest.pl\fR, use the command:
.PP
.Vb 1
\&        perl5 -d:SmallProf test.pl
.Ve
Once the script is done, the statistics in \fIsmallprof.out\fR can be sorted to 
show which lines took the most time.  The output can be sorted to find which
lines take the longest, either with the sort command:
.PP
.Vb 1
\&        sort -k 2nr,2 smallprof.out | less
.Ve
or a perl script:
.PP
.Vb 5
\&        open(PROF,"smallprof.out");
\&        @sorted = sort {(split(/\es+/,$b))[2] <=> 
\&                        (split(/\es+/,$a))[2]} <PROF>;
\&        close PROF;
\&        print join('',@sorted);
.Ve
.SH "NOTES"
.Ip "\(bu " 4
The \*(L"wall time\*(R" readings come from Time::HiRes and are reasonably useful, at
least on my system.  The cpu times come from the \*(L'times\*(R' built-in and the
granularity is not necessarily as small as with the wall time.  On some systems
this column may be useful.  On others it may not.
.Ip "\(bu" 4
SmallProf does attempt to make up for its shortcomings by subtracting a small
amount from each timing (null time compensation).  This should help somewhat
with the accuracy.
.Ip "\(bu " 4
SmallProf depends on the Time::HiRes package to do its timings.  It claims to
require version 1.20, but may work with earlier versions, depending on your
platform.
.SH "OPTIONS"
SmallProf has 3 variables which can be used during your script to affect what
gets profiled.
.Ip "\(bu" 4
If you do not wish to see lines which were never called, set the variable
\f(CW$DB::drop_zeros = 1\fR.  With \f(CWdrop_zeros\fR set, SmallProf can be used for 
basic coverage analysis.
.Ip "\(bu" 4
To turn off profiling for a time, insert a \f(CW$DB::profile = 0\fR into your code
(profiling may be turned back on with \f(CW$DB::profile = 1\fR).  All of the time
between profiling being turned off and back on again will be lumped together 
and reported on the \f(CW$DB::profile = 0\fR line.  This can be used to summarize a
subroutine call or a chunk of code.
.Ip "\(bu" 4
To only profile code in a certain package, set the \f(CW%DB::packages\fR array.  For
example, to see only the code in packages \f(CWmain\fR and \f(CWTest1\fR, do this:
.Sp
.Vb 1
\&        %DB::packages = ( 'main' => 1, 'Test1' => 1 );
.Ve
.Ip "\(bu" 4
These variables can be put in a file called \fI.smallprof\fR in the current 
directory.  For example, a \fI.smallprof\fR containing
.Sp
.Vb 2
\&        $DB::drop_zeros = 1;
\&        $DB::profile = 0;
.Ve
will set SmallProf to not report lines which are never touched for any file
profiled in that directory and will set profiling off initially (presumably to
be turned on only for a small portion of code).
.SH "INSTALLATION"
Just the usual
.PP
.Vb 4
\&        perl Makefile.PL
\&        make
\&        make test
\&        make install
.Ve
and should install fine via the CPAN module.
.SH "BUGS"
Subroutine calls are currently not under the control of \f(CW%DB::packages\fR.  This
should not be a great inconvenience in general.  
.PP
The handling of evals is bad news.  This is due to Perl's handling of evals 
under the \fB\-d\fR flag.  For certain evals, \fIcaller()\fR returns \*(L'(eval n)\*(R' for the 
filename and for others it doesn't.  For some of those which it does, the array
\f(CW@{'_<filename'}\fR contains the code of the eval.  For others it doesn't.
Sometime, when I've an extra tuit or two, I'll figure out why and how I can 
compensate for this.
.PP
Comments, advice and questions are welcome.  If you see
inefficent stuff in this module and have a better way, please let me know.
.SH "AUTHOR   Ted Ashton <ashted@southern.edu>   SmallProf was developed from code originally posted to usenet by Philippe Verdret <philippe.verdret@sonovision-itep.fr>.  Special thanks to Geoffrey Broadwell <habusan2@sprynet.com> for his assistance on the Win32 platform and to Philippe for his patient assistance in testing and  debugging.   Copyright (c) 1997 Ted Ashton   This module is free software and can be redistributed and/or modified under the same terms as Perl itself."
.SH "SEE ALSO"
the \fIDevel::DProf\fR manpage, the \fITime::HiRes\fR manpage.

.rn }` ''
.IX Title "SmallProf 3"
.IX Name "Devel::SmallProf - per-line Perl profiler"

.IX Header "NAME"

.IX Header "SYNOPSIS"

.IX Header "DESCRIPTION"

.IX Header "NOTES"

.IX Item "\(bu "

.IX Item "\(bu"

.IX Item "\(bu "

.IX Header "OPTIONS"

.IX Item "\(bu"

.IX Item "\(bu"

.IX Item "\(bu"

.IX Item "\(bu"

.IX Header "INSTALLATION"

.IX Header "BUGS"

.IX Header "AUTHOR   Ted Ashton <ashted@southern.edu>   SmallProf was developed from code originally posted to usenet by Philippe Verdret <philippe.verdret@sonovision-itep.fr>.  Special thanks to Geoffrey Broadwell <habusan2@sprynet.com> for his assistance on the Win32 platform and to Philippe for his patient assistance in testing and  debugging.   Copyright (c) 1997 Ted Ashton   This module is free software and can be redistributed and/or modified under the same terms as Perl itself."

.IX Header "SEE ALSO"

