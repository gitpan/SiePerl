.rn '' }`
''' $RCSfile$$Revision$$Date$
'''
''' $Log$
'''
.de Sh
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp
.if t .sp .5v
.if n .sp
..
.de Ip
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb
.ft CW
.nf
.ne \\$1
..
.de Ve
.ft R

.fi
..
'''
'''
'''     Set up \*(-- to give an unbreakable dash;
'''     string Tr holds user defined translation string.
'''     Bell System Logo is used as a dummy character.
'''
.tr \(*W-|\(bv\*(Tr
.ie n \{\
.ds -- \(*W-
.ds PI pi
.if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\" diablo 12 pitch
.ds L" ""
.ds R" ""
'''   \*(M", \*(S", \*(N" and \*(T" are the equivalent of
'''   \*(L" and \*(R", except that they are used on ".xx" lines,
'''   such as .IP and .SH, which do another additional levels of
'''   double-quote interpretation
.ds M" """
.ds S" """
.ds N" """""
.ds T" """""
.ds L' '
.ds R' '
.ds M' '
.ds S' '
.ds N' '
.ds T' '
'br\}
.el\{\
.ds -- \(em\|
.tr \*(Tr
.ds L" ``
.ds R" ''
.ds M" ``
.ds S" ''
.ds N" ``
.ds T" ''
.ds L' `
.ds R' '
.ds M' `
.ds S' '
.ds N' `
.ds T' '
.ds PI \(*p
'br\}
.\"	If the F register is turned on, we'll generate
.\"	index entries out stderr for the following things:
.\"		TH	Title 
.\"		SH	Header
.\"		Sh	Subsection 
.\"		Ip	Item
.\"		X<>	Xref  (embedded
.\"	Of course, you have to process the output yourself
.\"	in some meaninful fashion.
.if \nF \{
.de IX
.tm Index:\\$1\t\\n%\t"\\$2"
..
.nr % 0
.rr F
.\}
.TH WordGuess 3 "perl 5.005, patch 03" "15/Aug/1999" "User Contributed Perl Documentation"
.UC
.if n .hy 0
.if n .na
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.de CQ          \" put $1 in typewriter font
.ft CW
'if n "\c
'if t \\&\\$1\c
'if n \\&\\$1\c
'if n \&"
\\&\\$2 \\$3 \\$4 \\$5 \\$6 \\$7
'.ft R
..
.\" @(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2
.	\" AM - accent mark definitions
.bd B 3
.	\" fudge factors for nroff and troff
.if n \{\
.	ds #H 0
.	ds #V .8m
.	ds #F .3m
.	ds #[ \f1
.	ds #] \fP
.\}
.if t \{\
.	ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.	ds #V .6m
.	ds #F 0
.	ds #[ \&
.	ds #] \&
.\}
.	\" simple accents for nroff and troff
.if n \{\
.	ds ' \&
.	ds ` \&
.	ds ^ \&
.	ds , \&
.	ds ~ ~
.	ds ? ?
.	ds ! !
.	ds /
.	ds q
.\}
.if t \{\
.	ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.	ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.	ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.	ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.	ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.	ds ? \s-2c\h'-\w'c'u*7/10'\u\h'\*(#H'\zi\d\s+2\h'\w'c'u*8/10'
.	ds ! \s-2\(or\s+2\h'-\w'\(or'u'\v'-.8m'.\v'.8m'
.	ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.	ds q o\h'-\w'o'u*8/10'\s-4\v'.4m'\z\(*i\v'-.4m'\s+4\h'\w'o'u*8/10'
.\}
.	\" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds v \\k:\h'-(\\n(.wu*9/10-\*(#H)'\v'-\*(#V'\*(#[\s-4v\s0\v'\*(#V'\h'|\\n:u'\*(#]
.ds _ \\k:\h'-(\\n(.wu*9/10-\*(#H+(\*(#F*2/3))'\v'-.4m'\z\(hy\v'.4m'\h'|\\n:u'
.ds . \\k:\h'-(\\n(.wu*8/10)'\v'\*(#V*4/10'\z.\v'-\*(#V*4/10'\h'|\\n:u'
.ds 3 \*(#[\v'.2m'\s-2\&3\s0\v'-.2m'\*(#]
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.ds oe o\h'-(\w'o'u*4/10)'e
.ds Oe O\h'-(\w'O'u*4/10)'E
.	\" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.	\" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.	ds : e
.	ds 8 ss
.	ds v \h'-1'\o'\(aa\(ga'
.	ds _ \h'-1'^
.	ds . \h'-1'.
.	ds 3 3
.	ds o a
.	ds d- d\h'-1'\(ga
.	ds D- D\h'-1'\(hy
.	ds th \o'bp'
.	ds Th \o'LP'
.	ds ae ae
.	ds Ae AE
.	ds oe oe
.	ds Oe OE
.\}
.rm #[ #] #H #V #F C
.SH "NAME"
Games::WordGuess \- a class for creating word-guessing game
.SH "SYNOPSIS"
.PP
.Vb 1
\&  use Games::WordGuess;
.Ve
.Vb 2
\&  $game = new Games::WordGuess;
\&  $game = new Games::WordGuess("/usr/games/lib/fortunes/startrek");  
.Ve
.SH "DESCRIPTION"
Games::WordGuess is a module for word-guessing game. 
Scoring is calculated from the number of chances left for each mystery word.
.Sh "Constructor"
Specify the full path to the file containing words to be played at the
\f(CWnew()\fR method, for example:
.PP
.Vb 1
\&  $game = new Games::WordGuess("/usr/games/lib/fortunes/startrek");  
.Ve
otherwise, \f(CWGames::WordGuess\fR uses some internal Indonesian words as the
default.
.Sh "Simple command line user interface"
Look at examples/cmdln script on example of using \f(CWcommand_interface()\fR.
.Sh "\fIprocess_guess()\fR"
This is the core method. Passed a character, \f(CWprocess_guess\fR will return
undef if there's no matched character in the current mystery word. If it is
passed a previous matched character, it returns undef as well. On success,
it returns 0, or 1 if the mystery word has already revealed.
.Sh "\fIin_progress()\fR"
Returns the mystery word in current player's progress. Initially, after a 
\f(CWGame::WordGuess\fR object is created, this will return the mystery word 
covered with asterisks. On each matched guess, the corresponding asterisk 
will be substituted by the real character.
.Sh "\fIget_chances()\fR"
Returns the remaining chances left for current player.
.Sh "\fIget_score()\fR"
Returns total score for current player.
.Sh "\fIinit_mystery()\fR"
Provides a new mystery word to current player. Call to this method is required 
to continue the game after successful guess of one complete word.
.SH "HISTORY"
.Ip "\(bu August 16, 1999 \- Version 0.20:" 2
\fIprocess_guess()\fR now returns undef on missed guess. Added \fIin_progress()\fR method.
Added documentation, and a \s-1CGI\s0 script example using Apache::Session.
.Ip "\(bu July 1999 \- Version 0.11:" 2
Changes to \fIcommand_interface()\fR, as suggested by Steven
Haryanto <sh@hhh.indoglobal.com>.
.Ip "\(bu April 1999 \- Publicly released, Version 0.10" 2
.SH "AUTHOR"
Edwin Pratomo <\fBed.pratomo@computer.org\fR>
.SH "COPYRIGHT"
Copyright (c) 1999 Edwin Pratomo <ed.pratomo@computer.org>.
.PP
All rights reserved. This is a free code; you can redistribute
it and/or modify it under the same terms as Perl itself.

.rn }` ''
.IX Title "WordGuess 3"
.IX Name "Games::WordGuess - a class for creating word-guessing game"

.IX Header "NAME"

.IX Header "SYNOPSIS"

.IX Header "DESCRIPTION"

.IX Subsection "Constructor"

.IX Subsection "Simple command line user interface"

.IX Subsection "\fIprocess_guess()\fR"

.IX Subsection "\fIin_progress()\fR"

.IX Subsection "\fIget_chances()\fR"

.IX Subsection "\fIget_score()\fR"

.IX Subsection "\fIinit_mystery()\fR"

.IX Header "HISTORY"

.IX Item "\(bu August 16, 1999 \- Version 0.20:"

.IX Item "\(bu July 1999 \- Version 0.11:"

.IX Item "\(bu April 1999 \- Publicly released, Version 0.10"

.IX Header "AUTHOR"

.IX Header "COPYRIGHT"

