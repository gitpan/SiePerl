.rn '' }`
''' $RCSfile$$Revision$$Date$
'''
''' $Log$
'''
.de Sh
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp
.if t .sp .5v
.if n .sp
..
.de Ip
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb
.ft CW
.nf
.ne \\$1
..
.de Ve
.ft R

.fi
..
'''
'''
'''     Set up \*(-- to give an unbreakable dash;
'''     string Tr holds user defined translation string.
'''     Bell System Logo is used as a dummy character.
'''
.tr \(*W-|\(bv\*(Tr
.ie n \{\
.ds -- \(*W-
.ds PI pi
.if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\" diablo 12 pitch
.ds L" ""
.ds R" ""
'''   \*(M", \*(S", \*(N" and \*(T" are the equivalent of
'''   \*(L" and \*(R", except that they are used on ".xx" lines,
'''   such as .IP and .SH, which do another additional levels of
'''   double-quote interpretation
.ds M" """
.ds S" """
.ds N" """""
.ds T" """""
.ds L' '
.ds R' '
.ds M' '
.ds S' '
.ds N' '
.ds T' '
'br\}
.el\{\
.ds -- \(em\|
.tr \*(Tr
.ds L" ``
.ds R" ''
.ds M" ``
.ds S" ''
.ds N" ``
.ds T" ''
.ds L' `
.ds R' '
.ds M' `
.ds S' '
.ds N' `
.ds T' '
.ds PI \(*p
'br\}
.\"	If the F register is turned on, we'll generate
.\"	index entries out stderr for the following things:
.\"		TH	Title 
.\"		SH	Header
.\"		Sh	Subsection 
.\"		Ip	Item
.\"		X<>	Xref  (embedded
.\"	Of course, you have to process the output yourself
.\"	in some meaninful fashion.
.if \nF \{
.de IX
.tm Index:\\$1\t\\n%\t"\\$2"
..
.nr % 0
.rr F
.\}
.TH lib::Tie::IxHash 3 "perl 5.005, patch 03" "20/Nov/1997" "User Contributed Perl Documentation"
.UC
.if n .hy 0
.if n .na
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.de CQ          \" put $1 in typewriter font
.ft CW
'if n "\c
'if t \\&\\$1\c
'if n \\&\\$1\c
'if n \&"
\\&\\$2 \\$3 \\$4 \\$5 \\$6 \\$7
'.ft R
..
.\" @(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2
.	\" AM - accent mark definitions
.bd B 3
.	\" fudge factors for nroff and troff
.if n \{\
.	ds #H 0
.	ds #V .8m
.	ds #F .3m
.	ds #[ \f1
.	ds #] \fP
.\}
.if t \{\
.	ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.	ds #V .6m
.	ds #F 0
.	ds #[ \&
.	ds #] \&
.\}
.	\" simple accents for nroff and troff
.if n \{\
.	ds ' \&
.	ds ` \&
.	ds ^ \&
.	ds , \&
.	ds ~ ~
.	ds ? ?
.	ds ! !
.	ds /
.	ds q
.\}
.if t \{\
.	ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.	ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.	ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.	ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.	ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.	ds ? \s-2c\h'-\w'c'u*7/10'\u\h'\*(#H'\zi\d\s+2\h'\w'c'u*8/10'
.	ds ! \s-2\(or\s+2\h'-\w'\(or'u'\v'-.8m'.\v'.8m'
.	ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.	ds q o\h'-\w'o'u*8/10'\s-4\v'.4m'\z\(*i\v'-.4m'\s+4\h'\w'o'u*8/10'
.\}
.	\" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds v \\k:\h'-(\\n(.wu*9/10-\*(#H)'\v'-\*(#V'\*(#[\s-4v\s0\v'\*(#V'\h'|\\n:u'\*(#]
.ds _ \\k:\h'-(\\n(.wu*9/10-\*(#H+(\*(#F*2/3))'\v'-.4m'\z\(hy\v'.4m'\h'|\\n:u'
.ds . \\k:\h'-(\\n(.wu*8/10)'\v'\*(#V*4/10'\z.\v'-\*(#V*4/10'\h'|\\n:u'
.ds 3 \*(#[\v'.2m'\s-2\&3\s0\v'-.2m'\*(#]
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.ds oe o\h'-(\w'o'u*4/10)'e
.ds Oe O\h'-(\w'O'u*4/10)'E
.	\" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.	\" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.	ds : e
.	ds 8 ss
.	ds v \h'-1'\o'\(aa\(ga'
.	ds _ \h'-1'^
.	ds . \h'-1'.
.	ds 3 3
.	ds o a
.	ds d- d\h'-1'\(ga
.	ds D- D\h'-1'\(hy
.	ds th \o'bp'
.	ds Th \o'LP'
.	ds ae ae
.	ds Ae AE
.	ds oe oe
.	ds Oe OE
.\}
.rm #[ #] #H #V #F C
.SH "NAME"
Tie::IxHash \- ordered associative arrays for Perl
.SH "SYNOPSIS"
.PP
.Vb 21
\&    # simple usage
\&    use Tie::IxHash;
\&    tie HASHVARIABLE, Tie::IxHash [, LIST];
\&    
\&    # OO interface with more powerful features
\&    use Tie::IxHash;
\&    TIEOBJECT = Tie::IxHash->new( [LIST] );
\&    TIEOBJECT->Splice( OFFSET [, LENGTH [, LIST]] );
\&    TIEOBJECT->Push( LIST );
\&    TIEOBJECT->Pop;
\&    TIEOBJECT->Shift;
\&    TIEOBJECT->Unshift( LIST );
\&    TIEOBJECT->Keys( [LIST] );
\&    TIEOBJECT->Values( [LIST] );
\&    TIEOBJECT->Indices( LIST );
\&    TIEOBJECT->Delete( [LIST] );
\&    TIEOBJECT->Replace( OFFSET, VALUE, [KEY] );
\&    TIEOBJECT->Reorder( LIST );
\&    TIEOBJECT->SortByKey;
\&    TIEOBJECT->SortByValue;
\&    TIEOBJECT->Length;
.Ve
.SH "DESCRIPTION"
This Perl module implements Perl hashes that preserve the order in which the
hash elements were added.  The order is not affected when values
corresponding to existing keys in the IxHash are changed.  The elements can
also be set to any arbitrary supplied order.  The familiar perl array
operations can also be performed on the IxHash.
.Sh "Standard \f(CWTIEHASH\fR Interface"
The standard \f(CWTIEHASH\fR mechanism is available. This interface is 
recommended for simple uses, since the usage is exactly the same as
regular Perl hashes after the \f(CWtie\fR is declared.
.Sh "Object Interface"
This module also provides an extended object-oriented interface that can be
used for more powerful operations with the IxHash.  The following methods
are available:
.Ip "\s-1FETCH\s0, \s-1STORE\s0, \s-1DELETE\s0, \s-1EXISTS\s0" 8
These standard \f(CWTIEHASH\fR methods mandated by Perl can be used directly.
See the \f(CWtie\fR entry in \fIperlfunc\fR\|(1) for details.
.Ip "Push, Pop, Shift, Unshift, Splice" 8
These additional methods resembling Perl functions are available for
operating on key-value pairs in the IxHash. The behavior is the same as the
corresponding perl functions, except when a supplied hash key already exists
in the hash. In that case, the existing value is updated but its order is
not affected.  To unconditionally alter the order of a supplied key-value
pair, first \f(CWDELETE\fR the IxHash element.
.Ip "Keys" 8
Returns an array of IxHash element keys corresponding to the list of supplied
indices.  Returns an array of all the keys if called without arguments.
Note the return value is mostly only useful when used in a list context
(since perl will convert it to the number of elements in the array when
used in a scalar context, and that may not be very useful).
.Sp
If a single argument is given, returns the single key corresponding to
the index.  This is usable in either scalar or list context.
.Ip "Values" 8
Returns an array of IxHash element values corresponding to the list of supplied
indices.  Returns an array of all the values if called without arguments.
Note the return value is mostly only useful when used in a list context
(since perl will convert it to the number of elements in the array when
used in a scalar context, and that may not be very useful).
.Sp
If a single argument is given, returns the single value corresponding to
the index.  This is usable in either scalar or list context.
.Ip "Indices" 8
Returns an array of indices corresponding to the supplied list of keys.
Note the return value is mostly only useful when used in a list context
(since perl will convert it to the number of elements in the array when
used in a scalar context, and that may not be very useful).
.Sp
If a single argument is given, returns the single index corresponding to
the key.  This is usable in either scalar or list context.
.Ip "Delete" 8
Removes elements with the supplied keys from the IxHash.
.Ip "Replace" 8
Substitutes the IxHash element at the specified index with the supplied
value-key pair.  If a key is not supplied, simply substitutes the value at
index with the supplied value. If an element with the supplied key already
exists, it will be removed from the IxHash first.
.Ip "Reorder" 8
This method can be used to manipulate the internal order of the IxHash
elements by supplying a list of keys in the desired order.  Note however,
that any IxHash elements whose keys are not in the list will be removed from
the IxHash.
.Ip "Length" 8
Returns the number of IxHash elements.
.Ip "SortByKey" 8
Reorders the IxHash elements by textual comparison of the keys.
.Ip "SortByValue" 8
Reorders the IxHash elements by textual comparison of the values.
.SH "EXAMPLE"
.PP
.Vb 1
\&    use Tie::IxHash;
.Ve
.Vb 24
\&    # simple interface
\&    $t = tie(%myhash, Tie::IxHash, 'a' => 1, 'b' => 2);
\&    %myhash = (first => 1, second => 2, third => 3);
\&    $myhash{fourth} = 4;
\&    @keys = keys %myhash;
\&    @values = values %myhash;
\&    print("y") if exists $myhash{third};
\&    
\&    # OO interface
\&    $t = Tie::IxHash->new(first => 1, second => 2, third => 3);
\&    $t->Push(fourth => 4); # same as $myhash{'fourth'} = 4;
\&    ($k, $v) = $t->Pop;    # $k is 'fourth', $v is 4
\&    $t->Unshift(neg => -1, zeroth => 0); 
\&    ($k, $v) = $t->Shift;  # $k is 'neg', $v is -1
\&    @oneandtwo = $t->Splice(1, 2, foo => 100, bar => 101);
\&    
\&    @keys = $t->Keys;
\&    @values = $t->Values;
\&    @indices = $t->Indices('foo', 'zeroth');
\&    @itemkeys = $t->Keys(@indices);
\&    @itemvals = $t->Values(@indices);
\&    $t->Replace(2, 0.3, 'other');
\&    $t->Delete('second', 'zeroth');
\&    $len = $t->Length;     # number of key-value pairs
.Ve
.Vb 3
\&    $t->Reorder(reverse @keys);
\&    $t->SortByKey;
\&    $t->SortByValue;
.Ve
.SH "BUGS"
You cannot specify a negative length to \f(CWSplice\fR. Negative indexes are OK,
though.
.PP
Indexing always begins at 0 (despite the current \f(CW$[\fR setting) for 
all the functions.
.SH "TODO"
Addition of elements with keys that already exist to the end of the IxHash
must be controlled by a switch.
.PP
Provide \f(CWTIEARRAY\fR interface when it stabilizes in Perl.
.PP
Rewrite using XSUBs for efficiency.
.SH "AUTHOR"
Gurusamy Sarathy        gsar@umich.edu
.PP
Copyright (c) 1995 Gurusamy Sarathy. All rights reserved.
This program is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
.SH "VERSION"
Version 1.21    20 Nov 1997
.SH "SEE ALSO"
\fIperl\fR\|(1)

.rn }` ''
.IX Title "lib::Tie::IxHash 3"
.IX Name "Tie::IxHash - ordered associative arrays for Perl"

.IX Header "NAME"

.IX Header "SYNOPSIS"

.IX Header "DESCRIPTION"

.IX Subsection "Standard \f(CWTIEHASH\fR Interface"

.IX Subsection "Object Interface"

.IX Item "\s-1FETCH\s0, \s-1STORE\s0, \s-1DELETE\s0, \s-1EXISTS\s0"

.IX Item "Push, Pop, Shift, Unshift, Splice"

.IX Item "Keys"

.IX Item "Values"

.IX Item "Indices"

.IX Item "Delete"

.IX Item "Replace"

.IX Item "Reorder"

.IX Item "Length"

.IX Item "SortByKey"

.IX Item "SortByValue"

.IX Header "EXAMPLE"

.IX Header "BUGS"

.IX Header "TODO"

.IX Header "AUTHOR"

.IX Header "VERSION"

.IX Header "SEE ALSO"

