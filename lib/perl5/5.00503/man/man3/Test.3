.rn '' }`
''' $RCSfile$$Revision$$Date$
'''
''' $Log$
'''
.de Sh
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp
.if t .sp .5v
.if n .sp
..
.de Ip
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb
.ft CW
.nf
.ne \\$1
..
.de Ve
.ft R

.fi
..
'''
'''
'''     Set up \*(-- to give an unbreakable dash;
'''     string Tr holds user defined translation string.
'''     Bell System Logo is used as a dummy character.
'''
.tr \(*W-|\(bv\*(Tr
.ie n \{\
.ds -- \(*W-
.ds PI pi
.if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\" diablo 12 pitch
.ds L" ""
.ds R" ""
'''   \*(M", \*(S", \*(N" and \*(T" are the equivalent of
'''   \*(L" and \*(R", except that they are used on ".xx" lines,
'''   such as .IP and .SH, which do another additional levels of
'''   double-quote interpretation
.ds M" """
.ds S" """
.ds N" """""
.ds T" """""
.ds L' '
.ds R' '
.ds M' '
.ds S' '
.ds N' '
.ds T' '
'br\}
.el\{\
.ds -- \(em\|
.tr \*(Tr
.ds L" ``
.ds R" ''
.ds M" ``
.ds S" ''
.ds N" ``
.ds T" ''
.ds L' `
.ds R' '
.ds M' `
.ds S' '
.ds N' `
.ds T' '
.ds PI \(*p
'br\}
.\"	If the F register is turned on, we'll generate
.\"	index entries out stderr for the following things:
.\"		TH	Title 
.\"		SH	Header
.\"		Sh	Subsection 
.\"		Ip	Item
.\"		X<>	Xref  (embedded
.\"	Of course, you have to process the output yourself
.\"	in some meaninful fashion.
.if \nF \{
.de IX
.tm Index:\\$1\t\\n%\t"\\$2"
..
.nr % 0
.rr F
.\}
.TH Test 3 "perl 5.005, patch 03" "27/Mar/1999" "Perl Programmers Reference Guide"
.UC
.if n .hy 0
.if n .na
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.de CQ          \" put $1 in typewriter font
.ft CW
'if n "\c
'if t \\&\\$1\c
'if n \\&\\$1\c
'if n \&"
\\&\\$2 \\$3 \\$4 \\$5 \\$6 \\$7
'.ft R
..
.\" @(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2
.	\" AM - accent mark definitions
.bd B 3
.	\" fudge factors for nroff and troff
.if n \{\
.	ds #H 0
.	ds #V .8m
.	ds #F .3m
.	ds #[ \f1
.	ds #] \fP
.\}
.if t \{\
.	ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.	ds #V .6m
.	ds #F 0
.	ds #[ \&
.	ds #] \&
.\}
.	\" simple accents for nroff and troff
.if n \{\
.	ds ' \&
.	ds ` \&
.	ds ^ \&
.	ds , \&
.	ds ~ ~
.	ds ? ?
.	ds ! !
.	ds /
.	ds q
.\}
.if t \{\
.	ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.	ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.	ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.	ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.	ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.	ds ? \s-2c\h'-\w'c'u*7/10'\u\h'\*(#H'\zi\d\s+2\h'\w'c'u*8/10'
.	ds ! \s-2\(or\s+2\h'-\w'\(or'u'\v'-.8m'.\v'.8m'
.	ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.	ds q o\h'-\w'o'u*8/10'\s-4\v'.4m'\z\(*i\v'-.4m'\s+4\h'\w'o'u*8/10'
.\}
.	\" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds v \\k:\h'-(\\n(.wu*9/10-\*(#H)'\v'-\*(#V'\*(#[\s-4v\s0\v'\*(#V'\h'|\\n:u'\*(#]
.ds _ \\k:\h'-(\\n(.wu*9/10-\*(#H+(\*(#F*2/3))'\v'-.4m'\z\(hy\v'.4m'\h'|\\n:u'
.ds . \\k:\h'-(\\n(.wu*8/10)'\v'\*(#V*4/10'\z.\v'-\*(#V*4/10'\h'|\\n:u'
.ds 3 \*(#[\v'.2m'\s-2\&3\s0\v'-.2m'\*(#]
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.ds oe o\h'-(\w'o'u*4/10)'e
.ds Oe O\h'-(\w'O'u*4/10)'E
.	\" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.	\" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.	ds : e
.	ds 8 ss
.	ds v \h'-1'\o'\(aa\(ga'
.	ds _ \h'-1'^
.	ds . \h'-1'.
.	ds 3 3
.	ds o a
.	ds d- d\h'-1'\(ga
.	ds D- D\h'-1'\(hy
.	ds th \o'bp'
.	ds Th \o'LP'
.	ds ae ae
.	ds Ae AE
.	ds oe oe
.	ds Oe OE
.\}
.rm #[ #] #H #V #F C
.SH "NAME"
.PP
.Vb 1
\&  Test - provides a simple framework for writing test scripts
.Ve
.SH "SYNOPSIS"
.PP
.Vb 2
\&  use strict;
\&  use Test;
.Ve
.Vb 2
\&  # use a BEGIN block so we print our plan before MyModule is loaded
\&  BEGIN { plan tests => 14, todo => [3,4] }
.Ve
.Vb 2
\&  # load your module...
\&  use MyModule;
.Ve
.Vb 2
\&  ok(0); # failure
\&  ok(1); # success
.Ve
.Vb 2
\&  ok(0); # ok, expected failure (see todo list, above)
\&  ok(1); # surprise success!
.Ve
.Vb 4
\&  ok(0,1);             # failure: '0' ne '1'
\&  ok('broke','fixed'); # failure: 'broke' ne 'fixed'
\&  ok('fixed','fixed'); # success: 'fixed' eq 'fixed'
\&  ok('fixed',qr/x/);   # success: 'fixed' =~ qr/x/
.Ve
.Vb 3
\&  ok(sub { 1+1 }, 2);  # success: '2' eq '2'
\&  ok(sub { 1+1 }, 3);  # failure: '2' ne '3'
\&  ok(0, int(rand(2));  # (just kidding :-)
.Ve
.Vb 3
\&  my @list = (0,0);
\&  ok @list, 3, "\e@list=".join(',',@list);      #extra diagnostics
\&  ok 'segmentation fault', '/(?i)success/';    #regex match
.Ve
.Vb 1
\&  skip($feature_is_missing, ...);    #do platform specific test
.Ve
.SH "DESCRIPTION"
the \fITest::Harness\fR manpage expects to see particular output when it executes
tests.  This module aims to make writing proper test scripts just a
little bit easier (and less error prone :\-).
.SH "TEST TYPES"
.Ip "\(bu \s-1NORMAL\s0 \s-1TESTS\s0" 4
These tests are expected to succeed.  If they don't something's
screwed up!
.Ip "\(bu \s-1SKIPPED\s0 \s-1TESTS\s0" 4
Skip is for tests that might or might not be possible to run depending
on the availability of platform specific features.  The first argument
should evaluate to true (think \*(L"yes, please skip") if the required
feature is not available.  After the first argument, skip works
exactly the same way as do normal tests.
.Ip "\(bu \s-1TODO\s0 \s-1TESTS\s0" 4
\s-1TODO\s0 tests are designed for maintaining an \fBexecutable \s-1TODO\s0 list\fR.
These tests are expected \s-1NOT\s0 to succeed.  If a \s-1TODO\s0 test does succeed,
the feature in question should not be on the \s-1TODO\s0 list, now should it?
.Sp
Packages should \s-1NOT\s0 be released with succeeding \s-1TODO\s0 tests.  As soon
as a \s-1TODO\s0 test starts working, it should be promoted to a normal test
and the newly working feature should be documented in the release
notes or change log.
.SH "RETURN VALUE"
Both \f(CWok\fR and \f(CWskip\fR return true if their test succeeds and false
otherwise in a scalar context.
.SH "ONFAIL"
.PP
.Vb 1
\&  BEGIN { plan test => 4, onfail => sub { warn "CALL 911!" } }
.Ve
While test failures should be enough, extra diagnostics can be
triggered at the end of a test run.  \f(CWonfail\fR is passed an array ref
of hash refs that describe each test failure.  Each hash will contain
at least the following fields: \f(CWpackage\fR, \f(CWrepetition\fR, and
\f(CWresult\fR.  (The file, line, and test number are not included because
their correspondance to a particular test is tenuous.)  If the test
had an expected value or a diagnostic string, these will also be
included.
.PP
The \fBoptional\fR \f(CWonfail\fR hook might be used simply to print out the
version of your package and/or how to report problems.  It might also
be used to generate extremely sophisticated diagnostics for a
particularly bizarre test failure.  However it's not a panacea.  Core
dumps or other unrecoverable errors prevent the \f(CWonfail\fR hook from
running.  (It is run inside an \f(CWEND\fR block.)  Besides, \f(CWonfail\fR is
probably over-kill in most cases.  (Your test code should be simpler
than the code it is testing, yes?)
.SH "SEE ALSO"
the \fITest::Harness\fR manpage and, perhaps, test coverage analysis tools.
.SH "AUTHOR"
Copyright (c) 1998 Joshua Nathaniel Pritikin.  All rights reserved.
.PP
This package is free software and is provided \*(L"as is\*(R" without express
or implied warranty.  It may be used, redistributed and/or modified
under the terms of the Perl Artistic License (see
http://www.perl.com/perl/misc/Artistic.html)

.rn }` ''
.IX Title "Test 3"
.IX Name "Test - provides a simple framework for writing test scripts"

.IX Header "NAME"

.IX Header "SYNOPSIS"

.IX Header "DESCRIPTION"

.IX Header "TEST TYPES"

.IX Item "\(bu \s-1NORMAL\s0 \s-1TESTS\s0"

.IX Item "\(bu \s-1SKIPPED\s0 \s-1TESTS\s0"

.IX Item "\(bu \s-1TODO\s0 \s-1TESTS\s0"

.IX Header "RETURN VALUE"

.IX Header "ONFAIL"

.IX Header "SEE ALSO"

.IX Header "AUTHOR"

