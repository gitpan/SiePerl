.rn '' }`
''' $RCSfile$$Revision$$Date$
'''
''' $Log$
'''
.de Sh
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp
.if t .sp .5v
.if n .sp
..
.de Ip
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb
.ft CW
.nf
.ne \\$1
..
.de Ve
.ft R

.fi
..
'''
'''
'''     Set up \*(-- to give an unbreakable dash;
'''     string Tr holds user defined translation string.
'''     Bell System Logo is used as a dummy character.
'''
.tr \(*W-|\(bv\*(Tr
.ie n \{\
.ds -- \(*W-
.ds PI pi
.if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\" diablo 12 pitch
.ds L" ""
.ds R" ""
'''   \*(M", \*(S", \*(N" and \*(T" are the equivalent of
'''   \*(L" and \*(R", except that they are used on ".xx" lines,
'''   such as .IP and .SH, which do another additional levels of
'''   double-quote interpretation
.ds M" """
.ds S" """
.ds N" """""
.ds T" """""
.ds L' '
.ds R' '
.ds M' '
.ds S' '
.ds N' '
.ds T' '
'br\}
.el\{\
.ds -- \(em\|
.tr \*(Tr
.ds L" ``
.ds R" ''
.ds M" ``
.ds S" ''
.ds N" ``
.ds T" ''
.ds L' `
.ds R' '
.ds M' `
.ds S' '
.ds N' `
.ds T' '
.ds PI \(*p
'br\}
.\"	If the F register is turned on, we'll generate
.\"	index entries out stderr for the following things:
.\"		TH	Title 
.\"		SH	Header
.\"		Sh	Subsection 
.\"		Ip	Item
.\"		X<>	Xref  (embedded
.\"	Of course, you have to process the output yourself
.\"	in some meaninful fashion.
.if \nF \{
.de IX
.tm Index:\\$1\t\\n%\t"\\$2"
..
.nr % 0
.rr F
.\}
.TH Storage::Property 3 "perl 5.005, patch 03" "25/Feb/1998" "User Contributed Perl Documentation"
.UC
.if n .hy 0
.if n .na
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.de CQ          \" put $1 in typewriter font
.ft CW
'if n "\c
'if t \\&\\$1\c
'if n \\&\\$1\c
'if n \&"
\\&\\$2 \\$3 \\$4 \\$5 \\$6 \\$7
'.ft R
..
.\" @(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2
.	\" AM - accent mark definitions
.bd B 3
.	\" fudge factors for nroff and troff
.if n \{\
.	ds #H 0
.	ds #V .8m
.	ds #F .3m
.	ds #[ \f1
.	ds #] \fP
.\}
.if t \{\
.	ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.	ds #V .6m
.	ds #F 0
.	ds #[ \&
.	ds #] \&
.\}
.	\" simple accents for nroff and troff
.if n \{\
.	ds ' \&
.	ds ` \&
.	ds ^ \&
.	ds , \&
.	ds ~ ~
.	ds ? ?
.	ds ! !
.	ds /
.	ds q
.\}
.if t \{\
.	ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.	ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.	ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.	ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.	ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.	ds ? \s-2c\h'-\w'c'u*7/10'\u\h'\*(#H'\zi\d\s+2\h'\w'c'u*8/10'
.	ds ! \s-2\(or\s+2\h'-\w'\(or'u'\v'-.8m'.\v'.8m'
.	ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.	ds q o\h'-\w'o'u*8/10'\s-4\v'.4m'\z\(*i\v'-.4m'\s+4\h'\w'o'u*8/10'
.\}
.	\" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds v \\k:\h'-(\\n(.wu*9/10-\*(#H)'\v'-\*(#V'\*(#[\s-4v\s0\v'\*(#V'\h'|\\n:u'\*(#]
.ds _ \\k:\h'-(\\n(.wu*9/10-\*(#H+(\*(#F*2/3))'\v'-.4m'\z\(hy\v'.4m'\h'|\\n:u'
.ds . \\k:\h'-(\\n(.wu*8/10)'\v'\*(#V*4/10'\z.\v'-\*(#V*4/10'\h'|\\n:u'
.ds 3 \*(#[\v'.2m'\s-2\&3\s0\v'-.2m'\*(#]
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.ds oe o\h'-(\w'o'u*4/10)'e
.ds Oe O\h'-(\w'O'u*4/10)'E
.	\" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.	\" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.	ds : e
.	ds 8 ss
.	ds v \h'-1'\o'\(aa\(ga'
.	ds _ \h'-1'^
.	ds . \h'-1'.
.	ds 3 3
.	ds o a
.	ds d- d\h'-1'\(ga
.	ds D- D\h'-1'\(hy
.	ds th \o'bp'
.	ds Th \o'LP'
.	ds ae ae
.	ds Ae AE
.	ds oe oe
.	ds Oe OE
.\}
.rm #[ #] #H #V #F C
.SH "NAME"
OLE::Storage::Property \- maintain Properties for OLE::Storage::Var
.PP
$Revision: 1.1.1.1 $ \f(CW$Date:\fR 1998/02/25 21:13:00 $
.SH "SYNOPSIS"
OLE::Storage and OLE::PropertySet are returning from time to time a
kind of variables called Properties (\fI$Prop\fR). Properties could be handled
as follows:
.PP
.Vb 10
\& sub work {
\&    my $Prop = shift;
\&    if (is_scalar $Prop) {
\&       do_something_with ($Prop); # $Prop definitively is a scalar.
\&    } else {
\&       foreach $P (@{array $Prop}) {
\&          work ($P);              # $P could be an array itself.
\&       }
\&    }
\& }
.Ve
\fI$string\fR = \fI$Prop\fR \-> \fIstring()\fR
.PP
\fI$NewProp\fR = \fI$OldProp\fR \-> cast ("\f(CWstring\fR")
.SH "DESCRIPTION"
OLE::Storage::Property is maintaining the Properties, that are initially
instantiated by other packages. It gives storage places to
OLE::Storage::Var, manages Property to Property conversions, Property to
scalar conversions and type information. Though you will use the member
functions of OLE::Storage::Property quite often, you should never create a
Property directly with this package. Therefore \*(L"use OLE::Storage::Property\*(R"
even was useless.
.PP
Type implementation itself is done at OLE::Storage::Var, that offers some
private methods for OLE::Storage::Property. Both, type conversions and type
availability are quite far from being complete (as you will notice when
looking at Var.pm). For this release I cared only to have the
something->string conversions working, and therefore only them are
documented above.
.Ip "array" 4
\fI\e@Properties\fR = \fI$Prop\fR \-> \fIarray()\fR
.Sp
Returns a reference to a Property list. You have to use this to find
out, which properties are hiding inside an array property.
.Ip "Conversion: Property to perl scalar" 4
\fI$scalar\fR = \fI$Prop\fR \-> \fImethod()\fR
.Sp
Returns a scalar variable, that perl understands. Momentarily \fImethod()\fR
should be \fIstring()\fR only.
.Ip "Conversion: Property to Property" 4
\fI$NewProp\fR = \fI$OldProp\fR \-> cast ("\f(CWmethod\fR")
.Sp
Returns a Property of type \f(CWmethod\fR. 
.Ip "is_scalar" 4
\f(CW1\fR||\f(CW0\fR == \fI$Prop\fR \-> \fIis_scalar()\fR
.Sp
Returns 1 if \f(CW$Prop\fR is a scalar variable, 0 otherwise. A property is 
scalar, if it is not an array. 
.Ip "is_array" 4
\f(CW1\fR||\f(CW0\fR == \fI$Prop\fR \-> \fIis_array()\fR
.Sp
Returns 1 if \f(CW$Prop\fR is some array variable, 0 otherwise.
.Ip "is_varray" 4
\f(CW1\fR||\f(CW0\fR == \fI$Prop\fR \-> \fIis_varray()\fR
.Sp
Returns 1 if \f(CW$Prop\fR is a variant array variable, 0 otherwise. A variant array
is an array, that consists out of elements with different types. 
.Ip "stype " 4
\fI$type\fR = \fI$Prop\fR \-> \fIstype()\fR
.Sp
Returns the scalar type of property \f(CW$Prop\fR. This is useful if \f(CW$Prop\fR is an
array and you want to know, what kind of variables it consists of.
.Ip "type" 4
\fI$type\fR = \fI$Prop\fR \-> \fItype()\fR
.Sp
Returns the type of the Property. It is a number if it is a real property
type, and it is a string, if it is an internal property type.
.Ip "typestr" 4
\fI$typestr\fR = \fI$Prop\fR \-> \fItypestr()\fR
.Sp
Returns the name of the property type as string.
.SH "KNOWN BUGS"
Property handling is \fIvery\fR slow.
.SH "SEE ALSO"
the \fIOLE::Storage::Var\fR manpage, demonstration program \*(L"ldat\*(R"
.SH "AUTHOR"
Martin Schwartz <\fIschwartz@cs.tu-berlin.de\fR>. 

.rn }` ''
.IX Title "Storage::Property 3"
.IX Name "OLE::Storage::Property - maintain Properties for OLE::Storage::Var"

.IX Header "NAME"

.IX Header "SYNOPSIS"

.IX Header "DESCRIPTION"

.IX Item "array"

.IX Item "Conversion: Property to perl scalar"

.IX Item "Conversion: Property to Property"

.IX Item "is_scalar"

.IX Item "is_array"

.IX Item "is_varray"

.IX Item "stype "

.IX Item "type"

.IX Item "typestr"

.IX Header "KNOWN BUGS"

.IX Header "SEE ALSO"

.IX Header "AUTHOR"

