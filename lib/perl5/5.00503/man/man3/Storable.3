.rn '' }`
''' $RCSfile$$Revision$$Date$
'''
''' $Log$
'''
.de Sh
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp
.if t .sp .5v
.if n .sp
..
.de Ip
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb
.ft CW
.nf
.ne \\$1
..
.de Ve
.ft R

.fi
..
'''
'''
'''     Set up \*(-- to give an unbreakable dash;
'''     string Tr holds user defined translation string.
'''     Bell System Logo is used as a dummy character.
'''
.tr \(*W-|\(bv\*(Tr
.ie n \{\
.ds -- \(*W-
.ds PI pi
.if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\" diablo 12 pitch
.ds L" ""
.ds R" ""
'''   \*(M", \*(S", \*(N" and \*(T" are the equivalent of
'''   \*(L" and \*(R", except that they are used on ".xx" lines,
'''   such as .IP and .SH, which do another additional levels of
'''   double-quote interpretation
.ds M" """
.ds S" """
.ds N" """""
.ds T" """""
.ds L' '
.ds R' '
.ds M' '
.ds S' '
.ds N' '
.ds T' '
'br\}
.el\{\
.ds -- \(em\|
.tr \*(Tr
.ds L" ``
.ds R" ''
.ds M" ``
.ds S" ''
.ds N" ``
.ds T" ''
.ds L' `
.ds R' '
.ds M' `
.ds S' '
.ds N' `
.ds T' '
.ds PI \(*p
'br\}
.\"	If the F register is turned on, we'll generate
.\"	index entries out stderr for the following things:
.\"		TH	Title 
.\"		SH	Header
.\"		Sh	Subsection 
.\"		Ip	Item
.\"		X<>	Xref  (embedded
.\"	Of course, you have to process the output yourself
.\"	in some meaninful fashion.
.if \nF \{
.de IX
.tm Index:\\$1\t\\n%\t"\\$2"
..
.nr % 0
.rr F
.\}
.TH Storable 3 "perl 5.005, patch 03" "2/Apr/2000" "User Contributed Perl Documentation"
.UC
.if n .hy 0
.if n .na
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.de CQ          \" put $1 in typewriter font
.ft CW
'if n "\c
'if t \\&\\$1\c
'if n \\&\\$1\c
'if n \&"
\\&\\$2 \\$3 \\$4 \\$5 \\$6 \\$7
'.ft R
..
.\" @(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2
.	\" AM - accent mark definitions
.bd B 3
.	\" fudge factors for nroff and troff
.if n \{\
.	ds #H 0
.	ds #V .8m
.	ds #F .3m
.	ds #[ \f1
.	ds #] \fP
.\}
.if t \{\
.	ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.	ds #V .6m
.	ds #F 0
.	ds #[ \&
.	ds #] \&
.\}
.	\" simple accents for nroff and troff
.if n \{\
.	ds ' \&
.	ds ` \&
.	ds ^ \&
.	ds , \&
.	ds ~ ~
.	ds ? ?
.	ds ! !
.	ds /
.	ds q
.\}
.if t \{\
.	ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.	ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.	ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.	ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.	ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.	ds ? \s-2c\h'-\w'c'u*7/10'\u\h'\*(#H'\zi\d\s+2\h'\w'c'u*8/10'
.	ds ! \s-2\(or\s+2\h'-\w'\(or'u'\v'-.8m'.\v'.8m'
.	ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.	ds q o\h'-\w'o'u*8/10'\s-4\v'.4m'\z\(*i\v'-.4m'\s+4\h'\w'o'u*8/10'
.\}
.	\" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds v \\k:\h'-(\\n(.wu*9/10-\*(#H)'\v'-\*(#V'\*(#[\s-4v\s0\v'\*(#V'\h'|\\n:u'\*(#]
.ds _ \\k:\h'-(\\n(.wu*9/10-\*(#H+(\*(#F*2/3))'\v'-.4m'\z\(hy\v'.4m'\h'|\\n:u'
.ds . \\k:\h'-(\\n(.wu*8/10)'\v'\*(#V*4/10'\z.\v'-\*(#V*4/10'\h'|\\n:u'
.ds 3 \*(#[\v'.2m'\s-2\&3\s0\v'-.2m'\*(#]
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.ds oe o\h'-(\w'o'u*4/10)'e
.ds Oe O\h'-(\w'O'u*4/10)'E
.	\" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.	\" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.	ds : e
.	ds 8 ss
.	ds v \h'-1'\o'\(aa\(ga'
.	ds _ \h'-1'^
.	ds . \h'-1'.
.	ds 3 3
.	ds o a
.	ds d- d\h'-1'\(ga
.	ds D- D\h'-1'\(hy
.	ds th \o'bp'
.	ds Th \o'LP'
.	ds ae ae
.	ds Ae AE
.	ds oe oe
.	ds Oe OE
.\}
.rm #[ #] #H #V #F C
.SH "NAME"
Storable \- persistency for perl data structures
.SH "SYNOPSIS"
.PP
.Vb 3
\& use Storable;
\& store \e%table, 'file';
\& $hashref = retrieve('file');
.Ve
.Vb 1
\& use Storable qw(nstore store_fd nstore_fd freeze thaw dclone);
.Ve
.Vb 3
\& # Network order
\& nstore \e%table, 'file';
\& $hashref = retrieve('file');   # There is NO nretrieve()
.Ve
.Vb 5
\& # Storing to and retrieving from an already opened file
\& store_fd \e@array, \e*STDOUT;
\& nstore_fd \e%table, \e*STDOUT;
\& $aryref = retrieve_fd(\e*SOCKET);
\& $hashref = retrieve_fd(\e*SOCKET);
.Ve
.Vb 3
\& # Serializing to memory
\& $serialized = freeze \e%table;
\& %table_clone = %{ thaw($serialized) };
.Ve
.Vb 2
\& # Deep (recursive) cloning
\& $cloneref = dclone($ref);
.Ve
.SH "DESCRIPTION"
The Storable package brings persistency to your perl data structures
containing SCALAR, ARRAY, HASH or REF objects, i.e. anything that can be
convenientely stored to disk and retrieved at a later time.
.PP
It can be used in the regular procedural way by calling \f(CWstore\fR with
a reference to the object to be stored, along with the file name where
the image should be written.
The routine returns \f(CWundef\fR for I/O problems or other internal error,
a true value otherwise. Serious errors are propagated as a \f(CWdie\fR exception.
.PP
To retrieve data stored to disk, use \f(CWretrieve\fR with a file name,
and the objects stored into that file are recreated into memory for you,
a \fIreference\fR to the root object being returned. In case an I/O error
occurs while reading, \f(CWundef\fR is returned instead. Other serious
errors are propagated via \f(CWdie\fR.
.PP
Since storage is performed recursively, you might want to stuff references
to objects that share a lot of common data into a single array or hash
table, and then store that object. That way, when you retrieve back the
whole thing, the objects will continue to share what they originally shared.
.PP
At the cost of a slight header overhead, you may store to an already
opened file descriptor using the \f(CWstore_fd\fR routine, and retrieve
from a file via \f(CWretrieve_fd\fR. Those names aren't imported by default,
so you will have to do that explicitely if you need those routines.
The file descriptor you supply must be already opened, for read
if you're going to retrieve and for write if you wish to store.
.PP
.Vb 2
\&        store_fd(\e%table, *STDOUT) || die "can't store to stdout\en";
\&        $hashref = retrieve_fd(*STDIN);
.Ve
You can also store data in network order to allow easy sharing across
multiple platforms, or when storing on a socket known to be remotely
connected. The routines to call have an initial \f(CWn\fR prefix for \fInetwork\fR,
as in \f(CWnstore\fR and \f(CWnstore_fd\fR. At retrieval time, your data will be
correctly restored so you don't have to know whether you're restoring
from native or network ordered data.
.PP
When using \f(CWretrieve_fd\fR, objects are retrieved in sequence, one
object (i.e. one recursive tree) per associated \f(CWstore_fd\fR.
.PP
If you're more from the object-oriented camp, you can inherit from
Storable and directly store your objects by invoking \f(CWstore\fR as
a method. The fact that the root of the to-be-stored tree is a
blessed reference (i.e. an object) is special-cased so that the
retrieve does not provide a reference to that object but rather the
blessed object reference itself. (Otherwise, you'd get a reference
to that blessed object).
.SH "MEMORY STORE"
The Storable engine can also store data into a Perl scalar instead, to
later retrieve them. This is mainly used to freeze a complex structure in
some safe compact memory place (where it can possibly be sent to another
process via some IPC, since freezing the structure also serializes it in
effect). Later on, and maybe somewhere else, you can thaw the Perl scalar
out and recreate the original complex structure in memory.
.PP
Surprisingly, the routines to be called are named \f(CWfreeze\fR and \f(CWthaw\fR.
If you wish to send out the frozen scalar to another machine, use
\f(CWnfreeze\fR instead to get a portable image.
.PP
Note that freezing an object structure and immediately thawing it
actually achieves a deep cloning of that structure. Storable provides
you with a \f(CWdclone\fR interface which does not create that intermediary
scalar but instead freezes the structure in some internal memory space
and then immediatly thaws it out.
.SH "SPEED"
The heart of Storable is written in C for decent speed. Extra low-level
optimization have been made when manipulating perl internals, to
sacrifice encapsulation for the benefit of a greater speed.
.PP
Storage is now slightly slower than retrieval since the former has to
also store data in a hash table to keep track of which objects
have been stored already, whilst the latter uses an array instead of
a hash table.
.PP
On my HP 9000/712 machine running HPUX 9.03 and with perl 5.004, I can
store 0.85 Mbyte/s and I can retrieve at 0.90 Mbytes/s, approximatively
(CPU + system time).
This was measured with Benchmark and the \fIMagic: The Gathering\fR
database from Tom Christiansen (1.6 Mbytes on disk).
.SH "CANONICAL REPRESENTATION"
Normally Storable stores elements of hashes in the order they are
stored internally by Perl, i.e. pseudo-randomly.  If you set
\f(CW$Storable::canonical\fR to some \f(CWTRUE\fR value, Storable will store
hashes with the elements sorted by their key.  This allows you to
compare data structures by comparing their frozen representations (or
even the compressed frozen representations), which can be useful for
creating lookup tables for complicated queries.
.PP
Canonical order does not imply network order, those are two orthogonal
settings.
.SH "WIZARDS ONLY"
The \f(CWStorable::last_op_in_netorder()\fR predicate will tell you whether
network order was used in the last store or retrieve operation.  If you
don't know how to use this, just forget about it.
.SH "EXAMPLES"
Here are some code samples showing a possible usage of Storable:
.PP
.Vb 1
\&        use Storable qw(store retrieve freeze thaw dclone);
.Ve
.Vb 1
\&        %color = ('Blue' => 0.1, 'Red' => 0.8, 'Black' => 0, 'White' => 1);
.Ve
.Vb 1
\&        store(\e%color, '/tmp/colors') or die "Can't store %a in /tmp/colors!\en";
.Ve
.Vb 3
\&        $colref = retrieve('/tmp/colors');
\&        die "Unable to retrieve from /tmp/colors!\en" unless defined $colref;
\&        printf "Blue is still %lf\en", $colref->{'Blue'};
.Ve
.Vb 1
\&        $colref2 = dclone(\e%color);
.Ve
.Vb 3
\&        $str = freeze(\e%color);
\&        printf "Serialization of %%color is %d bytes long.\en", length($str);
\&        $colref3 = thaw($str);
.Ve
which prints (on my machine):
.PP
.Vb 2
\&        Blue is still 0.100000
\&        Serialization of %color is 102 bytes long.
.Ve
.SH "WARNING"
If you're using references as keys within your hash tables, you're bound
to disapointment when retrieving your data. Indeed, Perl stringifies
references used as hash table keys. If you later wish to access the
items via another reference stringification (i.e. using the same
reference that was used for the key originally to record the value into
the hash table), it will work because both references stringify to the
same string.
.PP
It won't work across a \f(CWstore\fR and \f(CWretrieve\fR operations however, because
the addresses in the retrieved objects, which are part of the stringified
references, will probably differ from the original addresses. The
topology of your structure is preserved, but not hidden semantics
like those.
.PP
On platforms where it matters, be sure to call \f(CWbinmode()\fR on the
descriptors that you pass to Storable functions.
.PP
Storing data canonically that contains large hashes can be
significantly slower than storing the same data normally, as
temprorary arrays to hold the keys for each hash have to be allocated,
populated, sorted and freed.  Some tests have shown a halving of the
speed of storing -- the exact penalty will depend on the complexity of
your data.  There is no slowdown on retrieval.
.SH "BUGS"
You can't store GLOB, CODE, FORMLINE, etc... If you can define
semantics for those operations, feel free to enhance Storable so that
it can deal with them.
.PP
The store functions will \f(CWcroak\fR if they run into such references
unless you set \f(CW$Storable::forgive_me\fR to some \f(CWTRUE\fR value. In that
case, the fatal message is turned in a warning and some
meaningless string is stored instead.
.PP
Setting \f(CW$Storable::canonical\fR may not yield frozen strings that
compare equal due to possible stringification of numbers. When the
string version of a scalar exists, it is the form stored, therefore
if you happen to use your numbers as strings between two freezing
operations on the same data structures, you will get different
results.
.PP
Due to the aforementionned optimizations, Storable is at the mercy
of perl's internal redesign or structure changes. If that bothers
you, you can try convincing Larry that what is used in Storable
should be documented and consistently kept in future revisions.
.SH "CREDITS"
Thank you to (in chronological order):
.PP
.Vb 7
\&        Jarkko Hietaniemi <jhi@iki.fi>
\&        Ulrich Pfeifer <pfeifer@charly.informatik.uni-dortmund.de>
\&        Benjamin A. Holzman <benjamin.a.holzman@bender.com>
\&        Andrew Ford <A.Ford@ford-mason.co.uk>
\&        Gisle Aas <gisle@aas.no>
\&        Jeff Gresham <gresham_jeffrey@jpmorgan.com>
\&        Murray Nesbitt <murray@activestate.com>
.Ve
for their bug reports, suggestions and contributions.
.PP
Benjamin Holzman contributed the tied variable support, Andrew Ford
contributed the canonical order for hashes, and Gisle Aas fixed
a few misunderstandings of mine regarding the Perl internals,
and optimized the emission of \*(L"tags\*(R" in the output streams by
simply counting the objects instead of tagging them (leading to
a binary incompatibility for the Storable image starting at version
0.6\*(--older images are of course still properly understood).
Murray Nesbitt made Storable thread-safe.
.SH "TRANSLATIONS"
There is a Japanese translation of this man page available at
http://member.nifty.ne.jp/hippo2000/perltips/storable.htm ,
courtesy of Kawai, Takanori <kawai@nippon-rad.co.jp>.
.SH "AUTHOR"
Raphael Manfredi \fI<Raphael_Manfredi@pobox.com>\fR

.rn }` ''
.IX Title "Storable 3"
.IX Name "Storable - persistency for perl data structures"

.IX Header "NAME"

.IX Header "SYNOPSIS"

.IX Header "DESCRIPTION"

.IX Header "MEMORY STORE"

.IX Header "SPEED"

.IX Header "CANONICAL REPRESENTATION"

.IX Header "WIZARDS ONLY"

.IX Header "EXAMPLES"

.IX Header "WARNING"

.IX Header "BUGS"

.IX Header "CREDITS"

.IX Header "TRANSLATIONS"

.IX Header "AUTHOR"

