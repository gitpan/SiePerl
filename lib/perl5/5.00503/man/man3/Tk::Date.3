.rn '' }`
''' $RCSfile$$Revision$$Date$
'''
''' $Log$
'''
.de Sh
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp
.if t .sp .5v
.if n .sp
..
.de Ip
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb
.ft CW
.nf
.ne \\$1
..
.de Ve
.ft R

.fi
..
'''
'''
'''     Set up \*(-- to give an unbreakable dash;
'''     string Tr holds user defined translation string.
'''     Bell System Logo is used as a dummy character.
'''
.tr \(*W-|\(bv\*(Tr
.ie n \{\
.ds -- \(*W-
.ds PI pi
.if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\" diablo 12 pitch
.ds L" ""
.ds R" ""
'''   \*(M", \*(S", \*(N" and \*(T" are the equivalent of
'''   \*(L" and \*(R", except that they are used on ".xx" lines,
'''   such as .IP and .SH, which do another additional levels of
'''   double-quote interpretation
.ds M" """
.ds S" """
.ds N" """""
.ds T" """""
.ds L' '
.ds R' '
.ds M' '
.ds S' '
.ds N' '
.ds T' '
'br\}
.el\{\
.ds -- \(em\|
.tr \*(Tr
.ds L" ``
.ds R" ''
.ds M" ``
.ds S" ''
.ds N" ``
.ds T" ''
.ds L' `
.ds R' '
.ds M' `
.ds S' '
.ds N' `
.ds T' '
.ds PI \(*p
'br\}
.\"	If the F register is turned on, we'll generate
.\"	index entries out stderr for the following things:
.\"		TH	Title 
.\"		SH	Header
.\"		Sh	Subsection 
.\"		Ip	Item
.\"		X<>	Xref  (embedded
.\"	Of course, you have to process the output yourself
.\"	in some meaninful fashion.
.if \nF \{
.de IX
.tm Index:\\$1\t\\n%\t"\\$2"
..
.nr % 0
.rr F
.\}
.TH Date 3 "perl 5.005, patch 03" "14/Apr/1999" "User Contributed Perl Documentation"
.UC
.if n .hy 0
.if n .na
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.de CQ          \" put $1 in typewriter font
.ft CW
'if n "\c
'if t \\&\\$1\c
'if n \\&\\$1\c
'if n \&"
\\&\\$2 \\$3 \\$4 \\$5 \\$6 \\$7
'.ft R
..
.\" @(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2
.	\" AM - accent mark definitions
.bd B 3
.	\" fudge factors for nroff and troff
.if n \{\
.	ds #H 0
.	ds #V .8m
.	ds #F .3m
.	ds #[ \f1
.	ds #] \fP
.\}
.if t \{\
.	ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.	ds #V .6m
.	ds #F 0
.	ds #[ \&
.	ds #] \&
.\}
.	\" simple accents for nroff and troff
.if n \{\
.	ds ' \&
.	ds ` \&
.	ds ^ \&
.	ds , \&
.	ds ~ ~
.	ds ? ?
.	ds ! !
.	ds /
.	ds q
.\}
.if t \{\
.	ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.	ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.	ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.	ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.	ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.	ds ? \s-2c\h'-\w'c'u*7/10'\u\h'\*(#H'\zi\d\s+2\h'\w'c'u*8/10'
.	ds ! \s-2\(or\s+2\h'-\w'\(or'u'\v'-.8m'.\v'.8m'
.	ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.	ds q o\h'-\w'o'u*8/10'\s-4\v'.4m'\z\(*i\v'-.4m'\s+4\h'\w'o'u*8/10'
.\}
.	\" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds v \\k:\h'-(\\n(.wu*9/10-\*(#H)'\v'-\*(#V'\*(#[\s-4v\s0\v'\*(#V'\h'|\\n:u'\*(#]
.ds _ \\k:\h'-(\\n(.wu*9/10-\*(#H+(\*(#F*2/3))'\v'-.4m'\z\(hy\v'.4m'\h'|\\n:u'
.ds . \\k:\h'-(\\n(.wu*8/10)'\v'\*(#V*4/10'\z.\v'-\*(#V*4/10'\h'|\\n:u'
.ds 3 \*(#[\v'.2m'\s-2\&3\s0\v'-.2m'\*(#]
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.ds oe o\h'-(\w'o'u*4/10)'e
.ds Oe O\h'-(\w'O'u*4/10)'E
.	\" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.	\" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.	ds : e
.	ds 8 ss
.	ds v \h'-1'\o'\(aa\(ga'
.	ds _ \h'-1'^
.	ds . \h'-1'.
.	ds 3 3
.	ds o a
.	ds d- d\h'-1'\(ga
.	ds D- D\h'-1'\(hy
.	ds th \o'bp'
.	ds Th \o'LP'
.	ds ae ae
.	ds Ae AE
.	ds oe oe
.	ds Oe OE
.\}
.rm #[ #] #H #V #F C
.SH "NAME"
Tk::Date \- a date/time widget for perl/Tk
.SH "SYNOPSIS"
.PP
.Vb 3
\&    use Tk::Date;
\&    $date_widget = $top->Date->pack;
\&    $date_widget->get("%x %X");
.Ve
.SH "DESCRIPTION"
Tk::Date implements a date/time widget. There are three ways to input
a date:
.Ip "\(bu Using the keyboard to input the digits and the tab key or the mouse pointer to move focus between fields." 4
.Ip "\(bu Using up and down cursor keys to increment/decrement the date." 4
.Ip "\(bu Selecting up and down arrow buttons will increment or decrement the value of the active field." 4
.Sh "The Date/Time Format"
Unlike Java, Perl does not have a date/time object. However, it is
possible to use the unix time (seconds since epoch, that is 1st
January 1970) as a replacement. This is limited, since on most
architectures, the valid range is between 14th December 1901 and 19th
January 2038. For other dates, it is possible to use a hash notation:
.PP
.Vb 6
\&    { y => year,
\&      m => month,
\&      d => day,
\&      H => hour,
\&      M => minute,
\&      S => second }
.Ve
The abbreviations are derivated from the format letters of strftime.
Note that year is the full year (1998 instead of 98) and month is the
real month number, as opposed to the output of \fIlocaltime()\fR, where the
month is subtracted by one.
.PP
In this document, the first method will be referred as \fBunixtime\fR and
the second method as \fBdatehash\fR.
.SH "STANDARD OPTIONS"
Tk::Date descends from Frame and inherits all of its options.
.Ip "-orient" 4
Specified orientation of the increment and decrements buttons. May be
vertical (default) or horizontal.
.SH "WIDGET\-SPECIFIC OPTIONS"
.Ip "-bell" 4
Specifies a boolean value. If true then a bell will ring if the user
attempts to enter an illegal character (e.g. a non-digit).
.Ip "-check" 4
If set to a true value, Tk::Date makes sure that the user can't input
incorrect dates.
.Ip "-choices" 4
Creates an additional choice button. The argument to \fI\-choices\fR must be one
of \f(CWnow\fR, \f(CWtoday\fR, \f(CWyesterday\fR or \f(CWtomorrow\fR, or an array with a
combination of those. If only one is used, only a simple button is created,
otherwise an optionmenu.
.Sp
Examples:
.Sp
.Vb 2
\&        -choices => 'now'
\&        -choices => ['today', 'yesterday', 'tomorrow']
.Ve
It is possible to specify user-defined values. User-defined values
should be defined as array elements with two elements. The first element
is the label for the button or optionmenu entry. The second element
specifies the time associated with this value. It may be either a date
hash (missing values are set to the current date) or a subroutine which
calculates unix seconds.
.Sp
Here are two examples. The first defines an additional optionmenu
entry for this year's christmas and the second defines an entry for
the day before yesterday.
.Sp
.Vb 7
\&        -choices => ['today',
\&                     ['christmas' => { 'm' => 12, 'd' => 25}]
\&                    ]
\&        -choices => ['today',
\&                     'yesterday',
\&                     ['the day before yesterday' => sub { time()-86400*2 }]
\&                    ]
.Ve
.Ip "-command" 4
Specifies a callback which is executed every time after an arrow
button is selected. The callback is called with the date widget as its
argument.
.Ip "-decbitmap" 4
Sets the bitmap for the decrease button. Defaults to FireButton's default
decrease bitmap.
.Ip "-editable" 4
If set to a false value, disables editing of the date widget. All entries
are converted to labels and there are no arrow buttons. Defaults to
true (widget is editable).
.Ip "-fields" 4
Specifies which fields are constructed: date, time or both. Defaults to both.
.Ip "-incbitmap" 4
Sets the bitmap for the increase button. Defaults to FireButton's default
increase bitmap.
.Ip "-precommand" 4
Specifies a callback which is executed every time when an arrow button
is selected and before actually execute the increment or decrement
command. The callback is called with following arguments: date widget,
type (either \f(CWdate\fR or \f(CWtime\fR) and increment (+1 or \-1). If the
callback returns with a false value, the increment or decrement
command will not be executed.
.Ip "-repeatinterval" 4
Specifies the amount of time between invokations of the increment or
decrement. Defaults to 50 milliseconds.
.Ip "-repeatdelay" 4
Specifies the amount of time before the increment or decrement is first done 
after the Button-1 is pressed over the widget. Defaults to 500 milliseconds.
.Ip "-selectlabel" 4
Change label text for choice menu. Defaults to \*(L'Select:\*(R'.
.Ip "-value" 4
Sets an initial value for the widget. The argument may be \fBunixtime\fR,
\fBdatehash\fR or \fBnow\fR (for the current time).
.Ip "-varfmt" 4
Specifies the format of the \fI\-variable\fR or \fI\-value\fR argument. May be
\fBunixtime\fR (default) or \fBdatehash\fR.
.Ip "-variable" 4
Ties the specified variable to the widget. (See Bugs)
.SH "METHODS"
The \fBDate\fR widget supports the following non-standard method:
.Ip "\fBget\fR([\fIfmt\fR])" 4
Gets the current value of the date widget. If \fIfmt\fR is not given or
equal \*(L"%s\*(R", the returned value is in unix time (seconds since epoch).
This should work on all systems.
.Sp
Otherwise, \fIfmt\fR is a format string which is fed to \fBstrftime\fR.
\fBstrftime\fR needs the \s-1POSIX\s0 module installed and therefore
may not work on all systems.
.SH "EXAMPLES"
Display a date widget with only the date field in the format dd/mm/yyyy
and get the value in the same format:
.PP
.Vb 6
\&  $date = $top->Date(-datefmt => '%2d/%2m/%4y',
\&                     -fields => 'date',
\&                     -value => 'now')->pack;
\&  # this "get" only works for systems with POSIX.pm
\&  $top->Button(-text => 'Get date',
\&               -command => sub { warn $date->get("%d/%m/%Y") })->pack;
.Ve
Use the datehash format instead of unixtime:
.PP
.Vb 4
\&  $top->Date(-fields  => 'date',
\&             -value   => {'d' => '13', 'm' => '12', 'y' => '1957'},
\&             -varfmt => 'datehash',
\&            )->pack;
.Ve
.SH "BUGS/TODO"
.PP
.Vb 12
\& - waiting for a real perl Date/Time object
\& - tie interface (-variable) does not work if the date widget gets destroyed
\&   (see uncommented DESTROY)
\& - get and set must use the tied variable, unless tieying does no work
\&   at all
\& - -from/-to (limit) (or -minvalue, -maxvalue?)
\& - range check (in DateNumEntryPlain::incdec)
\& - am/pm
\& - more interactive examples are needed for some design issues (how strong
\&   signal errors? ...)
\& - Wochentag wird beim Hoch-/Runterzaehlen von m und y nicht aktualisiert
\& - check date-Funktion
.Ve
.SH "SEE ALSO"
Tk, Tk::NumEntryPlain,
Tk::FireButton, POSIX
.SH "AUTHOR"
Slaven Rezic <eserte@cs.tu-berlin.de>
.SH "COPYRIGHT"
Copyright (c) 1997, 1998, 1999 Slaven Rezic. All rights reserved.
This module is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.

.rn }` ''
.IX Title "Date 3"
.IX Name "Tk::Date - a date/time widget for perl/Tk"

.IX Header "NAME"

.IX Header "SYNOPSIS"

.IX Header "DESCRIPTION"

.IX Item "\(bu Using the keyboard to input the digits and the tab key or the mouse pointer to move focus between fields."

.IX Item "\(bu Using up and down cursor keys to increment/decrement the date."

.IX Item "\(bu Selecting up and down arrow buttons will increment or decrement the value of the active field."

.IX Subsection "The Date/Time Format"

.IX Header "STANDARD OPTIONS"

.IX Item "-orient"

.IX Header "WIDGET\-SPECIFIC OPTIONS"

.IX Item "-bell"

.IX Item "-check"

.IX Item "-choices"

.IX Item "-command"

.IX Item "-decbitmap"

.IX Item "-editable"

.IX Item "-fields"

.IX Item "-incbitmap"

.IX Item "-precommand"

.IX Item "-repeatinterval"

.IX Item "-repeatdelay"

.IX Item "-selectlabel"

.IX Item "-value"

.IX Item "-varfmt"

.IX Item "-variable"

.IX Header "METHODS"

.IX Item "\fBget\fR([\fIfmt\fR])"

.IX Header "EXAMPLES"

.IX Header "BUGS/TODO"

.IX Header "SEE ALSO"

.IX Header "AUTHOR"

.IX Header "COPYRIGHT"

