.rn '' }`
''' $RCSfile$$Revision$$Date$
'''
''' $Log$
'''
.de Sh
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp
.if t .sp .5v
.if n .sp
..
.de Ip
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb
.ft CW
.nf
.ne \\$1
..
.de Ve
.ft R

.fi
..
'''
'''
'''     Set up \*(-- to give an unbreakable dash;
'''     string Tr holds user defined translation string.
'''     Bell System Logo is used as a dummy character.
'''
.tr \(*W-|\(bv\*(Tr
.ie n \{\
.ds -- \(*W-
.ds PI pi
.if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\" diablo 12 pitch
.ds L" ""
.ds R" ""
'''   \*(M", \*(S", \*(N" and \*(T" are the equivalent of
'''   \*(L" and \*(R", except that they are used on ".xx" lines,
'''   such as .IP and .SH, which do another additional levels of
'''   double-quote interpretation
.ds M" """
.ds S" """
.ds N" """""
.ds T" """""
.ds L' '
.ds R' '
.ds M' '
.ds S' '
.ds N' '
.ds T' '
'br\}
.el\{\
.ds -- \(em\|
.tr \*(Tr
.ds L" ``
.ds R" ''
.ds M" ``
.ds S" ''
.ds N" ``
.ds T" ''
.ds L' `
.ds R' '
.ds M' `
.ds S' '
.ds N' `
.ds T' '
.ds PI \(*p
'br\}
.\"	If the F register is turned on, we'll generate
.\"	index entries out stderr for the following things:
.\"		TH	Title 
.\"		SH	Header
.\"		Sh	Subsection 
.\"		Ip	Item
.\"		X<>	Xref  (embedded
.\"	Of course, you have to process the output yourself
.\"	in some meaninful fashion.
.if \nF \{
.de IX
.tm Index:\\$1\t\\n%\t"\\$2"
..
.nr % 0
.rr F
.\}
.TH Multi::Toplevel 3 "perl 5.005, patch 03" "31/May/1999" "User Contributed Perl Documentation"
.UC
.if n .hy 0
.if n .na
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.de CQ          \" put $1 in typewriter font
.ft CW
'if n "\c
'if t \\&\\$1\c
'if n \\&\\$1\c
'if n \&"
\\&\\$2 \\$3 \\$4 \\$5 \\$6 \\$7
'.ft R
..
.\" @(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2
.	\" AM - accent mark definitions
.bd B 3
.	\" fudge factors for nroff and troff
.if n \{\
.	ds #H 0
.	ds #V .8m
.	ds #F .3m
.	ds #[ \f1
.	ds #] \fP
.\}
.if t \{\
.	ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.	ds #V .6m
.	ds #F 0
.	ds #[ \&
.	ds #] \&
.\}
.	\" simple accents for nroff and troff
.if n \{\
.	ds ' \&
.	ds ` \&
.	ds ^ \&
.	ds , \&
.	ds ~ ~
.	ds ? ?
.	ds ! !
.	ds /
.	ds q
.\}
.if t \{\
.	ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.	ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.	ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.	ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.	ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.	ds ? \s-2c\h'-\w'c'u*7/10'\u\h'\*(#H'\zi\d\s+2\h'\w'c'u*8/10'
.	ds ! \s-2\(or\s+2\h'-\w'\(or'u'\v'-.8m'.\v'.8m'
.	ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.	ds q o\h'-\w'o'u*8/10'\s-4\v'.4m'\z\(*i\v'-.4m'\s+4\h'\w'o'u*8/10'
.\}
.	\" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds v \\k:\h'-(\\n(.wu*9/10-\*(#H)'\v'-\*(#V'\*(#[\s-4v\s0\v'\*(#V'\h'|\\n:u'\*(#]
.ds _ \\k:\h'-(\\n(.wu*9/10-\*(#H+(\*(#F*2/3))'\v'-.4m'\z\(hy\v'.4m'\h'|\\n:u'
.ds . \\k:\h'-(\\n(.wu*8/10)'\v'\*(#V*4/10'\z.\v'-\*(#V*4/10'\h'|\\n:u'
.ds 3 \*(#[\v'.2m'\s-2\&3\s0\v'-.2m'\*(#]
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.ds oe o\h'-(\w'o'u*4/10)'e
.ds Oe O\h'-(\w'O'u*4/10)'E
.	\" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.	\" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.	ds : e
.	ds 8 ss
.	ds v \h'-1'\o'\(aa\(ga'
.	ds _ \h'-1'^
.	ds . \h'-1'.
.	ds 3 3
.	ds o a
.	ds d- d\h'-1'\(ga
.	ds D- D\h'-1'\(hy
.	ds th \o'bp'
.	ds Th \o'LP'
.	ds ae ae
.	ds Ae AE
.	ds oe oe
.	ds Oe OE
.\}
.rm #[ #] #H #V #F C
.SH "NAME"
Tk::Multi::Toplevel \- Toplevel MultiManager
.SH "SYNOPSIS"
.PP
.Vb 1
\& use Multi::Toplevel ;
.Ve
.Vb 3
\& my $mw = MainWindow-> new ;
\& 
\& my $p = $mw->MultiTop();
.Ve
.Vb 4
\& # If Multi::Toplevel is the only Tk window of your application
\& $mw -> withdraw ; # hide the main window
\& # destroy the main window when close is called
\& $p -> OnDestroy(sub{$mw->destroy});
.Ve
.Vb 3
\& # add a 'bar' menu with a 'foo' button on the menu bar
\& $p->menuCommand(name => 'foo', menu => 'bar', 
\&                 sub => sub{warn "invoked  bar->foo\en";});
.Ve
.Vb 6
\& # add a menu button on the 'File' menu
\& $p->add(
\&         'command', 
\&         -label => 'baz', 
\&         command => sub {warn "invoked  File->baz\en";}
\&        );
.Ve
.SH "DESCRIPTION"
This class is a the \fITk::Multi::Manager\fR manpage packed in a Toplevel window. It
features also :
.Ip "\(bu" 4
\&'File->show internal...\*(R' button to invoke an Object Scanner 
(See the \fITk::ObjScanner\fR manpage)
.Ip "\(bu" 4
A facility to manage user menus with sorted buttons
.Ip "\(bu" 4
A help facility based on the \fITk::Pod\fR manpage
.SH "Users menus"
By default the Multi::Toplevel widget comes with 3 menubuttons:
.Ip "\(bu" 4
\&'File\*(R' for the main widget commands
.Ip "\(bu" 4
\&'windows\*(R' to manage the Multi slaves widget
.Ip "\(bu" 4
\&'Help\*(R'
.PP
The user can also add its own menus and menu buttons to the main menubar. 
When needed the user can call the menuCommand method to add a new menu button
(and as new menu if necessary) . Then the user can remove the menu button 
with the menuRemove command.
.PP
For instance, if the user call :
.PP
.Vb 4
\& $widget->->menuCommand(name => 'foo', menu => 'example', 
\&   sub => \e&a_sub);
\&  
\&The menubar will feature a new 'example' menu with a 'foo' button.
.Ve
Then if the user call : 
.PP
.Vb 2
\& $widget->->menuCommand(name => 'bar', menu => 'example', 
\&   sub => \e&a_sub);
.Ve
The menubar will feature a new \*(L'bar\*(R' button in the \*(L'example\*(R' menu. Note that 
menu buttons are sorted alphabetically.
.PP
Then if the user call : 
.PP
.Vb 1
\& $widget->menuRemove(name => 'bar', menu => 'example');
.Ve
The bar button will be removed from the menu bar.
.SH "Constructor configuration options"
.Sh "manager"
Object reference that will be scanned by the ObjScanner. Usefull when you
want to debug the object that actually use the Multi::TopLevel. By default
the ObjScanner will scan the Multi::TopLevel object.
.Sh "podName"
This the name of the pod file that will be displayed with the 
\&'Help\*(R'\->'global\*(R' button. This should be set to the pod file name of the
class or the application using this widget. 
.PP
By default, the help button will display the pod file of
Multi::TopLevel.
.Sh "podSection"
This the section of the pod file that will be displayed with the 
\&'Help\*(R'\->'global\*(R' button.
.PP
By default, the help button will display the \*(L'\s-1DESCRIPTION\s0\*(R' pod section.
.SH "Advertised widgets"
.Ip "\(bu" 4
fileMenu: \*(L'File\*(R' Tk::Menu (on the left of the menu bar)
.Ip "\(bu" 4
menubar : the Tk::Frame containing the menu buttons
.Ip "\(bu" 4
multiMgr: The Tk::Multi::Manager
.SH "delegated methods"
.Ip "\(bu" 4
newSlave, hide, show, destroySlave : To the Tk::Multi::Manager 
.Ip "\(bu" 4
add, delete, insert : To the \*(L'File\*(R' Tk::Menu
.SH "Methods"
.Sh "\fImenuCommand()\fR"
Parameters are :
.Ip "\(bu" 4
name: button_name
.Ip "\(bu" 4
menu: menu_name 
.Ip "\(bu" 4
command: subref
.PP
Will add the \*(L'button_name\*(R' button in the \*(L'menu_name\*(R' menu to invoke the sub 
ref. If necessary, the \*(L'menu_name\*(R' menu will be created.
.Sh "menuRemove ()"
.Ip "\(bu" 4
name: button_name 
.Ip "\(bu" 4
menu: menu_name 
.PP
Will remove the \*(L'button_name\*(R' button from the \*(L'menu_name\*(R' menu.
If no buttons are left, the \*(L'menu_name\*(R' menu will be removed from the menu
bar.
.Sh "showHelp (...)"
Parameters are :
.Ip "\(bu" 4
pod: pod file name (optional, defaults to the file name passed to the
constructor or to \*(L'Tk::Multi::Toplevel')
.Ip "\(bu" 4
section: pod_section (optional, defaults to the sectione name passed to the
constructor or to \*(L'\s-1DESCRIPTION\s0')
.PP
Will invoke the Tk::Pod documentation widget of the specified
pod file and pod section.
.SH "BUGS"
Users menu does not fold when you insert a lot of buttons.
.PP
Tk::Pod 0.10 does not display the specified section. Use a later version or
this patch (http://www.xray.mpe.mpg.de/mailing-lists/ptk/1998-11/msg00033.html)
.SH "AUTHOR"
Dominique Dumont, Dominique_Dumont@grenoble.hp.com
.PP
Copyright (c) 1998-1999 Dominique Dumont. All rights reserved.
This program is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
.SH "SEE ALSO"
\fIperl\fR\|(1), \fITk\fR\|(3), \fITk::Multi::Manager\fR\|(3), \fITk::Pod\fR\|(3), \fITk::ObjScanner\fR\|(3),
\fITk::mega\fR\|(3)

.rn }` ''
.IX Title "Multi::Toplevel 3"
.IX Name "Tk::Multi::Toplevel - Toplevel MultiManager"

.IX Header "NAME"

.IX Header "SYNOPSIS"

.IX Header "DESCRIPTION"

.IX Item "\(bu"

.IX Item "\(bu"

.IX Item "\(bu"

.IX Header "Users menus"

.IX Item "\(bu"

.IX Item "\(bu"

.IX Item "\(bu"

.IX Header "Constructor configuration options"

.IX Subsection "manager"

.IX Subsection "podName"

.IX Subsection "podSection"

.IX Header "Advertised widgets"

.IX Item "\(bu"

.IX Item "\(bu"

.IX Item "\(bu"

.IX Header "delegated methods"

.IX Item "\(bu"

.IX Item "\(bu"

.IX Header "Methods"

.IX Subsection "\fImenuCommand()\fR"

.IX Item "\(bu"

.IX Item "\(bu"

.IX Item "\(bu"

.IX Subsection "menuRemove ()"

.IX Item "\(bu"

.IX Item "\(bu"

.IX Subsection "showHelp (...)"

.IX Item "\(bu"

.IX Item "\(bu"

.IX Header "BUGS"

.IX Header "AUTHOR"

.IX Header "SEE ALSO"

