.rn '' }`
''' $RCSfile$$Revision$$Date$
'''
''' $Log$
'''
.de Sh
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp
.if t .sp .5v
.if n .sp
..
.de Ip
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb
.ft CW
.nf
.ne \\$1
..
.de Ve
.ft R

.fi
..
'''
'''
'''     Set up \*(-- to give an unbreakable dash;
'''     string Tr holds user defined translation string.
'''     Bell System Logo is used as a dummy character.
'''
.tr \(*W-|\(bv\*(Tr
.ie n \{\
.ds -- \(*W-
.ds PI pi
.if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\" diablo 12 pitch
.ds L" ""
.ds R" ""
'''   \*(M", \*(S", \*(N" and \*(T" are the equivalent of
'''   \*(L" and \*(R", except that they are used on ".xx" lines,
'''   such as .IP and .SH, which do another additional levels of
'''   double-quote interpretation
.ds M" """
.ds S" """
.ds N" """""
.ds T" """""
.ds L' '
.ds R' '
.ds M' '
.ds S' '
.ds N' '
.ds T' '
'br\}
.el\{\
.ds -- \(em\|
.tr \*(Tr
.ds L" ``
.ds R" ''
.ds M" ``
.ds S" ''
.ds N" ``
.ds T" ''
.ds L' `
.ds R' '
.ds M' `
.ds S' '
.ds N' `
.ds T' '
.ds PI \(*p
'br\}
.\"	If the F register is turned on, we'll generate
.\"	index entries out stderr for the following things:
.\"		TH	Title 
.\"		SH	Header
.\"		Sh	Subsection 
.\"		Ip	Item
.\"		X<>	Xref  (embedded
.\"	Of course, you have to process the output yourself
.\"	in some meaninful fashion.
.if \nF \{
.de IX
.tm Index:\\$1\t\\n%\t"\\$2"
..
.nr % 0
.rr F
.\}
.TH Storage 3 "perl 5.005, patch 03" "28/Apr/1998" "User Contributed Perl Documentation"
.UC
.if n .hy 0
.if n .na
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.de CQ          \" put $1 in typewriter font
.ft CW
'if n "\c
'if t \\&\\$1\c
'if n \\&\\$1\c
'if n \&"
\\&\\$2 \\$3 \\$4 \\$5 \\$6 \\$7
'.ft R
..
.\" @(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2
.	\" AM - accent mark definitions
.bd B 3
.	\" fudge factors for nroff and troff
.if n \{\
.	ds #H 0
.	ds #V .8m
.	ds #F .3m
.	ds #[ \f1
.	ds #] \fP
.\}
.if t \{\
.	ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.	ds #V .6m
.	ds #F 0
.	ds #[ \&
.	ds #] \&
.\}
.	\" simple accents for nroff and troff
.if n \{\
.	ds ' \&
.	ds ` \&
.	ds ^ \&
.	ds , \&
.	ds ~ ~
.	ds ? ?
.	ds ! !
.	ds /
.	ds q
.\}
.if t \{\
.	ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.	ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.	ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.	ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.	ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.	ds ? \s-2c\h'-\w'c'u*7/10'\u\h'\*(#H'\zi\d\s+2\h'\w'c'u*8/10'
.	ds ! \s-2\(or\s+2\h'-\w'\(or'u'\v'-.8m'.\v'.8m'
.	ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.	ds q o\h'-\w'o'u*8/10'\s-4\v'.4m'\z\(*i\v'-.4m'\s+4\h'\w'o'u*8/10'
.\}
.	\" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds v \\k:\h'-(\\n(.wu*9/10-\*(#H)'\v'-\*(#V'\*(#[\s-4v\s0\v'\*(#V'\h'|\\n:u'\*(#]
.ds _ \\k:\h'-(\\n(.wu*9/10-\*(#H+(\*(#F*2/3))'\v'-.4m'\z\(hy\v'.4m'\h'|\\n:u'
.ds . \\k:\h'-(\\n(.wu*8/10)'\v'\*(#V*4/10'\z.\v'-\*(#V*4/10'\h'|\\n:u'
.ds 3 \*(#[\v'.2m'\s-2\&3\s0\v'-.2m'\*(#]
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.ds oe o\h'-(\w'o'u*4/10)'e
.ds Oe O\h'-(\w'O'u*4/10)'E
.	\" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.	\" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.	ds : e
.	ds 8 ss
.	ds v \h'-1'\o'\(aa\(ga'
.	ds _ \h'-1'^
.	ds . \h'-1'.
.	ds 3 3
.	ds o a
.	ds d- d\h'-1'\(ga
.	ds D- D\h'-1'\(hy
.	ds th \o'bp'
.	ds Th \o'LP'
.	ds ae ae
.	ds Ae AE
.	ds oe oe
.	ds Oe OE
.\}
.rm #[ #] #H #V #F C
.SH "NAME"
OLE::Storage \- An Interface to \fBStructured Storage\fR Documents.
.PP
$Revision: 1.8 $ \f(CW$Date:\fR 1998/04/28 00:39:43 $
.SH "SYNOPSIS"
use \fIOLE::Storage()\fR
.PP
use Startup;
.PP
\fI$Var\fR = OLE::Storage->NewVar ();
\fI$Startup\fR = new Startup;
.PP
\fI$Doc\fR = OLE::Storage->open (\fI$Startup\fR, \fI$Var\fR, \fI$file\fR [,\fI$m\fR, \fI\e$buf\fR])
.PP
\fI$Doc\fR \-> directory (\fI$pps\fR, \fI\e%Names\fR, \*(L"\fIstring\fR")
.PP
\fI$Doc\fR \-> read (\fI$pps\fR, \fI\e$buf\fR [,\fI$offset\fR, \fI$size\fR])
.PP
\fI$Doc\fR \-> close ()
.PP
Detailed syntax, descriptions and further methods: below.
.SH "DESCRIPTION"
Documents done at Microsoft Windows Systems are tending to be stored in a
persistant data format, that MS calls \*(L"Structured Storage\*(R". This module gives
access to Structured Storage files. Alas, the current release allows more or
less read access, only. You can modify document contents (streams) with it,
but you cannot create or delete streams, nor rename them or change their
size. Also a file locking mechanism still is missing. I hope to offer write
support with next release.
.Ip "close" 4
\f(CW1\fR||\f(CWO\fR == \fI$D\fR \-> close ()
.Sp
Close the document.
.Ip "clsid" 4
\fI$clsid\fR == \fI$D\fR \-> clsid (\fI$pps\fR)
.Sp
Returns the \s-1CLSID\s0 of the property \fI$pps\fR as \s-1CLSID\s0 Property.
.Ip "color" 4
\f(CW0\fR||\f(CW1\fR == \fI$D\fR \-> color (\fI$pps\fR)
.Sp
Returns the \*(L"color\*(R" of the property \fI$pps\fR.
.Ip "date" 4
\fI$Date\fR == \fI$D\fR \-> name (\fI$pps\fR)
.Sp
Returns a 0x40 Property (filetime) with the creation date of property
storage \fI$pps\fR. See \s-1OLE::\s0Storage::Property for more information.
.Sp
\fINote\fR: As of now, only directory properties have filetime stamps.
.Ip "directory" 4
\f(CW1\fR||\f(CWO\fR == \fI$D\fR \-> directory (\fI$pps\fR, \fI\e%Names\fR [,\fImethod\fR])
.Sp
Read the directory denoted by property handle \fI$pps\fR. Fills the hash array
\fI%Names\fR with the property names as keys and property handles as values.
The property names are Unicode Properties. To use the directory hash easily
you optionally can apply a Property method. You will probably have to use
\fI"string\*(R"\fR or \fI"wstring\*(R"\fR. See \s-1OLE::\s0Storage::Property for more information.
.Sp
\fBNote\fR:
To get the root directory, call directory (0, \fI\e%Names\fR).
.Ip "dirhandles" 4
\fI@pps\fR == \fI$D\fR \-> dirhandles (\fI$pps\fR)
.Sp
Similar to directory (). Returns not the names, but only the property
handles of the directory denoted by property handle \fI$pps\fR.
.Sp
\fBNote\fR:
Normally you will use directory () instead.
To get the root directory, call \fIdirhandles\fR\|(0)
.Ip "Startup" 4
\fI$Startup\fR == \fI$D\fR \-> Startup ([\fI$NewStartup\fR])
.Sp
Gets the current \fI$Startup\fR handler. If an optional argument \fI$NewStartup\fR 
is given, this new handler will be installed and returned.
.Ip "is_directory" 4
\f(CW1\fR||\f(CWO\fR == \fI$D\fR \-> is_directory (\fI$pps\fR)
.Sp
Returns 1 if the property handle \fI$pps\fR is refering to a directory, 
0 otherwise.
.Ip "is_file" 4
\f(CW1\fR||\f(CWO\fR == \fI$D\fR \-> is_file (\fI$pps\fR)
.Sp
Returns 1 if the property handle \fI$pps\fR is refering to a file,
0 otherwise.
.Ip "is_root" 4
\f(CW1\fR||\f(CWO\fR == \fI$D\fR \-> is_root (\fI$pps\fR)
.Sp
Returns 1 if the property handle \fI$pps\fR is refering to the document root, 
0 otherwise.
.Ip "modify" 4
\f(CW1\fR||\f(CWO\fR == \fI$D\fR \-> modify (\fI$pps\fR, \fI\e$buf\fR, \fI$offset\fR, \fI$size\fR)
.Sp
Modifies the contents of the property file \fI$pps\fR. \fI$size\fR bytes of the
file \fI$pps\fR starting at offset \fI$offset\fR will be replaced by \fI$size\fR
bytes of the buf \fI$buf\fR starting at offset 0.
.Sp
\fBNote\fR: This is still very restrictive, e.g. because the size of a file
cannot be changed. Also missing is a possibility to give an offset to \fI$buf\fR.
.Ip "modify_trash" 4
\f(CW1\fR||\f(CWO\fR == \fI$D\fR \-> modify_trash (\fI$type\fR, \fI\e$buf\fR, \fI$offset\fR, \fI$size\fR)
.Sp
Modifies the contents of the trash section \fI$type\fR. \fI$size\fR bytes of the
trash section \fI$type\fR starting at offset \fI$offset\fR will be replaced by
\fI$size\fR bytes of the buf \fI$buf\fR starting at offset 0.
.Ip "name" 4
\fI$Name\fR == \fI$D\fR \-> name (\fI$pps\fR)
.Sp
Returns the name of the property \fI$pps\fR as Unicode Property.
.Ip "NewVar" 4
\fI$Var\fR == \fI$D\fR \-> NewVar ()
.Sp
Creates a new Variable handling object and returns it. (see also: open)
.Ip "open" 4
\fI$Doc\fR||\f(CWO\fR == Storage \-> open (\fI$Startup\fR, \fI$Var\fR, \fI$file\fR [,\fI$mode\fR, \fI\e$buf\fR])
.Sp
Constructor. Open the document with document path \fI$file\fR. \fI$mode\fR can be
read or read/write. If you additionally specify modus buffer, the document 
data will be read from the buffer reference you specify with \fI$buf\fR.
Errors will be reported to Startup object \fI$Startup\fR (if present).
.Sp
Open modes:
.Sp
.Vb 3
\&   Bit  = 0             = 1
\&   0    Read Only       Read and Write
\&   4    File Mode       Buffer Mode
.Ve
.Ip "read" 4
\f(CW1\fR||\f(CWO\fR == \fI$D\fR \-> read (\fI$pps\fR, \fI\e$buf\fR, [\fI$offset\fR, \fI$size\fR])
.Sp
Read the file property \fI$pps\fR into buffer \fI$buf\fR. If there is an optional
\fI$offset\fR and \fI$size\fR, only this part of the file will be read.
.Ip "read_trash" 4
\f(CW1\fR||\f(CWO\fR == \fI$D\fR \-> read_trash (\fI$type\fR, \fI\e$buf\fR [,\fI$offset\fR, \fI$size\fR])
.Sp
Read the trash section \fI$type\fR into buffer \f(CW$buf\fR. If there is an optional
\fI$offset\fR and \fI$size\fR, only this part of the trash section will be read.
Trash types can be 0, 1, 2, 4, 8 or a sum of this, like (1+2+8). 0 
is default and yields (1+2+4+8). You can find an explanation of these 
types in the \fIlclean\fR manpage.
.Sp
Trash types:
.Sp
.Vb 6
\&   #  Type
\&   -------------------
\&   1  Big blocks
\&   2  Small blocks
\&   4  File end space
\&   8  System space
.Ve
.Ip "size" 4
\fI$size\fR||\f(CWundef\fR == \fI$D\fR \-> size (\fI$pps\fR)
.Sp
Returns the size of the file property \fI$pps\fR in terms of bytes.
.Ip "size_trash" 4
\fI$size\fR == \fI$D\fR \-> size_trash (\fI$type\fR)
.Sp
Returns the byte size of the trash section \fI$type\fR.
.Ip "Var" 4
\fI$Var\fR == \fI$D\fR \-> Var ([\fI$NewVar\fR])
.Sp
Gets the current \f(CW$Var\fR handler. If an optional argument \f(CW$NewVar\fR is given,
this new handler will be installed and returned.
.SH "SEE ALSO"
the \fIOLE::Storage::Property\fR manpage, the \fIStartup\fR manpage, the \fIOLE::Storage::Var\fR manpage
.SH "EXAMPLES"
\fIOLE::Storage\fR demonstration programs, as there are:
.Ip "\fBlls\fR" 4
\fILaola ls\fR. Lists document structures.
.Ip "\fBldat\fR" 4
\fILoala Display Authress Title\fR. Displays content of property sets and
shows, how by principle to fool around with Excel documents.
.Ip "\fBlclean\fR" 4
Cleans and saves garbage in Structured Storage documents. Can also store and
retrieve a file at the garbage sections.
.Ip "\fBlhalw\fR" 4
\fIHave a look at Word\fR. Draws the text out of Word 6 and Word 7 documents,
supports a little bit Word 8.
.SH "WWW"
Latest distribution of \fILaola\fR and \fIElser\fR at:
.PP
.Vb 3
\&        http://wwwwbs.cs.tu-berlin.de/~schwartz/pmh
\&or
\&        http://www.cs.tu-berlin.de/~schwartz/pmh
.Ve
.SH "BUGS"
None known. I'm waiting for your hints!
.SH "AUTHOR"
Martin Schwartz <\fIschwartz@cs.tu-berlin.de\fR>. 

.rn }` ''
.IX Title "Storage 3"
.IX Name "OLE::Storage - An Interface to B<Structured Storage> Documents."

.IX Header "NAME"

.IX Header "SYNOPSIS"

.IX Header "DESCRIPTION"

.IX Item "close"

.IX Item "clsid"

.IX Item "color"

.IX Item "date"

.IX Item "directory"

.IX Item "dirhandles"

.IX Item "Startup"

.IX Item "is_directory"

.IX Item "is_file"

.IX Item "is_root"

.IX Item "modify"

.IX Item "modify_trash"

.IX Item "name"

.IX Item "NewVar"

.IX Item "open"

.IX Item "read"

.IX Item "read_trash"

.IX Item "size"

.IX Item "size_trash"

.IX Item "Var"

.IX Header "SEE ALSO"

.IX Header "EXAMPLES"

.IX Item "\fBlls\fR"

.IX Item "\fBldat\fR"

.IX Item "\fBlclean\fR"

.IX Item "\fBlhalw\fR"

.IX Header "WWW"

.IX Header "BUGS"

.IX Header "AUTHOR"

