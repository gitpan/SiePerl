.rn '' }`
''' $RCSfile$$Revision$$Date$
'''
''' $Log$
'''
.de Sh
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp
.if t .sp .5v
.if n .sp
..
.de Ip
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb
.ft CW
.nf
.ne \\$1
..
.de Ve
.ft R

.fi
..
'''
'''
'''     Set up \*(-- to give an unbreakable dash;
'''     string Tr holds user defined translation string.
'''     Bell System Logo is used as a dummy character.
'''
.tr \(*W-|\(bv\*(Tr
.ie n \{\
.ds -- \(*W-
.ds PI pi
.if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\" diablo 12 pitch
.ds L" ""
.ds R" ""
'''   \*(M", \*(S", \*(N" and \*(T" are the equivalent of
'''   \*(L" and \*(R", except that they are used on ".xx" lines,
'''   such as .IP and .SH, which do another additional levels of
'''   double-quote interpretation
.ds M" """
.ds S" """
.ds N" """""
.ds T" """""
.ds L' '
.ds R' '
.ds M' '
.ds S' '
.ds N' '
.ds T' '
'br\}
.el\{\
.ds -- \(em\|
.tr \*(Tr
.ds L" ``
.ds R" ''
.ds M" ``
.ds S" ''
.ds N" ``
.ds T" ''
.ds L' `
.ds R' '
.ds M' `
.ds S' '
.ds N' `
.ds T' '
.ds PI \(*p
'br\}
.\"	If the F register is turned on, we'll generate
.\"	index entries out stderr for the following things:
.\"		TH	Title 
.\"		SH	Header
.\"		Sh	Subsection 
.\"		Ip	Item
.\"		X<>	Xref  (embedded
.\"	Of course, you have to process the output yourself
.\"	in some meaninful fashion.
.if \nF \{
.de IX
.tm Index:\\$1\t\\n%\t"\\$2"
..
.nr % 0
.rr F
.\}
.TH RSS 3 "perl 5.005, patch 03" "27/Dec/1999" "User Contributed Perl Documentation"
.UC
.if n .hy 0
.if n .na
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.de CQ          \" put $1 in typewriter font
.ft CW
'if n "\c
'if t \\&\\$1\c
'if n \\&\\$1\c
'if n \&"
\\&\\$2 \\$3 \\$4 \\$5 \\$6 \\$7
'.ft R
..
.\" @(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2
.	\" AM - accent mark definitions
.bd B 3
.	\" fudge factors for nroff and troff
.if n \{\
.	ds #H 0
.	ds #V .8m
.	ds #F .3m
.	ds #[ \f1
.	ds #] \fP
.\}
.if t \{\
.	ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.	ds #V .6m
.	ds #F 0
.	ds #[ \&
.	ds #] \&
.\}
.	\" simple accents for nroff and troff
.if n \{\
.	ds ' \&
.	ds ` \&
.	ds ^ \&
.	ds , \&
.	ds ~ ~
.	ds ? ?
.	ds ! !
.	ds /
.	ds q
.\}
.if t \{\
.	ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.	ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.	ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.	ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.	ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.	ds ? \s-2c\h'-\w'c'u*7/10'\u\h'\*(#H'\zi\d\s+2\h'\w'c'u*8/10'
.	ds ! \s-2\(or\s+2\h'-\w'\(or'u'\v'-.8m'.\v'.8m'
.	ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.	ds q o\h'-\w'o'u*8/10'\s-4\v'.4m'\z\(*i\v'-.4m'\s+4\h'\w'o'u*8/10'
.\}
.	\" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds v \\k:\h'-(\\n(.wu*9/10-\*(#H)'\v'-\*(#V'\*(#[\s-4v\s0\v'\*(#V'\h'|\\n:u'\*(#]
.ds _ \\k:\h'-(\\n(.wu*9/10-\*(#H+(\*(#F*2/3))'\v'-.4m'\z\(hy\v'.4m'\h'|\\n:u'
.ds . \\k:\h'-(\\n(.wu*8/10)'\v'\*(#V*4/10'\z.\v'-\*(#V*4/10'\h'|\\n:u'
.ds 3 \*(#[\v'.2m'\s-2\&3\s0\v'-.2m'\*(#]
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.ds oe o\h'-(\w'o'u*4/10)'e
.ds Oe O\h'-(\w'O'u*4/10)'E
.	\" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.	\" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.	ds : e
.	ds 8 ss
.	ds v \h'-1'\o'\(aa\(ga'
.	ds _ \h'-1'^
.	ds . \h'-1'.
.	ds 3 3
.	ds o a
.	ds d- d\h'-1'\(ga
.	ds D- D\h'-1'\(hy
.	ds th \o'bp'
.	ds Th \o'LP'
.	ds ae ae
.	ds Ae AE
.	ds oe oe
.	ds Oe OE
.\}
.rm #[ #] #H #V #F C
.SH "NAME"
XML::RSS \- creates and updates RSS files
.SH "SYNOPSIS"
.PP
.Vb 14
\& # create an RSS 0.91 file
\& use XML::RSS;
\& $rss->channel(title          => 'freshmeat.net',
\&               link           => 'http://freshmeat.net',
\&               language       => 'en', 
\&               description    => 'the one-stop-shop for all your Linux software needs',
\&               rating         => '(PICS-1.1 "http://www.classify.org/safesurf/" 1 r (SS~~000 1))',
\&               copyright      => 'Copyright 1999, Freshmeat.net',
\&               pubDate        => 'Thu, 23 Aug 1999 07:00:00 GMT',
\&               lastBuildDate  => 'Thu, 23 Aug 1999 16:20:26 GMT',
\&               docs           => 'http://www.blahblah.org/fm.cdf',
\&               managingEditor => 'scoop@freshmeat.net',
\&               webMaster      => 'scoop@freshmeat.net'
\&               );
.Ve
.Vb 7
\& $rss->image(title       => 'freshmeat.net',
\&             url         => 'http://freshmeat.net/images/fm.mini.jpg',
\&             link        => 'http://freshmeat.net',
\&             width       => 88,
\&             height      => 31,
\&             description => 'This is the Freshmeat image stupid'
\&             );
.Ve
.Vb 4
\& $rss->add_item(title => "GTKeyboard 0.85",
\&                link  => "http://freshmeat.net/news/1999/06/21/930003829.html",
\&                description => 'blah blah'
\&                );
.Ve
.Vb 2
\& $rss->skipHours(hour => 2);
\& $rss->skipDays(day => 1);
.Ve
.Vb 5
\& $rss->textinput(title => "quick finder",
\&                 description => "Use the text input below to search freshmeat",
\&                 name  => "query",
\&                 link  => "http://core.freshmeat.net/search.php3"
\&                 );
.Ve
.Vb 6
\& # create an RSS 0.9 file
\& use XML::RSS;
\& $rss->channel(title => "freshmeat.net",
\&               link  => "http://freshmeat.net",
\&               description => "the one-stop-shop for all your Linux software needs",
\&               );
.Ve
.Vb 4
\& $rss->image(title => "freshmeat.net",
\&             url   => "http://freshmeat.net/images/fm.mini.jpg",
\&             link  => "http://freshmeat.net"
\&             );
.Ve
.Vb 3
\& $rss->add_item(title => "GTKeyboard 0.85",
\&                link  => "http://freshmeat.net/news/1999/06/21/930003829.html"
\&                );
.Ve
.Vb 5
\& $rss->textinput(title => "quick finder",
\&                 description => "Use the text input below to search freshmeat",
\&                 name  => "query",
\&                 link  => "http://core.freshmeat.net/search.php3"
\&                 );
.Ve
.Vb 2
\& # print the RSS as a string
\& print $rss->as_string;
.Ve
.Vb 2
\& # or save it to a file
\& $rss->save("fm.rdf");
.Ve
.Vb 9
\& # insert an item into an RSS file and removes the oldest item if
\& # there are already 15 items
\& my $rss = new XML::RSS;
\& $rss->parsefile("fm.rdf");
\& pop(@{$rss->{'items'}}) if (@{$rss->{'items'}} == 15);
\& $rss->add_item(title => "MpegTV Player (mtv) 1.0.9.7",
\&                link  => "http://freshmeat.net/news/1999/06/21/930003958.html",
\&                mode  => 'insert'
\&                );
.Ve
.Vb 2
\& # parse a string instead of a file
\& $rss->parse($string);
.Ve
.Vb 5
\& # print the title and link of each RSS item
\& foreach my $item (@{$rss->{'items'}}) {
\&     print "title: $item->{'title'}\en";
\&     print "link: $item->{'link'}\en\en";
\& }
.Ve
.SH "DESCRIPTION"
This module provides a basic framework for creating and maintaining 
RDF Site Summary (RSS) files. This distribution also contains several 
examples that allow you to generate HTML from an RSS file. 
This might be helpful if you want to include news feeds on your Web 
site from sources like Slashot and Freshmeat.
.PP
XML::RSS currently supports both version 0.9 and 0.91 of RSS.
See http://my.netscape.com/publish/help/mnn20/quickstart.html
for information on RSS 0.91. See http://my.netscape.com/publish/help/
for RSS 0.9.
.PP
RSS is primarily used by content authors who want to create a 
Netscape Netcenter channel, however, that doesn't exclude us from using it
in other applications.
For example, you may want to distribute daily news headlines to partners and 
customers who convert it to some other format, like HTML.
.SH "METHODS"
.Ip "new \s-1XML::RSS\s0 (version=>$version, encoding=>$encoding)" 4
Constructor for \s-1XML::RSS\s0. It returns a reference to an \s-1XML::RSS\s0 object.
You may also pass the \s-1RSS\s0 version and the \s-1XML\s0 encoding to use. The default
\fBversion\fR is 0.91. The default \fBencoding\fR is \s-1UTF\s0\-8.
.Ip "add_item (title=>$title, link=>$link, description=>$desc, mode=>$mode)" 4
Adds an item to the \s-1XML::RSS\s0 object. \fBmode\fR and \fBdescription\fR are optional. 
The default \fBmode\fR 
is append, which adds the item to the end of the list. To insert an item, set the mode
to \fBinsert\fR. 
.Sp
The items are stored in the array @{$obj->{'items'}} where
\fB$obj\fR is a reference to an \s-1XML::RSS\s0 object.
.Ip "as_string;" 4
Returns a string containing the \s-1RSS\s0 for the \s-1XML::RSS\s0 object. 
.Ip "channel (title=>$title, link=>$link, description=>$desc, language=>$language, rating=>$rating, copyright=>$copyright, pubDate=>$pubDate, lastBuildDate=>$lastBuild, docs=>$docs, managingEditor=>$editor, webMaster=>$webMaster)" 4
Channel information is required in \s-1RSS\s0. The \fBtitle\fR cannot
be more the 40 characters, the \fBlink\fR 500, and the \fBdescription\fR
500. \fBtitle\fR, \fBlink\fR, \fBdescription\fR, and \fBlanguage\fR are required.
The other parameters are optional.
.Sp
To retreive the values of the channel, pass the name of the value
(title, link, or description) as the first and only argument
like so:
.Sp
$title = \fIchannel\fR\|('title');
.Ip "image (title=>$title, url=>$url, link=>$link, width=>$width, height=>$height, description=>$desc)" 4
Adding an image is not required. \fBurl\fR is the \s-1URL\s0 of the
image, \fBlink\fR is the \s-1URL\s0 the image is linked to. \fBtitle\fR, \fBurl\fR,
and \fBlink\fR parameters are required if you are going to
use an image in your \s-1RSS\s0 file.
.Sp
The method for retrieving the values for the image is the same as it
is for \fBchannel()\fR.
.Ip "parse ($string)" 4
Parses an \s-1RDF\s0 Site Summary which is passed into \fBparse()\fR as the first parameter.
.Ip "parsefile ($file)" 4
Same as \fBparse()\fR except it parses a file rather than a string.
.Ip "save ($file)" 4
Saves the \s-1RSS\s0 to a specified file.
.Ip "skipHours (hour=>$hour)" 4
Specifies the number of hours that a server should wait before retrieving
the \s-1RSS\s0 file. The \fBhour\fR parameter is required if the skipHours method
is used.
.Ip "skipDays (day=>$day)" 4
Specified the number of days that a server should wait before retrieving
the \s-1RSS\s0 file. The \fBday\fR parameter is required if the skipDays method
is used.
.Ip "strict ($boolean)" 4
If it's set to 1, it will adhere to the lengths as specified
by Netscape Netcenter requirements. It's set to 0 by default.
Use it if the \s-1RSS\s0 file you're generating is for Netcenter.
.Ip "textinput (title=>$title, description=>$desc, name=>$name, link=>$link);" 4
This \s-1RSS\s0 element is also optional. Using it allows users to submit a Query
to a program on a Web server via an \s-1HTML\s0 form. \fBname\fR is the \s-1HTML\s0 form name
and \fBlink\fR is the \s-1URL\s0 to the program. Content is submitted using the \s-1GET\s0
method.
.Sp
Access to the \fBtextinput\fR values is the the same as \fBchannel()\fR and 
\fBimage()\fR.
.SH "AUTHOR"
Jonathan Eisenzopf <eisen@pobox.com>
.SH "CREDITS"
.Sp
.Vb 5
\& Wojciech Zwiefka <wojtekz@cnt.pl>
\& Chris Nandor <pudge@pobox.com>
\& Jim Hebert <jim@cosource.com>
\& Randal Schwartz <merlyn@stonehenge.com>
\& rjp@browser.org
.Ve
.SH "SEE ALSO"
\fIperl\fR\|(1), \fIXML::Parser\fR\|(3).

.rn }` ''
.IX Title "RSS 3"
.IX Name "XML::RSS - creates and updates RSS files"

.IX Header "NAME"

.IX Header "SYNOPSIS"

.IX Header "DESCRIPTION"

.IX Header "METHODS"

.IX Item "new \s-1XML::RSS\s0 (version=>$version, encoding=>$encoding)"

.IX Item "add_item (title=>$title, link=>$link, description=>$desc, mode=>$mode)"

.IX Item "as_string;"

.IX Item "channel (title=>$title, link=>$link, description=>$desc, language=>$language, rating=>$rating, copyright=>$copyright, pubDate=>$pubDate, lastBuildDate=>$lastBuild, docs=>$docs, managingEditor=>$editor, webMaster=>$webMaster)"

.IX Item "image (title=>$title, url=>$url, link=>$link, width=>$width, height=>$height, description=>$desc)"

.IX Item "parse ($string)"

.IX Item "parsefile ($file)"

.IX Item "save ($file)"

.IX Item "skipHours (hour=>$hour)"

.IX Item "skipDays (day=>$day)"

.IX Item "strict ($boolean)"

.IX Item "textinput (title=>$title, description=>$desc, name=>$name, link=>$link);"

.IX Header "AUTHOR"

.IX Header "CREDITS"

.IX Header "SEE ALSO"

