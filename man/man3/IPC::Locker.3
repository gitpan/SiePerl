.\" Automatically generated by Pod::Man version 1.15
.\" Mon Apr 23 12:04:28 2001
.\"
.\" Standard preamble:
.\" ======================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R

.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used
.\" to do unbreakable dashes and therefore won't be available.  \*(C` and
.\" \*(C' expand to `' in nroff, nothing in troff, for use with C<>
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr
.\" for titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and
.\" index entries marked with X<> in POD.  Of course, you'll have to process
.\" the output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it
.\" makes way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.bd B 3
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ======================================================================
.\"
.IX Title "Locker 3"
.TH Locker 3 "perl v5.6.1" "2001-02-13" "User Contributed Perl Documentation"
.UC
.SH "NAME"
\&\s-1IPC:\s0:Locker \- Distributed lock handler
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use IPC::Locker;
.Ve
.Vb 3
\&  my $lock = IPC::Locker->lock(lock=>'one_per_machine',
\&                                  host=>'example.std.com',
\&                                  port=>223);
.Ve
.Vb 2
\&  if ($lock->lock()) { something; }
\&  if ($lock->locked()) { something; }
.Ve
.Vb 1
\&  $lock->unlock();
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\f(CW\*(C`IPC::Locker\*(C'\fR will query a remote server to obtain a lock.  This is
useful for distributed utilities which run on many machines, and cannot use
file locks or other such mechanisms due to \s-1NFS\s0 or lack of common file
systems.
.Ip "new ([parameter=>value ...]);" 4
.IX Item "new ([parameter=>value ...]);"
Create a lock structure.
.Ip "lock ([parameter=>value ...]);" 4
.IX Item "lock ([parameter=>value ...]);"
Try to obtain the lock, return the lock object if successful, else undef.
.Ip "locked ()" 4
.IX Item "locked ()"
Return true if the lock has been obtained.
.Ip "unlock ()" 4
.IX Item "unlock ()"
Remove the given lock.  This will be called automatically when the object
is destroyed.
.Ip "break_lock ()" 4
.IX Item "break_lock ()"
Remove current locker for the given lock.
.Ip "owner ([parameter=>value ...]);" 4
.IX Item "owner ([parameter=>value ...]);"
Returns a string of who has the lock or undef if not currently .  Note that
this information is not atomic, and may change asyncronously; do not use
this to tell if the lock will be available, to do that, try to obtain the
lock and then release it if you got it.
.SH "PARAMETERS"
.IX Header "PARAMETERS"
.Ip "block" 4
.IX Item "block"
Boolean flag, true indicates wait for the lock when calling \fIlock()\fR and die
if a error occurs.  False indicates to just return false.  Defaults to
true.
.Ip "family" 4
.IX Item "family"
The family of transport to use, either \s-1INET\s0 or \s-1UNIX\s0.  Defaults to \s-1INET\s0.
.Ip "host" 4
.IX Item "host"
The name of the host containing the lock server.  It may also be a array
of hostnames, where if the first one is down, subsequent ones will be tried.
.Ip "port" 4
.IX Item "port"
The port number (\s-1INET\s0) or name (\s-1UNIX\s0) of the lock server.  Defaults to
\&'lockerd' looked up via /etc/services, else 1751.
.Ip "lock" 4
.IX Item "lock"
The name of the lock.
.Ip "print_broke" 4
.IX Item "print_broke"
A function to print a message when the lock is broken.  The only argument
is self.  Defaults to print a message if verbose is set.
.Ip "print_obtained" 4
.IX Item "print_obtained"
A function to print a message when the lock is obtained after a delay.  The
only argument is self.  Defaults to print a message if verbose is set.
.Ip "print_waiting" 4
.IX Item "print_waiting"
A function to print a message when the lock is busy and needs to be waited
for.  The first argument is self, second the name of the lock.  Defaults to
print a message if verbose is set.
.Ip "print_down" 4
.IX Item "print_down"
A function to print a message when the lock server is unavailable.  The
first argument is self.  Defaults to a croak message.
.Ip "timeout" 4
.IX Item "timeout"
The maximum time in seconds that the lock may be held before being forced
open, passed to the server when the lock is created.  Thus if the requestor
dies, the lock will be released after that amount of time.  Defaults to 10
minutes.
.Ip "user" 4
.IX Item "user"
Name to request the lock under, defaults to host_pid_user
.Ip "verbose" 4
.IX Item "verbose"
True to print messages when waiting for locks.  Defaults false.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\f(CW\*(C`lockerd\*(C'\fR, 
.SH "DISTRIBUTION"
.IX Header "DISTRIBUTION"
This package is distributed via \s-1CPAN\s0.
.SH "AUTHORS"
.IX Header "AUTHORS"
Wilson Snyder <wsnyder@wsnyder.org>
