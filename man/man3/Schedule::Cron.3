.\" Automatically generated by Pod::Man version 1.15
.\" Mon Apr 23 13:16:05 2001
.\"
.\" Standard preamble:
.\" ======================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R

.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used
.\" to do unbreakable dashes and therefore won't be available.  \*(C` and
.\" \*(C' expand to `' in nroff, nothing in troff, for use with C<>
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr
.\" for titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and
.\" index entries marked with X<> in POD.  Of course, you'll have to process
.\" the output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it
.\" makes way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.bd B 3
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ======================================================================
.\"
.IX Title "Cron 3"
.TH Cron 3 "perl v5.6.1" "2000-06-12" "User Contributed Perl Documentation"
.UC
.SH "NAME"
Cron \- cron-like scheduler for Perl subroutines
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Schedule::Cron;
.Ve
.Vb 5
\&  # Subroutines to be called
\&  sub dispatcher { 
\&    print "ID:   ",shift,"\en"; 
\&    print "Args: ","@_","\en";
\&  }
.Ve
.Vb 3
\&  sub check_links { 
\&    # do something... 
\&  }
.Ve
.Vb 2
\&  # Create new object with default dispatcher
\&  my $cron = new Schedule::Cron(\e&dispatcher);
.Ve
.Vb 2
\&  # Load a crontab file
\&  $cron->load_crontab("/var/spool/cron/perl");
.Ve
.Vb 3
\&  # Add dynamically  crontab entries
\&  $cron->add_entry("3 4  * * *",ROTATE => "apache","sendmail");
\&  $cron->add_entry("0 11 * * Mon-Fri",\e&check_links);
.Ve
.Vb 2
\&  # Run scheduler 
\&  $cron->run(detach=>1);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This  module provides  a simple  but complete  cron like
scheduler.    I.e   this  modules   can   be  used   for
periodically executing Perl  subroutines.  The dates and
parameters  for   the  subroutines  to   be  called  are
specified   with  a  format   known  as   crontab  entry
(the section on "METHODS", \f(CW\*(C`add_entry()\*(C'\fR and \fIcrontab\fR\|(5))
.PP
The  philosophy  behind  \f(CW\*(C`Schedule::Cron\*(C'\fR  is  to  call
subroutines  periodically from  within  one single  Perl
program  instead  of  letting  \f(CW\*(C`cron\*(C'\fR  trigger  several
(possibly different) perl  scripts. Everything under one
roof.  Furthermore  \f(CW\*(C`Schedule::Cron\*(C'\fR provides mechanism
to create crontab  entries dynamically, which isn't that
easy with \f(CW\*(C`cron\*(C'\fR.
.PP
\&\f(CW\*(C`Schedule::Cron\*(C'\fR knows  about all extensions  (well, at
least all extensions  I'm aware of, i.e those  of the so
called  \*(L"Vixie\*(R" cron)  for crontab  entries  like ranges
including  'steps', specification of  month and  days of
the week by  name or coexistence of lists  and ranges in
the same  field.  And  even a bit  more (like  lists and
ranges with symbolic names).
.SH "METHODS"
.IX Header "METHODS"
.Ip "$cron = new Schedule::Cron($dispatcher,[extra args])" 4
.IX Item "$cron = new Schedule::Cron($dispatcher,[extra args])"
Creates  a new  \f(CW\*(C`Cron\*(C'\fR object.   \f(CW\*(C`$dispatcher\*(C'\fR is  a reference  to a
subroutine, which  will be called by default.   \f(CW\*(C`$dispatcher\*(C'\fR will be
invoked with the arguments parameter  provided in the crontab entry if
no other subroutine is specified. This can be either a single argument
containing  the  argument  parameter  literally  has  string  (default
behavior)  or a  list  of  arguments when  using  the \f(CW\*(C`eval\*(C'\fR  option
described below.
.Sp
The date  specifications must  be either provided  via a  crontab like
file or added explicitly with \f(CW\*(C`add_entry()\*(C'\fR (the section on "add_entry").
.Sp
\&\fIextra_args\fR  can  be  a   hash  or  hash  reference  for  additional
arguments.  The following parameters are recognized:
.Sp
.Vb 1
\& file => <crontab>  Load the crontab entries from <crontab>
.Ve
.Vb 5
\& eval =>  1         Eval  the argument  parameter in  a crontab
\&                    entry   before   calling   the   subroutine
\&                    (instead    of   literally    calling   the
\&                    dispatcher  with the argument  parameter as
\&                    string
.Ve
.Ip "$cron->load_crontab($file)" 4
.IX Item "$cron->load_crontab($file)"
.PD 0
.Ip "$cron->load_crontab(file=>$file,[eval=>1])" 4
.IX Item "$cron->load_crontab(file=>$file,[eval=>1])"
.PD
Loads and parses the crontab  file \f(CW\*(C`$file\*(C'\fR. The entries found in this
file   will   be   \fBadded\fR   to   the   current   time   table   with
\&\f(CW\*(C`$cron\->add_entry\*(C'\fR.
.Sp
The format of  the file consists of cron  commands containing of lines
with at least 5 columns, whereas the first 5 columns specify the date.
The rest of the line (i.e columns 6 and greater) contains the argument
with which the dispatcher subroutine  will be called.  By default, the
dispatcher will  be called with one single  string argument containing
the  rest of  the line  literally.   Alternatively, if  you call  this
method with  the optional argument  \f(CW\*(C`eval=>1\*(C'\fR (you must  then use
the second  format shown above), the  rest of the line  will be evaled
before used as argument for the dispatcher.
.Sp
For the format of the first 5 columns, please see the section on "add_entry".
.Sp
Blank lines and lines starting with a \f(CW\*(C`#\*(C'\fR will be ignored. 
.Sp
There's  no  way to  specify  another  subroutine  within the  crontab
file.  All  calls   will  be  made  to  the   dispatcher  provided  at
construction time.
.Sp
If    you   want    to    start   up    fresh,    you   should    call
\&\f(CW\*(C`$cron\->clean_timetable()\*(C'\fR before.
.Sp
Example of a crontab fiqw(le:)
.Sp
.Vb 4
\&   # The following line runs on every Monday at 2:34 am
\&   34 2 * * Mon  "make_stats"
\&   # The next line should be best read in with an eval=>1 argument
\&   *  * 1 1 *    { NEW_YEAR => '1',HEADACHE => 'on' }
.Ve
.Ip "$cron->add_entry($timespec,[arguments])" 4
.IX Item "$cron->add_entry($timespec,[arguments])"
Adds a new entry to the list of scheduled cron jobs.
.Sp
\&\fBTime and Date specification\fR
.Sp
\&\f(CW\*(C`$timespec\*(C'\fR is the  specification of the scheduled time
in  crontab format  (\fIcrontab\fR\|(5)) which  contains five
time and date fields. \f(CW\*(C`$timespec\*(C'\fR can be either a plain
string, which  contains a whitespace  separated time and
date specification.   Alternatively, \f(CW\*(C`$timespec\*(C'\fR can be
a reference to an array containing the five elements for
the date fields.
.Sp
The time and date  fields are (cited from \fIcrontab\fR\|(5),
\&\*(L"Vixie\*(R" cron):
.Sp
.Vb 7
\&   field          values
\&   =====          ======
\&   minute         0-59
\&   hour           0-23
\&   day of month   1-31 
\&   month          1-12 (or as names)
\&   day of week    0-7 (0 or 7 is Sunday, or as names )
.Ve
.Vb 2
\& A field may be an asterisk (*), which always stands for
\& ``first-last''.
.Ve
.Vb 4
\& Ranges of numbers are  allowed.  Ranges are two numbers
\& separated  with  a  hyphen.   The  specified  range  is
\& inclusive.   For example, 8-11  for an  ``hours'' entry
\& specifies execution at hours 8, 9, 10 and 11.
.Ve
.Vb 3
\& Lists  are allowed.   A list  is a  set of  numbers (or
\& ranges)  separated by  commas.   Examples: ``1,2,5,9'',
\& ``0-4,8-12''.
.Ve
.Vb 8
\& Step  values can  be used  in conjunction  with ranges.
\& Following a range with ``/<number>'' specifies skips of
\& the  numbers value  through the  range.   For example,
\& ``0-23/2'' can  be used in  the hours field  to specify
\& command execution every  other hour (the alternative in
\& the V7 standard is ``0,2,4,6,8,10,12,14,16,18,20,22'').
\& Steps are  also permitted after an asterisk,  so if you
\& want to say ``every two hours'', just use ``*/2''.
.Ve
.Vb 3
\& Names can also  be used for the ``month''  and ``day of
\& week''  fields.  Use  the  first three  letters of  the
\& particular day or month (case doesn't matter).
.Ve
.Vb 7
\& Note: The day of a command's execution can be specified
\&       by two fields  -- day of month, and  day of week.
\&       If both fields are restricted (ie, aren't *), the
\&       command will be run when either field matches the
\&       current  time.  For  example, ``30  4 1,15  * 5''
\&       would cause a command to be run at 4:30 am on the
\&       1st and 15th of each month, plus every Friday
.Ve
In addition, ranges or lists of names are allowed.
.Sp
Examples:
.Sp
.Vb 5
\& "8  0 * * *"       ==> 8 minutes after midnight, every day
\& "5 11 * * Sat,Sun" ==> at 11:05 on each Saturday and Sunday
\& "0-59/5 * * * *"   ==> every five minutes
\& "42 12 3 Feb Sat"  ==> at 12:42 on 3rd of February and on 
\&                        each Saturday in February
.Ve
\&\fBCommand specification\fR
.Sp
The subroutine to be  executed when the the \f(CW\*(C`$timespec\*(C'\fR
matches can be specified in several ways.
.Sp
First,  if the  optional \f(CW\*(C`arguments\*(C'\fR  are  lacking, the
default dispatching  subroutine provided at construction
time will be called without arguments.
.Sp
If the second parameter to this method is a reference to
a subroutine,  this subroutine  will be used  instead of
the dispatcher.
.Sp
Any additional parameters will  be given as arguments to
the subroutine  to be executed.  You can also  specify a
reference to an array instead of a list of parameters.
.Sp
You can also  use a named parameter list  provided as an
hashref.  The named parameters recognized are:
.Sp
.Vb 2
\&   subroutine      reference to subroutine to be executed
\&   sub
.Ve
.Vb 2
\&   arguments       reference to array containing arguments
\&   args            to be use when calling the subroutine
.Ve
.Vb 6
\&   eval            if  set, provide the  subroutine with
\&                   the  evaled string provided  with the
\&                   'arguments'      parameter.       The
\&                   evaluation     will     take    place
\&                   immediately (not  when the subroutine
\&                   is to be called)
.Ve
Examples:
.Sp
.Vb 8
\&   $cron->add_entry("* * * * *");
\&   $cron->add_entry("* * * * *","doit");
\&   $cron->add_entry("* * * * *",\e&dispatch,"first",2,"third");
\&   $cron->add_entry("* * * * *",{'subroutine' => \e&dispatch,
\&                                 'arguments'  => [ "first",2,"third" ]});
\&   $cron->add_entry("* * * * *",{'subroutine' => \e&dispatch,
\&                                 'arguments'  => '[ "first",2,"third" ]',
\&                                 'eval'       => 1});
.Ve
.Ip "$cron->run([options])" 4
.IX Item "$cron->run([options])"
This method starts the scheduler.
.Sp
When  called  without options,  this  method will  never
return  and executes the  scheduled subroutine  calls as
needed.
.Sp
Alternatively,  you can detach  the main  scheduler loop
from the  current process  (daemon mode). In  this case,
the  pid  of  the   forked  scheduler  process  will  be
returned.
.Sp
The \f(CW\*(C`options\*(C'\fR  parameter specifies the  running mode of
\&\f(CW\*(C`Schedule::Cron\*(C'\fR.  It can be  either a plain list which
will be interpreted  as a hash or it  can be a reference
to  hash. The  following named  parameters (keys  of the
provided hash) are recognized:
.Sp
.Vb 2
\&   detach    if set to one, detach the scheduler process
\&             from the current process
.Ve
.Vb 4
\&   pid_file  if  running   in  daemon  mode,   name  the
\&             optional file,  in which the  process id of
\&             the scheduler process should be written. By
\&             default, no PID File will be created.
.Ve
Examples:
.Sp
.Vb 4
\&   # Start  scheduler, detach  from current  process and
\&   # write  the  PID  of  the forked  scheduler  to  the
\&   # specified file
\&   $cron->run(detach=>1,pid_file=>"/var/run/scheduler.pid");
.Ve
.Vb 2
\&   # Start scheduler and wait forever.
\&   $cron->run();
.Ve
.Ip "$cron->\fIclean_timetable()\fR" 4
.IX Item "$cron->clean_timetable()"
Remove all scheduled entries
.Ip "$cron->check_entry($id)" 4
.IX Item "$cron->check_entry($id)"
Check, whether the given \s-1ID\s0 is already registered in the timetable. 
A \s-1ID\s0 is the first argument in the argument parameter of the 
a crontab entry.
.Sp
Returns (one of) the index in the  timetable (can be 0, too) if the \s-1ID\s0
could be found or \f(CW\*(C`undef\*(C'\fR otherwise.
.Sp
Example:
.Sp
.Vb 4
\&   $cron->add_entry("* * * * *","ROTATE");
\&   .
\&   .
\&   defined($cron->check_entry("ROTATE")) || die "No ROTATE entry !"
.Ve
.Ip "$cron->get_next_execution_time($cron_entry,[$ref_time])" 4
.IX Item "$cron->get_next_execution_time($cron_entry,[$ref_time])"
Well, this is mostly an internal method, but it might be useful on 
its own. 
.Sp
The purpose of this method is to calculate the next execution time
from a specified crontab entry
.Sp
Parameters:
.Sp
.Vb 4
\&  $cron_entry  The crontab entry as specified in L<"add_entry">
\&  $ref_time    the reference time for which the next time should be
\&               searched which matches $cron_entry. By default, take
\&               the current time
.Ve
This method returns the number of epoch-seconds of the next matched 
date for \f(CW\*(C`$cron_entry\*(C'\fR.
.Sp
Since I suspect, that this calculation of the next execution time might
fail in some circumstances (bugs are lurking everywhere ;\-) an
additional interactive method \f(CW\*(C`bug()\*(C'\fR is provided for checking
crontab entries against your expected output. Refer to the
top-level \s-1README\s0 for additional usage information for this method.
.SH "TODO"
.IX Header "TODO"
.RS 4
.Ip "\(bu" 4
Provide a \f(CW\*(C`reload()\*(C'\fR method for reexaming the crontab file 
.Ip "\(bu" 4
Clean up \f(CW\*(C`get_next_execution_time()\*(C'\fR and give it at least some 
rational grounding ;\-)
.Ip "\(bu" 4
Provide support for systems without \f(CW\*(C`fork()\*(C'\fR via \f(CW\*(C`OS::Process\*(C'\fR
.Ip "\(bu" 4
Add logging
.RE
.RS 4
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright 1999,2000 Roland Huss.
.Sp
This library is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
.SH "AUTHOR"
.IX Header "AUTHOR"
.Vb 1
\&                                                    ...roland
.Ve
