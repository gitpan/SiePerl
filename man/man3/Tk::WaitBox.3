.\" Automatically generated by Pod::Man version 1.15
.\" Mon Apr 23 08:10:03 2001
.\"
.\" Standard preamble:
.\" ======================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R

.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used
.\" to do unbreakable dashes and therefore won't be available.  \*(C` and
.\" \*(C' expand to `' in nroff, nothing in troff, for use with C<>
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr
.\" for titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and
.\" index entries marked with X<> in POD.  Of course, you'll have to process
.\" the output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it
.\" makes way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.bd B 3
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ======================================================================
.\"
.IX Title "WaitBox 3"
.TH WaitBox 3 "perl v5.6.1" "2000-07-27" "User Contributed Perl Documentation"
.UC
.SH "NAME"
Tk::WaitBox \- An Object Oriented Wait Dialog for Perl/Tk, of the Please Wait variety.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
A WaitBox consists of a number of subwidgets:
.Ip "" 4
.Sh "bitmap"
.IX Subsection "bitmap"
A bitmap (configurable via the \fI\-bitmap\fR command, the default is an hourglass) on the left side of the WaitBox
.Sh "label"
.IX Subsection "label"
A label (configurable via the \fI\-txt1\fR command), with text in the upper portion of the right hand frame
.Sh "secondary label"
.IX Subsection "secondary label"
Another label (configurable via the \fI\-txt2\fR command, the default is 'Please Wait'), with text in the lower portion of the right hand frame
.Sh "userframe"
.IX Subsection "userframe"
A frame displayed, if required, between the label and the secondary label.  For details, see the example code and the Advertised Widget section
.Sh "cancel button"
.IX Subsection "cancel button"
If a cancelroutine (configured via the \fI\-cancelroutine\fR command) is defined, a frame will be packed below the labels and bitmap, with a single button.  The text of the button will be 'Cancel' (configurable via the \fI\-canceltext\fR command), and the button will call the supplied subroutine when pressed.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Ip "Usage Description" 4
.IX Item "Usage Description"
.PD 0
.Ip "" 4
.PD
.Sh "Basic Usage"
.IX Subsection "Basic Usage"
To use, create your WaitDialog objects during initialization, or at least before a Show.  When you wish to display the WaitDialog object, invoke the 'Show' method on the WaitDialog object; when you wish to cease displaying the WaitDialog object, invoke the 'unShow' method on the object.
.Sh "Configuration"
.IX Subsection "Configuration"
Configuration may be done at creation or via the configure method.  
.Sh "Example Code"
.IX Subsection "Example Code"
.Ip "#!/usr/local/bin/perl \-w" 4
.IX Item "#!/usr/local/bin/perl -w"
.Vb 2
\&    ## Dependent on Graham Barr's Tk::ProgressBar
\&    use strict;
.Ve
.Vb 3
\&    use Tk;
\&    use Tk::WaitBox;
\&    use Tk::ProgressBar;
.Ve
.Vb 4
\&    my($root) = MainWindow->new;
\&    $root->withdraw;
\&    my($utxt) = "Initializing...";
\&    my($percent);
.Ve
.Vb 12
\&    my($wd);
\&    $wd = $root->WaitBox(
\&                         -bitmap =>'questhead', # Default would be 'hourglass'
\&                         -txt2 => 'tick-tick-tick', #default would be 'Please Wait'
\&                         -title => 'Takes forever to get service around here',
\&                         -cancelroutine => sub {
\&                             print "\enI'm canceling....\en";
\&                             $wd->unShow;
\&                             $utxt = undef;
\&                         });
\&    $wd->configure(-txt1 => "Hurry up and Wait, my Drill Sergeant told me");
\&    $wd->configure(-foreground => 'blue',-background => 'white');
.Ve
.Vb 4
\&    ### Do something quite boring with the user frame
\&    my($u) = $wd->{SubWidget}{uframe};
\&    $u->pack(-expand => 1, -fill => 'both');
\&    $u->Label(-textvariable => \e$utxt)->pack(-expand => 1, -fill => 'both');
.Ve
.Vb 11
\&    ## It would definitely be better to do this with a canvas... this is dumb
\&    my($bar) = $u->ProgressBar(
\&                               -variable => \e$percent,
\&                               -blocks => 0,
\&                               -width => 20,
\&                               -colors => [  0 => 'green',
\&                                             30 => 'yellow',
\&                                             50 => 'orange',
\&                                             80 => 'red'],
\&                              )
\&            ->pack(-expand =>1, -fill =>'both');
.Ve
.Vb 1
\&    $wd->configure(-canceltext => 'Halt, Cease, Desist'); # default is 'Cancel'
.Ve
.Vb 1
\&    $wd->Show;
.Ve
.Vb 7
\&    my($diff) = 240;
\&    for (1..$diff) {
\&        $percent = int($_/$diff*100);
\&        $utxt = sprintf("%5.2f%% Complete",$percent);
\&        $bar->update;
\&        last if !defined($utxt);
\&    }
.Ve
.Vb 2
\&    sleep(2);
\&    $wd->unShow;
.Ve
.SH "Advertised Subwidgets"
.IX Header "Advertised Subwidgets"
.Ip "uframe" 4
.IX Item "uframe"
uframe is a frame created between the two messages.  It may be used for anything the user has in mind... including exciting cycle wasting displays of sand dropping through an hour glass, Zippy riding either a Gnu or a bronc, et cetera.
.Sp
Assuming that the WaitBox is referenced by \f(CW$w\fR, the uframe may be addressed as \f(CW$w\fR->subwidget{uframe}.  Having gotten the address, you can do anything (I think) you would like with it
.SH "Miscellaneous Methods"
.IX Header "Miscellaneous Methods"
.Ip "\-takefocus" 4
.IX Item "-takefocus"
Specifying \-takeFocus = 0 will prevent the WaitBox widget from taking focus. Default is to take focus and do an application grab. I'm not sure why, but someone told me it was necessary.
.SH "Author"
.IX Header "Author"
\&\fBBrent B. Powers, (B2Pi)\fR Powers@B2Pi.com
.PP
\&\fICopyright\fR\|(c) 1996\-2000 Brent B. Powers. All rights reserved.
This program is free software, you may redistribute it and/or modify
it under the same terms as Perl itself.
