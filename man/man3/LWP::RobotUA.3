.\" Automatically generated by Pod::Man version 1.15
.\" Mon Apr 23 13:02:21 2001
.\"
.\" Standard preamble:
.\" ======================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R

.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used
.\" to do unbreakable dashes and therefore won't be available.  \*(C` and
.\" \*(C' expand to `' in nroff, nothing in troff, for use with C<>
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr
.\" for titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and
.\" index entries marked with X<> in POD.  Of course, you'll have to process
.\" the output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it
.\" makes way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.bd B 3
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ======================================================================
.\"
.IX Title "LWP::RobotUA 3"
.TH LWP::RobotUA 3 "libwww-perl-5.51" "2000-04-09" "User Contributed Perl Documentation"
.UC
.SH "NAME"
\&\s-1LWP:\s0:RobotUA \- A class for Web Robots
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 6
\&  require LWP::RobotUA;
\&  $ua = new LWP::RobotUA 'my-robot/0.1', 'me@foo.com';
\&  $ua->delay(10);  # be very nice, go slowly
\&  ...
\&  # just use it just like a normal LWP::UserAgent
\&  $res = $ua->request($req);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This class implements a user agent that is suitable for robot
applications.  Robots should be nice to the servers they visit.  They
should consult the \fI/robots.txt\fR file to ensure that they are welcomed
and they should not make requests too frequently.
.PP
But, before you consider writing a robot take a look at
<\s-1URL\s0:http://info.webcrawler.com/mak/projects/robots/robots.html>.
.PP
When you use a \fI\s-1LWP:\s0:RobotUA\fR as your user agent, then you do not
really have to think about these things yourself.  Just send requests
as you do when you are using a normal \fI\s-1LWP:\s0:UserAgent\fR and this
special agent will make sure you are nice.
.SH "METHODS"
.IX Header "METHODS"
The \s-1LWP:\s0:RobotUA is a sub-class of \s-1LWP:\s0:UserAgent and implements the
same methods. In addition the following methods are provided:
.Ip "$ua = \s-1LWP:\s0:RobotUA->new($agent_name, \f(CW$from\fR, [$rules])" 4
.IX Item "$ua = LWP::RobotUA->new($agent_name, $from, [$rules])"
Your robot's name and the mail address of the human responsible for
the robot (i.e. you) are required by the constructor.
.Sp
Optionally it allows you to specify the \fI\s-1WWW:\s0:RobotRules\fR object to
use.
.Ip "$ua->delay([$minutes])" 4
.IX Item "$ua->delay([$minutes])"
Set the minimum delay between requests to the same server.  The
default is 1 minute.
.Ip "$ua->use_sleep([$boolean])" 4
.IX Item "$ua->use_sleep([$boolean])"
Get/set a value indicating whether the \s-1UA\s0 should \fIsleep()\fR if requests
arrive too fast (before \f(CW$ua\fR->delay minutes has passed).  The default is
\&\s-1TRUE\s0.  If this value is \s-1FALSE\s0 then an internal \s-1SERVICE_UNAVAILABLE\s0
response will be generated.  It will have an Retry-After header that
indicates when it is \s-1OK\s0 to send another request to this server.
.Ip "$ua->rules([$rules])" 4
.IX Item "$ua->rules([$rules])"
Set/get which \fI\s-1WWW:\s0:RobotRules\fR object to use. 
.Ip "$ua->no_visits($netloc)" 4
.IX Item "$ua->no_visits($netloc)"
Returns the number of documents fetched from this server host. Yes I
know, this method should probably have been named \fInum_visits()\fR or
something like that. :\-(
.Ip "$ua->host_wait($netloc)" 4
.IX Item "$ua->host_wait($netloc)"
Returns the number of seconds (from now) you must wait before you can
make a new request to this host.
.Ip "$ua->as_string" 4
.IX Item "$ua->as_string"
Returns a string that describes the state of the \s-1UA\s0.
Mainly useful for debugging.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
the LWP::UserAgent manpage, the WWW::RobotRules manpage
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright 1996\-2000 Gisle Aas.
.PP
This library is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
