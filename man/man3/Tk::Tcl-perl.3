.\" Automatically generated by Pod::Man version 1.15
.\" Fri Apr 20 14:48:40 2001
.\"
.\" Standard preamble:
.\" ======================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R

.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used
.\" to do unbreakable dashes and therefore won't be available.  \*(C` and
.\" \*(C' expand to `' in nroff, nothing in troff, for use with C<>
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr
.\" for titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and
.\" index entries marked with X<> in POD.  Of course, you'll have to process
.\" the output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it
.\" makes way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.bd B 3
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ======================================================================
.\"
.IX Title "TCL-PERL 1"
.TH TCL-PERL 1 "perl v5.6.1" "1999-11-09" "User Contributed Perl Documentation"
.UC
.SH "NAME"
Tcl vs perl \- very old suspect documentation on porting.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This isn't really a .pod yet, nor is it Tcl vs perl
it is a copy of John's comparison of Malcolm's original perl/Tk
port with the current one. It is also out-of-date in places.
.PP
.Vb 1
\&  From: john@WPI.EDU (John Stoffel )
.Ve
.Vb 5
\&  Here are some thoughts on the new Tk extension and how I think the
\&  organization of the commands looks.  Mostly, I'm happy with it, it
\&  makes some things more organized and more consistent with tcl/tk, but
\&  since the overlying language is so different, I don't think we need to
\&  follow exactly the tcl/tk model for how to call the language.
.Ve
.Vb 1
\&  The basic structure of the Tk program is:
.Ve
.Vb 1
\&      require Tk;
.Ve
.Vb 1
\&      $top = MainWindow->new();
.Ve
.Vb 3
\&      #
\&      # create widgets
\&      #
.Ve
.Vb 1
\&      Tk::MainLoop;
.Ve
.Vb 2
\&      sub method1 {
\&      }
.Ve
.Vb 2
\&      sub methodN {
\&      }
.Ve
.Vb 3
\&  This is pretty much the same as tkperl5a5, with some cosmetic naming
\&  changes, and some more useful command name and usage changes.  A quick
\&  comparison in no particular order follows:
.Ve
.Vb 3
\&  tkperl5a5                             Tk
\&  -------------------------------       -----------------------------------
\&  $top=tkinit(name,display,sync);       $top=MainWindow->new();
.Ve
.Vb 1
\&  tkpack $w, ... ;              $w->pack(...)
.Ve
.Vb 1
\&  $w = Class::new($top, ...);   $w = $top->Class(...);
.Ve
.Vb 1
\&  tkmainloop;                   Tk::MainLoop;
.Ve
.Vb 1
\&  tkbind($w,"<key>",sub);               $w->bind("<key>",sub);
.Ve
.Vb 1
\&  tkdelete($w, ...);            $w->delete(...);
.Ve
.Vb 1
\&  $w->scanmark(...);            $w->scan("mark", ...);
.Ve
.Vb 1
\&  $w->scandragto(...);          $w->scan("dragto", ...);
.Ve
.Vb 1
\&  $w->tkselect();                       $w->Select();
.Ve
.Vb 1
\&  $w->selectadjust(...);                $w->selection("adjust", ...);
.Ve
.Vb 1
\&  $w->selectto(...);            $w->selection("to", ...);
.Ve
.Vb 1
\&  $w->selectfrom(...);          $w->selection("from", ...);
.Ve
.Vb 1
\&  $w->tkindex(...);             $w->index(...);
.Ve
.Vb 1
\&  tclcmd("xxx",...);              &Tk::xxx(...)    # all Tk commands, but no Tcl at all
.Ve
.Vb 1
\&  tclcmd("winfo", xxx, $w, ...);  $w->xxx(...);
.Ve
.Vb 1
\&                                $w->mark(...);
.Ve
.Vb 1
\&                                $w->tag(...);
.Ve
.Vb 1
\&  $w->grabstatus();             $w->grab("status");
.Ve
.Vb 1
\&  $w->grabrelease(...);         $w->grab("release", ...);
.Ve
.Vb 1
\&  focus($w);                    $w->focus;
.Ve
.Vb 1
\&  update();                     Tk->update();
.Ve
.Vb 1
\&  idletasks();                  Tk->update("idletasks");
.Ve
.Vb 1
\&  wm("cmd",$w, ...);            $w->cmd(...);
.Ve
.Vb 1
\&  destroy($w);                  $w->destroy();
.Ve
.Vb 2
\&                                Tk::option(...);
\&                                  $w->OptionGet(name,Class)
.Ve
.Vb 1
\&                                $w->place(...)
.Ve
.Vb 1
\&                                Tk::property(...);
.Ve
.Vb 1
\&  $w = Entry::new($parent,...)
.Ve
.Vb 1
\&  is now
.Ve
.Vb 1
\&  $w = $parent->Entry(...)
.Ve
.Vb 1
\&  As this allows new to be inherited from a Window class.
.Ve
.Vb 1
\&    -method=>x,-slave=>y
.Ve
.Vb 1
\&   is now
.Ve
.Vb 1
\&    -command => [x,y]
.Ve
.Vb 2
\&  1st element of list is treated as "method" if y is an object reference.
\&  (You can have -command => [a,b,c,d,e] too; b..e get passed as args).
.Ve
.Vb 3
\&  Object references are now hashes rather than scalars and there
\&  is only ever one such per window.  The Tcl_CmdInfo and PathName
\&  are entries in the hash.
.Ve
.Vb 2
\&  (This allows derived classes to
\&  re-bless the hash and keep their on stuff in it too.)
.Ve
.Vb 4
\&  Tk's "Tcl_Interp" is in fact a ref to "." window.
\&  You can find all the Tk windows descended from it as their object
\&  references get added (by PathName) into this hash.
\&  $w->MainWindow returns this hash from any window.
.Ve
.Vb 2
\&  I think that it should extend to multiple tkinits / Tk->news
\&  with different Display's - if Tk code does.
.Ve
.Vb 2
\&  Finally "bind" passes window as "extra" (or only)
\&  argument. Thus
.Ve
.Vb 1
\&  Tk::Button->bind(<Any-Enter>,"Enter");
.Ve
.Vb 4
\&  Binds Enter events to Tk::Button::Enter by default
\&  but gets called as $w->Enter so derived class of Button can just
\&  define its own Enter method. &EvWref and associated globals and race
\&  conditions are no longer needed.
.Ve
.Vb 2
\&  One thing to beware of : commands bound to events with $widget->bind
\&  follow same pattern, but get passed extra args :
.Ve
.Vb 1
\&  $widget->bind(<Any-1>,[sub {print shift}, $one, $two ]);
.Ve
.Vb 1
\&  When sub gets called it has :
.Ve
.Vb 1
\&     $widget $one $two
.Ve
.Vb 1
\&  passed.
.Ve
.Vb 2
\&  1st extra arg is reference to the per-widget hash that serves as the
\&  perl object for the widget.
.Ve
.Vb 2
\&  Every time an XEvent a reference to a special class is placed
\&  in the widget hash. It can be retrieved by $w->XEvent method.
.Ve
.Vb 2
\&  The methods of the XEvent class are the
\&  Tcl/Tk % special characters.
.Ve
.Vb 1
\&  Thus:
.Ve
.Vb 6
\&  $widget->bind(<Any-KeyPress>,
\&                sub {
\&                 my $w = shift;
\&                 my $e = $w->XEvent;
\&                 print $w->PathName," ",$e->A," pressed ,$e->xy,"\en");
\&                });
.Ve
.Vb 2
\&  XEvent->xy is a special case which returns "@" . $e->x . "," . $e->y
\&  which is common in Text package.
.Ve
.Vb 2
\&  Because of passing a blessed widget hash to "bound" subs they can be
\&  bound to (possibly inherited) methods of the widget's class:
.Ve
.Vb 1
\&  Class->bind(<Any-Down>,Down);
.Ve
.Vb 5
\&  sub Class::Down
\&  {
\&   my $w = shift;
\&   # handle down arrow
\&  }
.Ve
.Vb 1
\&  Also:
.Ve
.Vb 3
\&  -command and friends can take a list the 1st element can be a ref to
\&  as sub or a method name. Remaining elements are passed as args to the
\&  sub at "invoke" time. Thus :
.Ve
.Vb 1
\&  $b= $w->Button(blah blah, '-command' => [sub{print shift} , $fred ]);
.Ve
.Vb 1
\&  Should do the trick, provided $fred is defined at time of button creation.
.Ve
.Vb 3
\&  Thus 1st element of list is equivalent to Malcolm's -method and second
\&  would be his -slave.  Any further elements are a bonus and avoid
\&  having to pass ref to an array/hash as a slave.
.Ve
