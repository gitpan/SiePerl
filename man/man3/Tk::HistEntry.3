.\" Automatically generated by Pod::Man version 1.15
.\" Fri Apr 20 15:27:11 2001
.\"
.\" Standard preamble:
.\" ======================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R

.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used
.\" to do unbreakable dashes and therefore won't be available.  \*(C` and
.\" \*(C' expand to `' in nroff, nothing in troff, for use with C<>
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr
.\" for titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and
.\" index entries marked with X<> in POD.  Of course, you'll have to process
.\" the output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it
.\" makes way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.bd B 3
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ======================================================================
.\"
.IX Title "HistEntry 3"
.TH HistEntry 3 "perl v5.6.1" "2001-02-24" "User Contributed Perl Documentation"
.UC
.SH "NAME"
Tk::HistEntry \- Entry widget with history capability
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use Tk::HistEntry;
.Ve
.Vb 2
\&    $hist1 = $top->HistEntry(-textvariable => \e$var1);
\&    $hist2 = $top->SimpleHistEntry(-textvariable => \e$var2);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\f(CW\*(C`Tk::HistEntry\*(C'\fR defines entry widgets with history capabilities. The widgets
come in two flavours:
.if n .Ip "\f(CW""""HistEntry""""\fR (in package \f(CW""""Tk::HistEntry::Browse""""\fR) \- with associated browse entry" 4
.el .Ip "\f(CWHistEntry\fR (in package \f(CWTk::HistEntry::Browse\fR) \- with associated browse entry" 4
.IX Item "HistEntry (in package Tk::HistEntry::Browse) - with associated browse entry"
.PD 0
.if n .Ip "\f(CW""""SimpleHistEntry""""\fR (in package \f(CW""""Tk::HistEntry::Simple""""\fR) \- plain widget without browse entry" 4
.el .Ip "\f(CWSimpleHistEntry\fR (in package \f(CWTk::HistEntry::Simple\fR) \- plain widget without browse entry" 4
.IX Item "SimpleHistEntry (in package Tk::HistEntry::Simple) - plain widget without browse entry"
.PD
.PP
The user may browse with the \fBUp\fR and \fBDown\fR keys through the history list.
New history entries may be added either manually by binding the
\&\fBReturn\fR key to \fB\f(BIhistoryAdd()\fB\fR or
automatically by setting the \fB\-command\fR option.
.SH "OPTIONS"
.IX Header "OPTIONS"
\&\fBHistEntry\fR is an descendant of \fBBrowseEntry\fR and thus supports all of its
standard options.
.PP
\&\fBSimpleHistEntry\fR is an descendant of \fBEntry\fR and supports all of the
\&\fBEntry\fR options.
.PP
In addition, the widgets support following specific options:
.Ip "\fB\-textvariable\fR or \fB\-variable\fR" 4
.IX Item "-textvariable or -variable"
Variable which is tied to the HistEntry widget. Either \fB\-textvariable\fR (like
in Entry) or \fB\-variable\fR (like in BrowseEntry) may be used.
.Ip "\fB\-command\fR" 4
.IX Item "-command"
Specifies a callback, which is executed when the Return key was pressed or
the \fBinvoke\fR method is called. The callback reveives three arguments:
the reference to the HistEntry widget, the current textvariable value and
a boolean value, which tells whether the string was added to the history
list (e.g. duplicates and empty values are not added to the history list).
.Ip "\fB\-dup\fR" 4
.IX Item "-dup"
Specifies whether duplicate entries are allowed in the history list. Defaults
to true.
.Ip "\fB\-bell\fR" 4
.IX Item "-bell"
If set to true, rings the bell if the user tries to move off of the history
or if a search was not successful. Defaults to true.
.Ip "\fB\-limit\fR" 4
.IX Item "-limit"
Limits the number of history entries. Defaults to unlimited.
.Ip "\fB\-match\fR" 4
.IX Item "-match"
Turns auto-completion on.
.Ip "\fB\-case\fR" 4
.IX Item "-case"
If set to true a true value, then be case sensitive on
auto-completion. Defaults to 1.
.SH "METHODS"
.IX Header "METHODS"
.Ip "\fBhistoryAdd(\fR[\fIstring\fR]\fB)\fR" 4
.IX Item "historyAdd([string])"
Adds string (or the current textvariable value if not set) manually to the
history list. \fBaddhistory\fR is an alias for \fBhistoryAdd\fR. Returns the
added string or undef if no addition was made.
.Ip "\fBinvoke(\fR[\fIstring\fR]\fB)\fR" 4
.IX Item "invoke([string])"
Invokes the command specified with \fB\-command\fR.
.Ip "\fBhistory(\fR[\fIarrayref\fR]\fB)\fR" 4
.IX Item "history([arrayref])"
Without argument, returns the current history list. With argument (a
reference to an array), replaces the history list.
.Ip "\fBhistorySave(\fR\fIfile\fR\fB)\fR" 4
.IX Item "historySave(file)"
Save the history list to the named file.
.Ip "\fBhistoryMergeFromFile(\fR\fIfile\fR\fB)\fR" 4
.IX Item "historyMergeFromFile(file)"
Merge the history list from the named file to the end of the current
history list of the widget.
.Ip "\fBhistoryReset\fR" 4
.IX Item "historyReset"
Remove all entries from the history list.
.SH "KEY BINDINGS"
.IX Header "KEY BINDINGS"
.Ip "\fBUp\fR, \fBControl-p\fR" 4
.IX Item "Up, Control-p"
Selects the previous history entry.
.Ip "\fBDown\fR, \fBControl-n\fR" 4
.IX Item "Down, Control-n"
Selects the next history entry.
.Ip "\fBMeta-<\fR, \fBAlt-<\fR" 4
.IX Item "Meta-<, Alt-<"
Selects first entry.
.Ip "\fBMeta->\fR, \fBAlt->\fR" 4
.IX Item "Meta->, Alt->"
Selects last entry.
.Ip "\fBControl-r\fR" 4
.IX Item "Control-r"
The current content of the widget is searched backward in the history.
.Ip "\fBControl-s\fR" 4
.IX Item "Control-s"
The current content of the widget is searched forward in the history.
.Ip "\fBReturn\fR" 4
.IX Item "Return"
If \fB\-command\fR is set, adds current content to the history list and
executes the associated callback.
.SH "EXAMPLE"
.IX Header "EXAMPLE"
This is an simple example for Tk::HistEntry. More examples can be
found in the t and examples directories of the source distribution.
.PP
.Vb 2
\&    use Tk;
\&    use Tk::HistEntry;
.Ve
.Vb 9
\&    $top = new MainWindow;
\&    $he = $top->HistEntry(-textvariable => \e$foo,
\&                          -command => sub {
\&                              # automatically adds $foo to history
\&                              print STDERR "Do something with $foo\en";
\&                          })->pack;
\&    $b = $top->Button(-text => 'Do it',
\&                      -command => sub { $he->invoke })->pack;
\&    MainLoop;
.Ve
If you like to not depend on the installation of Tk::HistEntry, you
can write something like this:
.PP
.Vb 14
\&    $Entry = "SimpleHistEntry";
\&    eval {
\&        # try loading the module, otherwise $Entry is left to the value "Entry"
\&        require Tk::HistEntry;
\&        $Entry = "SimpleHistEntry";
\&    };
\&    $entry = $status_frame->$Entry(-textvariable => \e$res)->pack;
\&    $entry->bind("<Return>" => sub {
\&                                   # check whether the historyAdd method is
\&                                   # known to the widget
\&                                   if ($entry->can('historyAdd')) {
\&                                       $entry->historyAdd;
\&                                   }
\&                               });
.Ve
.SH "BUGS/TODO"
.IX Header "BUGS/TODO"
.Vb 3
\& - C-s/C-r do not work as nice as in gnu readline
\& - use -browsecmd from Tk::BrowseEntry
\& - use Tie::Array if present
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Slaven Rezic <eserte@cs.tu-berlin.de>
.SH "CREDITS"
.IX Header "CREDITS"
Thanks for Jason Smith <smithj4@rpi.edu> and Benny Khoo
<kkhoo1@penang.intel.com> for their suggestions. The auto-completion
code is stolen from Tk::IntEntry by Dave Collins
<Dave.Collins@tiuk.ti.com>.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 1997, 2000, 2001 Slaven Rezic. All rights reserved.
This package is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
