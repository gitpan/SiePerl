.\" Automatically generated by Pod::Man version 1.15
.\" Fri Apr 20 13:11:05 2001
.\"
.\" Standard preamble:
.\" ======================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R

.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used
.\" to do unbreakable dashes and therefore won't be available.  \*(C` and
.\" \*(C' expand to `' in nroff, nothing in troff, for use with C<>
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr
.\" for titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and
.\" index entries marked with X<> in POD.  Of course, you'll have to process
.\" the output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it
.\" makes way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.bd B 3
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ======================================================================
.\"
.IX Title "ExtUtils::Manifest 3"
.TH ExtUtils::Manifest 3 "perl v5.6.1" "2001-02-23" "Perl Programmers Reference Guide"
.UC
.SH "NAME"
ExtUtils::Manifest \- utilities to write and check a \s-1MANIFEST\s0 file
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    require ExtUtils::Manifest;
.Ve
.Vb 1
\&    ExtUtils::Manifest::mkmanifest;
.Ve
.Vb 1
\&    ExtUtils::Manifest::manicheck;
.Ve
.Vb 1
\&    ExtUtils::Manifest::filecheck;
.Ve
.Vb 1
\&    ExtUtils::Manifest::fullcheck;
.Ve
.Vb 1
\&    ExtUtils::Manifest::skipcheck;
.Ve
.Vb 1
\&    ExtUtils::Manifest::manifind();
.Ve
.Vb 1
\&    ExtUtils::Manifest::maniread($file);
.Ve
.Vb 1
\&    ExtUtils::Manifest::manicopy($read,$target,$how);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fImkmanifest()\fR writes all files in and below the current directory to a
file named in the global variable \f(CW$ExtUtils::Manifest::MANIFEST\fR (which
defaults to \f(CW\*(C`MANIFEST\*(C'\fR) in the current directory. It works similar to
.PP
.Vb 1
\&    find . -print
.Ve
but in doing so checks each line in an existing \f(CW\*(C`MANIFEST\*(C'\fR file and
includes any comments that are found in the existing \f(CW\*(C`MANIFEST\*(C'\fR file
in the new one. Anything between white space and an end of line within
a \f(CW\*(C`MANIFEST\*(C'\fR file is considered to be a comment. Filenames and
comments are separated by one or more \s-1TAB\s0 characters in the
output. All files that match any regular expression in a file
\&\f(CW\*(C`MANIFEST.SKIP\*(C'\fR (if such a file exists) are ignored.
.PP
\&\fImanicheck()\fR checks if all the files within a \f(CW\*(C`MANIFEST\*(C'\fR in the
current directory really do exist. It only reports discrepancies and
exits silently if \s-1MANIFEST\s0 and the tree below the current directory
are in sync.
.PP
\&\fIfilecheck()\fR finds files below the current directory that are not
mentioned in the \f(CW\*(C`MANIFEST\*(C'\fR file. An optional file \f(CW\*(C`MANIFEST.SKIP\*(C'\fR
will be consulted. Any file matching a regular expression in such a
file will not be reported as missing in the \f(CW\*(C`MANIFEST\*(C'\fR file.
.PP
\&\fIfullcheck()\fR does both a \fImanicheck()\fR and a \fIfilecheck()\fR.
.PP
\&\fIskipcheck()\fR lists all the files that are skipped due to your
\&\f(CW\*(C`MANIFEST.SKIP\*(C'\fR file.
.PP
\&\fImanifind()\fR returns a hash reference. The keys of the hash are the
files found below the current directory.
.PP
maniread($file) reads a named \f(CW\*(C`MANIFEST\*(C'\fR file (defaults to
\&\f(CW\*(C`MANIFEST\*(C'\fR in the current directory) and returns a \s-1HASH\s0 reference
with files being the keys and comments being the values of the \s-1HASH\s0.
Blank lines and lines which start with \f(CW\*(C`#\*(C'\fR in the \f(CW\*(C`MANIFEST\*(C'\fR file
are discarded.
.PP
\&\f(CW\*(C`manicopy($read,$target,$how)\*(C'\fR copies the files that are the keys in
the \s-1HASH\s0 \fI%$read\fR to the named target directory. The \s-1HASH\s0 reference
\&\f(CW$read\fR is typically returned by the \fImaniread()\fR function. This
function is useful for producing a directory tree identical to the
intended distribution tree. The third parameter \f(CW$how\fR can be used to
specify a different methods of \*(L"copying\*(R". Valid values are \f(CW\*(C`cp\*(C'\fR,
which actually copies the files, \f(CW\*(C`ln\*(C'\fR which creates hard links, and
\&\f(CW\*(C`best\*(C'\fR which mostly links the files but copies any symbolic link to
make a tree without any symbolic link. Best is the default.
.SH "MANIFEST.SKIP"
.IX Header "MANIFEST.SKIP"
The file \s-1MANIFEST\s0.SKIP may contain regular expressions of files that
should be ignored by \fImkmanifest()\fR and \fIfilecheck()\fR. The regular
expressions should appear one on each line. Blank lines and lines
which start with \f(CW\*(C`#\*(C'\fR are skipped.  Use \f(CW\*(C`\e#\*(C'\fR if you need a regular
expression to start with a sharp character. A typical example:
.PP
.Vb 8
\&    \ebRCS\eb
\&    ^MANIFEST\e.
\&    ^Makefile$
\&    ~$
\&    \e.html$
\&    \e.old$
\&    ^blib/
\&    ^MakeMaker-\ed
.Ve
.SH "EXPORT_OK"
.IX Header "EXPORT_OK"
\&\f(CW\*(C`&mkmanifest\*(C'\fR, \f(CW\*(C`&manicheck\*(C'\fR, \f(CW\*(C`&filecheck\*(C'\fR, \f(CW\*(C`&fullcheck\*(C'\fR,
\&\f(CW\*(C`&maniread\*(C'\fR, and \f(CW\*(C`&manicopy\*(C'\fR are exportable.
.SH "GLOBAL VARIABLES"
.IX Header "GLOBAL VARIABLES"
\&\f(CW\*(C`$ExtUtils::Manifest::MANIFEST\*(C'\fR defaults to \f(CW\*(C`MANIFEST\*(C'\fR. Changing it
results in both a different \f(CW\*(C`MANIFEST\*(C'\fR and a different
\&\f(CW\*(C`MANIFEST.SKIP\*(C'\fR file. This is useful if you want to maintain
different distributions for different audiences (say a user version
and a developer version including \s-1RCS\s0).
.PP
\&\f(CW\*(C`$ExtUtils::Manifest::Quiet\*(C'\fR defaults to 0. If set to a true value,
all functions act silently.
.SH "DIAGNOSTICS"
.IX Header "DIAGNOSTICS"
All diagnostic output is sent to \f(CW\*(C`STDERR\*(C'\fR.
.if n .Ip "\f(CW""""Not in MANIFEST:""""\fR \fIfile\fR" 4
.el .Ip "\f(CWNot in MANIFEST:\fR \fIfile\fR" 4
.IX Item "Not in MANIFEST: file"
is reported if a file is found, that is missing in the \f(CW\*(C`MANIFEST\*(C'\fR
file which is excluded by a regular expression in the file
\&\f(CW\*(C`MANIFEST.SKIP\*(C'\fR.
.if n .Ip "\f(CW""""No such file:""""\fR \fIfile\fR" 4
.el .Ip "\f(CWNo such file:\fR \fIfile\fR" 4
.IX Item "No such file: file"
is reported if a file mentioned in a \f(CW\*(C`MANIFEST\*(C'\fR file does not
exist.
.if n .Ip "\f(CW""""MANIFEST:""""\fR \fI$!\fR" 4
.el .Ip "\f(CWMANIFEST:\fR \fI$!\fR" 4
.IX Item "MANIFEST: $!"
is reported if \f(CW\*(C`MANIFEST\*(C'\fR could not be opened.
.if n .Ip "\f(CW""""Added to MANIFEST:""""\fR \fIfile\fR" 4
.el .Ip "\f(CWAdded to MANIFEST:\fR \fIfile\fR" 4
.IX Item "Added to MANIFEST: file"
is reported by \fImkmanifest()\fR if \f(CW$Verbose\fR is set and a file is added
to \s-1MANIFEST\s0. \f(CW$Verbose\fR is set to 1 by default.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
the ExtUtils::MakeMaker manpage which has handy targets for most of the functionality.
.SH "AUTHOR"
.IX Header "AUTHOR"
Andreas Koenig <\fIkoenig@franz.ww.TU-Berlin.DE\fR>
