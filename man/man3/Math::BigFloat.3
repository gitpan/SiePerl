.\" Automatically generated by Pod::Man version 1.15
.\" Fri Apr 20 13:10:07 2001
.\"
.\" Standard preamble:
.\" ======================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R

.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used
.\" to do unbreakable dashes and therefore won't be available.  \*(C` and
.\" \*(C' expand to `' in nroff, nothing in troff, for use with C<>
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr
.\" for titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and
.\" index entries marked with X<> in POD.  Of course, you'll have to process
.\" the output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it
.\" makes way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.bd B 3
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ======================================================================
.\"
.IX Title "Math::BigFloat 3"
.TH Math::BigFloat 3 "perl v5.6.1" "2001-02-23" "Perl Programmers Reference Guide"
.UC
.SH "NAME"
Math::BigFloat \- Arbitrary length float math package
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&  use Math::BigFloat;
\&  $f = Math::BigFloat->new($string);
.Ve
.Vb 12
\&  $f->fadd(NSTR) return NSTR            addition
\&  $f->fsub(NSTR) return NSTR            subtraction
\&  $f->fmul(NSTR) return NSTR            multiplication
\&  $f->fdiv(NSTR[,SCALE]) returns NSTR   division to SCALE places
\&  $f->fmod(NSTR) returns NSTR           modular remainder
\&  $f->fneg() return NSTR                negation
\&  $f->fabs() return NSTR                absolute value
\&  $f->fcmp(NSTR) return CODE            compare undef,<0,=0,>0
\&  $f->fround(SCALE) return NSTR         round to SCALE digits
\&  $f->ffround(SCALE) return NSTR        round at SCALEth place
\&  $f->fnorm() return (NSTR)             normalize
\&  $f->fsqrt([SCALE]) return NSTR        sqrt to SCALE places
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
All basic math operations are overloaded if you declare your big
floats as
.PP
.Vb 1
\&    $float = new Math::BigFloat "2.123123123123123123123123123123123";
.Ve
.Ip "number format" 2
.IX Item "number format"
canonical strings have the form /[+\-]\ed+E[+\-]\ed+/ .  Input values can
have embedded whitespace.
.Ip "Error returns 'NaN'" 2
.IX Item "Error returns 'NaN'"
An input parameter was \*(L"Not a Number\*(R" or divide by zero or sqrt of
negative number.
.Ip "Division is computed to" 2
.IX Item "Division is computed to"
\&\f(CW\*(C`max($Math::BigFloat::div_scale,length(dividend)+length(divisor))\*(C'\fR
digits by default.
Also used for default sqrt scale.
.Ip "Rounding is performed" 2
.IX Item "Rounding is performed"
according to the value of
\&\f(CW\*(C`$Math::BigFloat::rnd_mode\*(C'\fR:
.Sp
.Vb 6
\&  trunc     truncate the value
\&  zero      round towards 0
\&  +inf      round towards +infinity (round up)
\&  -inf      round towards -infinity (round down)
\&  even      round to the nearest, .5 to the even digit
\&  odd       round to the nearest, .5 to the odd digit
.Ve
The default is \f(CW\*(C`even\*(C'\fR rounding.
.SH "BUGS"
.IX Header "BUGS"
The current version of this module is a preliminary version of the
real thing that is currently (as of perl5.002) under development.
.PP
The printf subroutine does not use the value of
\&\f(CW\*(C`$Math::BigFloat::rnd_mode\*(C'\fR when rounding values for printing.
Consequently, the way to print rounded values is
to specify the number of digits both as an
argument to \f(CW\*(C`ffround\*(C'\fR and in the \f(CW\*(C`%f\*(C'\fR printf string,
as follows:
.PP
.Vb 1
\&  printf "%.3f\en", $bigfloat->ffround(-3);
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Mark Biggar
Patches by John Peacock Apr 2001
=cut
