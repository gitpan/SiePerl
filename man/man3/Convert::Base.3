.\" Automatically generated by Pod::Man version 1.15
.\" Mon Apr 23 08:22:25 2001
.\"
.\" Standard preamble:
.\" ======================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R

.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used
.\" to do unbreakable dashes and therefore won't be available.  \*(C` and
.\" \*(C' expand to `' in nroff, nothing in troff, for use with C<>
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr
.\" for titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and
.\" index entries marked with X<> in POD.  Of course, you'll have to process
.\" the output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it
.\" makes way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.bd B 3
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ======================================================================
.\"
.IX Title "Base 3"
.TH Base 3 "perl v5.6.1" "2000-01-16" "User Contributed Perl Documentation"
.UC
.SH "NAME"
Convert::Units::Base \- base object for performing unit conversions
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The Units package is a collection of modules for parsing strings with
unit measurements (such as \*(L"12pt\*(R" or \*(L"3 meters\*(R") and converting them
to some other unit (such as \*(L"picas\*(R" or \*(L"inches\*(R").
.PP
It uses a base package (Units::Base) which does the dirty work. Other
modules define what units they handle and how they are related.
.Sh "Why a Separate Module?"
.IX Subsection "Why a Separate Module?"
It is \fIintentionally\fR distinct from the \fIMath::Units\fR module. Why? The
\&\fIMath::Units\fR module implies that unit conversions are \fIexact\fR,
with one-to-one relationships.  This is fine for scientific work.
It's even fine for some general purpose/real-world uses (such as
converting Fehrenheight to Celcius).
.PP
Real-world measurement systems are conflicting. For instance, a \*(L"point\*(R"
in typography is equivalent to 1/72 inch, according to PostScript specs
and common usage. Other type systems consider it 1/72.27 inch, or 0.01383
inches, or 0.0148 inches.  Outside of that context, a point may be 1/120
or 1/144 inch.
.PP
Common notations and abbreviations also depend on context. Does \*(L"12 pt\*(R"
mean \*(L"12 point\*(R", \*(L"12 parts\*(R" or \*(L"12 pints\*(R"?
.PP
Even without conflicts in the definition of a particular unit, there's no
need to convert point sizes for fonts into miles or light-years. Typesetters,
surveyors and astronomers user different scales as well as systems.
.Sh "People do not think like computers"
.IX Subsection "People do not think like computers"
Not everyone uses the metric system.
.PP
And even less people say things like \*(L"5.25 feet\*(R". Often it's \*(L"5 feet, 3 inches\*(R"
or \*(L"5 1/4 feet\*(R".
.PP
Despite having ten fingers and toes, people don't think in tens. They think in
twos, threes, fours, twelves, and sixteens. And sometimes they use fractional
measurements like quarter-inches, sixteenths-of-an-inch, or half-pints.
.PP
The purpose of this module is to allow people to use the measurement
systems they are familiar with, and that is appropriate to what they
are doing.
.Sh "Rationale"
.IX Subsection "Rationale"
The Units:: hierarchy is an attempt to keep measurement systems in
distinct classes. Thus one can have modules for converting between
typography units (points, picas) distinct from common units of length
(or area, temperature, etc.), specialized units (for Astronomy, Chemistry,
Physics, Textiles, Winery, Navigation, etc.) or even traditional or
regional systems (Japanese, Chinese, Egyptian, archaic systems, etc.)
and to keep conflicting measurement systems distinct.
.Sh "Release Notes"
.IX Subsection "Release Notes"
The current distribution contains the following packages:
.PP
.Vb 5
\&    Convert::Units::
\&    ::Base         - a base module that does all of the work
\&    ::Length       - a module for converting units of length
\&    ::Temperature  - a module for converting units of temperature
\&    ::Type         - a module for converting units of type
.Ve
Units::Base by itself does nothing. Another module needs to use it
to create definitions of what units of measurement it handles and
how they are related to each other (ie, 1 m = 100 cm).
.PP
The base unit also allows for synonym and abbreviations to be
defined.
.PP
It also allows common \*(L"multiples\*(R" to be defined, so that it can
handle things like \*(L"18 half-points\*(R" or \*(L"6 dozen feet\*(R" or even
convert millimters to \*(L"sixteenths of an inch\*(R". (It does not yet
handle Greek prefixes like centi- or mega- ... those will have
to be manually defined.)
.Sh "Known Issues"
.IX Subsection "Known Issues"
The current release should be considered \*(L"beta\*(R" until further testing
and refinements have been made. Then again, maybe \*(L"alpha\*(R" is more
accurate.
.PP
The current version does not yet handle fractions such as \*(L"1/2 in\*(R".
It should handle decimals such as \*(L"0.5 in\*(R".
.PP
Relationships have been rewritten to be handle A(x+b) as well Ax.
They may be redone in the future to handle more complex
relationships, if the need arises.
.PP
Unit names much be defined as all lowercase, since strings are
munged with \fI\fIlc()\fI\fR before processing. In other words, if you define
a unit name as \*(L"F\*(R" or \*(L"Fahrenheight\*(R" you won't be able to use it.
.Sh "Future Enhancements"
.IX Subsection "Future Enhancements"
Aside from bug fixes, optimizations, and making the string parsing
conform more to the \*(L"manifesto\*(R" above, obvious additions would be modules
for converting between units of area, volume, weight... (although if
\&\fIMath::Units\fR does what you need, use that instead.)
.PP
An example hierarchy for future modules:
.PP
.Vb 5
\&    Convert::Units::
\&    ::Length            - general measures of length
\&    ::Area
\&    ::Pressure
\&    ::Volume
.Ve
.Vb 3
\&    Convert::Units::Length
\&    ::Chinese           - specialized regional/traditional systems
\&    ::English
.Ve
.Vb 2
\&    Convert::Units::Astronomy
\&    ::Length            - or Distance...?
.Ve
Modules should share a common unit (preferably metric) to allow for
conversions.
.SH "REQUIRED MODULES"
.IX Header "REQUIRED MODULES"
.Vb 1
\&    Carp
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIUnits::Length\fR, \fIUnits::Temperature\fR and \fIUnits::Type\fR modules, which
demonstrate how \fIUnits::Base\fR is used.
.SH "AUTHOR"
.IX Header "AUTHOR"
Robert Rothenberg <wlkngowl@unix.asb.com>
.SH "LICENSE"
.IX Header "LICENSE"
Copyright (c) 1999\-2000 Robert Rothenberg. All rights reserved.
This program is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
