.\" Automatically generated by Pod::Man version 1.15
.\" Mon Apr 23 12:02:21 2001
.\"
.\" Standard preamble:
.\" ======================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R

.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used
.\" to do unbreakable dashes and therefore won't be available.  \*(C` and
.\" \*(C' expand to `' in nroff, nothing in troff, for use with C<>
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr
.\" for titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and
.\" index entries marked with X<> in POD.  Of course, you'll have to process
.\" the output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it
.\" makes way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.bd B 3
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ======================================================================
.\"
.IX Title "APACHEHANDLER 1"
.TH APACHEHANDLER 1 "perl v5.6.1" "2001-01-05" "User Contributed Perl Documentation"
.UC
.SH "NAME"
\&\s-1HTML:\s0:Mason::ApacheHandler \- Mason/mod_perl interface
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use HTML::Mason::ApacheHandler;
.Ve
.Vb 6
\&    my $ah = new HTML::Mason::ApacheHandler (..name/value params..);
\&    ...
\&    sub handler {
\&        my $r = shift;
\&        $ah->handle_request($r);
\&    }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The ApacheHandler object links Mason to mod_perl, running components in
response to \s-1HTTP\s0 requests. It is controlled primarily through
parameters to the \fInew()\fR constructor.
.PP
\&\fIhandle_request()\fR is not a user method, but rather is called from the
\&\s-1HTML:\\fIs0:Mason::handler()\fR routine in handler.pl.
.SH "PARAMETERS TO THE \fIuse()\fP DECLARATION"
.IX Header "PARAMETERS TO THE use() DECLARATION"
The following are parameters to pass explicitly when using
\&\s-1HTML:\s0:Mason::ApacheHandler. e.g.
.PP
.Vb 1
\&    use HTML::Mason::ApacheHandler (args_method=>'mod_perl');
.Ve
.Ip "args_method" 4
.IX Item "args_method"
Method to use for unpacking \s-1GET\s0 and \s-1POST\s0 arguments. The valid options
are '\s-1CGI\s0' and 'mod_perl'; these indicate that a \s-1CGI\s0.pm or
Apache::Request object (respectively) will be created for the purposes
of argument handling. These objects are, unfortunately, not yet
accessible from components.
.Sp
\&'\s-1CGI\s0' is the default and should work on most Perl systems. However,
if you have the Apache::Request package (or are inclined to fetch it
from \s-1CPAN\s0), you might switch to 'mod_perl' for speed and memory
efficiency.
.Sp
When specifying args_method='\s-1CGI\s0', the Mason request object ($m)
will have a method called \f(CW\*(C`cgi_object\*(C'\fR available.  This method
returns the \s-1CGI\s0 object used in the ApacheHandler code.
.Sp
When specifying args_method='mod_perl', the \f(CW$r\fR global is upgraded
to an Apache::Request object. This object inherits all Apache
methods and adds a few of its own, dealing with parameters and
file uploads. See Apache::Request manual page for more information.
.SH "PARAMETERS TO THE \fInew()\fP CONTRUCTOR"
.IX Header "PARAMETERS TO THE new() CONTRUCTOR"
.Ip "apache_status_title" 4
.IX Item "apache_status_title"
Title that you want this ApacheHandler to appear as under
Apache::Status.  Default is \*(L"\s-1HTML:\s0:Mason status\*(R".  This is useful if
you create more then one ApacheHandler object and want them all
visible via Apache::Status.
.Ip "auto_send_headers" 4
.IX Item "auto_send_headers"
True or undef; default true.  Indicates whether Mason should
automatically send \s-1HTTP\s0 headers before sending content back to the
client. If you set to false, you should call \f(CW$r\fR->send_http_header
manually.
.Sp
See the Devel/sending_http_headers of the Component Developer's
Guide for details about the automatic header feature.
.Ip "debug_handler_proc, debug_handler_script, debug_mode, debug_perl_binary" 4
.IX Item "debug_handler_proc, debug_handler_script, debug_mode, debug_perl_binary"
The \fBdebug_*\fR parameters control Mason's use of debug files.
Component Admin/debugging procedures are fully described in the \fIMason
Administrator's Guide\fR.
.Ip "decline_dirs" 4
.IX Item "decline_dirs"
Indicates whether Mason should decline directory requests, leaving
Apache to serve up a directory index or a \s-1FORBIDDEN\s0 error as
appropriate. Default is 1. See Admin/Allowing directory requests
for more information about handling directories with Mason.
.Ip "error_mode" 4
.IX Item "error_mode"
Specifies one of two ways to handle Perl errors, 'fatal' or 'html'.
In fatal mode the handler simply dies with the error message. This
may be caught with an eval around \f(CW\*(C`$ah\->handle_request\*(C'\fR or left
for Apache to handle (generally with a return status of 500).  In
\&\s-1HTML\s0 mode the handler sends a readable \s-1HTML\s0 version of the error
message to the client. \s-1HTML\s0 mode is most useful in combination with
batch output mode for debugging.
.Ip "output_mode" 4
.IX Item "output_mode"
This parameter has been replaced by the equivalent Interp parameter
Interp/out_mode. For backward compatibility, setting
\&\f(CW\*(C`$ah\->output_mode\*(C'\fR will cause \f(CW\*(C`$interp\->out_mode\*(C'\fR to be set
appropriately.
.Ip "top_level_predicate" 4
.IX Item "top_level_predicate"
Reference to a subroutine that decides whether a component can answer
top level requests. This allows for private-use components that live
within the DocumentRoot but are inaccesible from URLs. By default,
always returns 1.
.Sp
The subroutine receives one parameter, the absolute path to the
component.  It then returns either a true (serve component) or false
(reject component). In this example, the predicate rejects requests
for components whose name starts with an \*(L"_\*(R" character:
.Sp
.Vb 1
\&    top_level_predicate => sub { $_[0] !~ m{/_[^/]+$}
.Ve
.SH "ACCESSOR METHODS"
.IX Header "ACCESSOR METHODS"
All of the above properties have standard accessor methods of the
same name: no arguments retrieves the value, and one argument sets it.
For example:
.PP
.Vb 3
\&    my $ah = new HTML::Mason::ApacheHandler;
\&    my $errmode = $ah->error_mode;
\&    $ah->error_mode('html');
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Jonathan Swartz, swartz@pobox.com
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\s-1HTML:\s0:Mason,
\&\s-1HTML:\s0:Mason::Parser,
\&\s-1HTML:\s0:Mason::Interp,
\&\s-1HTML:\s0:Mason::Admin
