.\" Automatically generated by Pod::Man version 1.15
.\" Mon Apr 23 13:12:50 2001
.\"
.\" Standard preamble:
.\" ======================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R

.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used
.\" to do unbreakable dashes and therefore won't be available.  \*(C` and
.\" \*(C' expand to `' in nroff, nothing in troff, for use with C<>
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr
.\" for titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and
.\" index entries marked with X<> in POD.  Of course, you'll have to process
.\" the output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it
.\" makes way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.bd B 3
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ======================================================================
.\"
.IX Title "Agent::Channel 3"
.TH Agent::Channel 3 "perl v5.6.1" "2001-03-14" "User Contributed Perl Documentation"
.UC
.SH "NAME"
Log::Agent::Channel \- ancestor class for all Log::Agent channels
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& @Log::Agent::Channel::XXX::ISA = qw(Log::Agent::Channel);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The \f(CW\*(C`Log::Agent::Channel\*(C'\fR class is the root class from which all
\&\f(CW\*(C`Log::Agent\*(C'\fR channels inherit. It is a \fIdeferred\fR class, meaning that
it cannot be instantiated directly. All the deferred routines need to
be implemented by its heirs to form a valid driver.
.PP
Internally, the various \f(CW\*(C`Log::Agent::Driver\*(C'\fR objects create
\&\f(CW\*(C`Log::Agent::Channel\*(C'\fR instances for each logging channel defined at
driver creation time.  The channels are therefore architecturally hidden
within \f(CW\*(C`Log::Agent\*(C'\fR, since this module only provides redefined mappings
for the various \fIlogxxx()\fR routines (\fIlogerr()\fR, \fIlogwarn()\fR, \fIlogdie()\fR, etc...).
.PP
However, this does not mean that channel classes cannot be used externally:
the \f(CW\*(C`Log::Agent::Logger\*(C'\fR extension makes \f(CW\*(C`Log::Agent::Channel\*(C'\fR objects
architecturally visible, thereby offering an application-level logging \s-1API\s0
that can be redirected to various places transparently for the application.
.SH "CHANNEL LIST"
.IX Header "CHANNEL LIST"
The following channels are currently made available by \f(CW\*(C`Log::Agent\*(C'\fR.  More
channels can be defined by the \f(CW\*(C`Log::Agent::Logger\*(C'\fR extension:
.Ip "Log::Agent::Channel::File" 4
.IX Item "Log::Agent::Channel::File"
This channel writes logs to files, defined by their path or via a magical
opening sequence such as \*(L"|cmd\*(R".
.Ip "Log::Agent::Channel::Handle" 4
.IX Item "Log::Agent::Channel::Handle"
This channel writes logs to an already opened descriptor, as specified by its
file handle: an \s-1IO:\s0:Handle object, or a \s-1GLOB\s0 reference such as \e*FILE.
.Ip "Log::Agent::Channel::Syslog" 4
.IX Item "Log::Agent::Channel::Syslog"
This channel redirects logs to the \fIsyslogd\fR\|(8) daemon, which will then handle
the dispatching to various logfiles, based on its own configuration.
.SH "INTERFACE"
.IX Header "INTERFACE"
You need not read this section if you're only \fBusing\fR \f(CW\*(C`Log::Agent\*(C'\fR.
However, if you wish to \fBimplement\fR another channel, then this section
might be of interest.
.PP
The following routines are \fBdeferred\fR and therefore need to be defined
by the heir:
.Ip "write($priority, \f(CW$logstring\fR)" 4
.IX Item "write($priority, $logstring)"
Emit the log entry held in \f(CW$logstring\fR, at priority \f(CW$priority\fR.
A trailing \*(L"\en\*(R" is added to the \f(CW$logstring\fR, if needed (i.e. if the physical
entity does not do it already, like syslog does).
.Sp
The \f(CW$priority\fR argument must be a valid syslog priority, i.e. one of the
following strings: \*(L"emerg\*(R", \*(L"alert\*(R", \*(L"crit\*(R", \*(L"err\*(R", \*(L"warning\*(R", \*(L"notice\*(R",
\&\*(L"info\*(R", \*(L"debug\*(R".
.Sp
The \f(CW$logstring\fR may not really be a plain string. It can actually be a
Log::Agent::Message object with an overloaded stringification routine, so
the illusion should be complete.
.Ip "close" 4
.IX Item "close"
Close the channel.
.Ip "make" 4
.IX Item "make"
This is the creation routine. Its signature varies for each channel, naturally.
.SH "AUTHOR"
.IX Header "AUTHOR"
Raphael Manfredi \fI<Raphael_Manfredi@pobox.com>\fR
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fILog::Agent::Channel::File\fR\|(3), \fILog::Agent::Channel::Handle\fR\|(3),
\&\fILog::Agent::Channel::Syslog\fR\|(3), \fILog::Agent::Logger\fR\|(3).
