.\" Automatically generated by Pod::Man version 1.15
.\" Mon Apr 23 13:02:12 2001
.\"
.\" Standard preamble:
.\" ======================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R

.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used
.\" to do unbreakable dashes and therefore won't be available.  \*(C` and
.\" \*(C' expand to `' in nroff, nothing in troff, for use with C<>
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr
.\" for titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and
.\" index entries marked with X<> in POD.  Of course, you'll have to process
.\" the output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it
.\" makes way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.bd B 3
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ======================================================================
.\"
.IX Title "HTTP::Response 3"
.TH HTTP::Response 3 "libwww-perl-5.51" "2000-06-13" "User Contributed Perl Documentation"
.UC
.SH "NAME"
\&\s-1HTTP:\s0:Response \- Class encapsulating \s-1HTTP\s0 Responses
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& require HTTP::Response;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The \f(CW\*(C`HTTP::Response\*(C'\fR class encapsulates \s-1HTTP\s0 style responses.  A
response consists of a response line, some headers, and (potentially
empty) content. Note that the \s-1LWP\s0 library also uses \s-1HTTP\s0 style
responses for non-HTTP protocol schemes.
.PP
Instances of this class are usually created and returned by the
\&\f(CW\*(C`request()\*(C'\fR method of an \f(CW\*(C`LWP::UserAgent\*(C'\fR object:
.PP
.Vb 7
\& #...
\& $response = $ua->request($request)
\& if ($response->is_success) {
\&     print $response->content;
\& } else {
\&     print $response->error_as_HTML;
\& }
.Ve
\&\f(CW\*(C`HTTP::Response\*(C'\fR is a subclass of \f(CW\*(C`HTTP::Message\*(C'\fR and therefore
inherits its methods.  The inherited methods most often used are \fIheader()\fR,
\&\fIpush_header()\fR, \fIremove_header()\fR, \fIheaders_as_string()\fR, and \fIcontent()\fR.
The header convenience methods are also available.  See
the HTTP::Message manpage for details.
.PP
The following additional methods are available:
.Ip "$r = \s-1HTTP:\s0:Response->new($rc, [$msg, [$header, [$content]]])" 4
.IX Item "$r = HTTP::Response->new($rc, [$msg, [$header, [$content]]])"
Constructs a new \f(CW\*(C`HTTP::Response\*(C'\fR object describing a response with
response code \f(CW\*(C`$rc\*(C'\fR and optional message \f(CW\*(C`$msg\*(C'\fR.  The message is a
short human readable single line string that explains the response
code.
.Ip "$r->code([$code])" 4
.IX Item "$r->code([$code])"
.PD 0
.Ip "$r->message([$message])" 4
.IX Item "$r->message([$message])"
.Ip "$r->request([$request])" 4
.IX Item "$r->request([$request])"
.Ip "$r->previous([$previousResponse])" 4
.IX Item "$r->previous([$previousResponse])"
.PD
These methods provide public access to the object attributes.  The
first two contain respectively the response code and the message
of the response.
.Sp
The request attribute is a reference the request that caused this
response.  It does not have to be the same request as passed to the
\&\f(CW$ua\fR->\fIrequest()\fR method, because there might have been redirects and
authorization retries in between.
.Sp
The previous attribute is used to link together chains of responses.
You get chains of responses if the first response is redirect or
unauthorized.
.Ip "$r->status_line" 4
.IX Item "$r->status_line"
Returns the string "<code> <message>".  If the message attribute
is not set then the official name of <code> (see the HTTP::Status manpage)
is substituted.
.Ip "$r->base" 4
.IX Item "$r->base"
Returns the base \s-1URI\s0 for this response.  The return value will be a
reference to a \s-1URI\s0 object.
.Sp
The base \s-1URI\s0 is obtained from one the following sources (in priority
order):
.RS 4
.Ip "1." 4
Embedded in the document content, for instance <\s-1BASE\s0 HREF=\*(L"...\*(R">
in \s-1HTML\s0 documents.
.Ip "2." 4
A \*(L"Content-Base:\*(R" or a \*(L"Content-Location:\*(R" header in the response.
.Sp
For backwards compatability with older \s-1HTTP\s0 implementations we will
also look for the \*(L"Base:\*(R" header.
.Ip "3." 4
The \s-1URI\s0 used to request this response. This might not be the original
\&\s-1URI\s0 that was passed to \f(CW$ua\fR->\fIrequest()\fR method, because we might have
received some redirect responses first.
.RE
.RS 4
.Sp
When the \s-1LWP\s0 protocol modules produce the \s-1HTTP:\s0:Response object, then
any base \s-1URI\s0 embedded in the document (step 1) will already have
initialized the \*(L"Content-Base:\*(R" header. This means that this method
only performs the last 2 steps (the content is not always available
either).
.RE
.Ip "$r->as_string" 4
.IX Item "$r->as_string"
Returns a textual representation of the response.  Mainly
useful for debugging purposes. It takes no arguments.
.Ip "$r->is_info" 4
.IX Item "$r->is_info"
.PD 0
.Ip "$r->is_success" 4
.IX Item "$r->is_success"
.Ip "$r->is_redirect" 4
.IX Item "$r->is_redirect"
.Ip "$r->is_error" 4
.IX Item "$r->is_error"
.PD
These methods indicate if the response was informational, sucessful, a
redirection, or an error.
.Ip "$r->\fIerror_as_HTML()\fR" 4
.IX Item "$r->error_as_HTML()"
Returns a string containing a complete \s-1HTML\s0 document indicating what
error occurred.  This method should only be called when \f(CW$r\fR->is_error
is \s-1TRUE\s0.
.Ip "$r->current_age" 4
.IX Item "$r->current_age"
Calculates the \*(L"current age\*(R" of the response as
specified by <draft-ietf-http-v11\-spec-07> section 13.2.3.  The
age of a response is the time since it was sent by the origin server.
The returned value is a number representing the age in seconds.
.Ip "$r->freshness_lifetime" 4
.IX Item "$r->freshness_lifetime"
Calculates the \*(L"freshness lifetime\*(R" of the response
as specified by <draft-ietf-http-v11\-spec-07> section 13.2.4.  The
\&\*(L"freshness lifetime\*(R" is the length of time between the generation of a
response and its expiration time.  The returned value is a number
representing the freshness lifetime in seconds.
.Sp
If the response does not contain an \*(L"Expires\*(R" or a \*(L"Cache-Control\*(R"
header, then this function will apply some simple heuristic based on
\&'Last-Modified' to determine a suitable lifetime.
.Ip "$r->is_fresh" 4
.IX Item "$r->is_fresh"
Returns \s-1TRUE\s0 if the response is fresh, based on the values of
\&\fIfreshness_lifetime()\fR and \fIcurrent_age()\fR.  If the response is no longer
fresh, then it has to be refetched or revalidated by the origin
server.
.Ip "$r->fresh_until" 4
.IX Item "$r->fresh_until"
Returns the time when this entiy is no longer fresh.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright 1995\-1997 Gisle Aas.
.PP
This library is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
