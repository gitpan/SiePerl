.\" Automatically generated by Pod::Man version 1.15
.\" Mon Apr 23 08:21:03 2001
.\"
.\" Standard preamble:
.\" ======================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R

.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used
.\" to do unbreakable dashes and therefore won't be available.  \*(C` and
.\" \*(C' expand to `' in nroff, nothing in troff, for use with C<>
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr
.\" for titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and
.\" index entries marked with X<> in POD.  Of course, you'll have to process
.\" the output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it
.\" makes way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.bd B 3
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ======================================================================
.\"
.IX Title "Class::Fields 3"
.TH Class::Fields 3 "perl v5.6.1" "2000-12-14" "User Contributed Perl Documentation"
.UC
.SH "NAME"
Class::Fields \- Inspect the fields of a class.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use Class::Fields;
.Ve
.Vb 5
\&    is_field    ($class, $field);
\&    is_public   ($class, $field);
\&    is_private  ($class, $field);
\&    is_protected($class, $field);
\&    is_inherited($class, $field);
.Ve
.Vb 1
\&    @fields = show_fields($class, @attribs);
.Ve
.Vb 2
\&    $attrib     = field_attrib_mask($class, $field);
\&    @attribs    = field_attribs($class, $field);
.Ve
.Vb 1
\&    dump_all_attribs(@classes);
.Ve
.Vb 3
\&    # All functions also work as methods.
\&    package Foo;
\&    use base qw( Class::Fields );
.Ve
.Vb 3
\&    Foo->is_public($field);
\&    @fields = Foo->show_fields(@attribs);
\&    # ...etc...
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
A collection of utility functions/methods for examining the data
members of a class.  It provides a nice, high-level interface that
should stand the test of time and Perl upgrades nicely.
.PP
The functions in this module also serve double-duty as methods and can
be used that way by having your module inherit from it.  For example:
.PP
.Vb 3
\&    package Foo;
\&    use base qw( Class::Fields );
\&    use fields qw( this that _whatever );
.Ve
.Vb 2
\&    print "'_whatever' is a private data member of 'Foo'" if
\&        Foo->is_private('_whatever');
.Ve
.Vb 4
\&    # Let's assume we have a new() method defined for Foo, okay?
\&    $obj = Foo->new;
\&    print "'this' is a public data member of 'Foo'" if
\&        $obj->is_public('this');
.Ve
.Ip "\fBis_field\fR" 4
.IX Item "is_field"
.Vb 2
\&  is_field($class, $field);
\&  $class->is_field($field);
.Ve
Simply asks if a given \f(CW$class\fR has the given \f(CW$field\fR defined in it.
.Ip "\fBis_public\fR" 4
.IX Item "is_public"
.PD 0
.Ip "\fBis_private\fR" 4
.IX Item "is_private"
.Ip "\fBis_protected\fR" 4
.IX Item "is_protected"
.Ip "\fBis_inherited\fR" 4
.IX Item "is_inherited"
.PD
.Vb 7
\&  is_public($class, $field);
\&  is_private($class, $field);
\&  ...etc...
\&        or
\&  $obj->is_public($field);
\&        or
\&  Class->is_public($field);
.Ve
A bunch of functions to quickly check if a given \f(CW$field\fR in a given \f(CW$class\fR
is of a given type.  For example...
.Sp
.Vb 3
\&  package Foo;
\&  use public  qw( Ford   );
\&  use private qw( _Nixon );
.Ve
.Vb 2
\&  package Bar;
\&  use base qw(Foo);
.Ve
.Vb 5
\&  # This will print only 'Ford is public' because Ford is a public
\&  # field of the class Bar.  _Nixon is a private field of the class
\&  # Foo, but it is not inherited.
\&  print 'Ford is public'        if is_public('Bar', 'Ford');
\&  print '_Nixon is inherited'   if is_inherited('Foo', '_Nixon');
.Ve
.Ip "\fBshow_fields\fR" 4
.IX Item "show_fields"
.Vb 8
\&  @all_fields   = show_fields($class);
\&  @fields       = show_fields($class, @attribs);
\&        or
\&  @all_fields   = $obj->show_fields;
\&  @fields       = $obj->show_fields(@attribs);
\&        or
\&  @all_fields   = Class->show_fields;
\&  @fields       = Class->show_fields(@attribs);
.Ve
This will list all fields in a given \f(CW$class\fR that have the given set of
\&\f(CW@attribs\fR.  If \f(CW@attribs\fR is not given it will simply list all fields.
.Sp
The currently available attributes are:
    Public, Private, Protected and Inherited
.Sp
For example:
.Sp
.Vb 2
\&    package Foo;
\&    use fields qw(this that meme);
.Ve
.Vb 3
\&    package Bar;
\&    use base qw(Foo);
\&    use fields qw(salmon);
.Ve
.Vb 4
\&    # @fields contains 'that' and 'meme' since they are Public and
\&    # Inherited.  It doesn't contain 'salmon' since while it is
\&    # Public it is not Inherited.
\&    @fields = show_fields('Bar', qw(Private Inherited));
.Ve
.Ip "\fBfield_attrib_mask\fR" 4
.IX Item "field_attrib_mask"
.Vb 5
\&  $attrib = field_attrib_mask($class, $field);
\&        or
\&  $attrib = $obj->field_attrib_mask($field);
\&        or
\&  $attrib = Class->field_attrib_mask($field);
.Ve
It will tell you the numeric attribute for the given \f(CW$field\fR in the
given \f(CW$class\fR.  \f(CW$attrib\fR is a bitmask which must be interpreted with
the \s-1PUBLIC\s0, \s-1PRIVATE\s0, etc... constants from Class::Fields::Attrib.
.Sp
\&\fIfield_attribs()\fR is probably easier to work with in general.
.Ip "\fBfield_attribs\fR" 4
.IX Item "field_attribs"
.Vb 5
\&  @attribs = field_attribs($class, $field);
\&        or
\&  @attribs = $obj->field_attribs($field);
\&        or
\&  @attribs = Class->field_attribs($field);
.Ve
Exactly the same as \fIfield_attrib_mask()\fR, except that instead of
returning a bitmask it returns a somewhat friendlier list of
attributes which are applied to this field.  For example...
.Sp
.Vb 2
\&  package Foo;
\&  use fields qw( yarrow );
.Ve
.Vb 2
\&  package Bar;
\&  use base qw(Foo);
.Ve
.Vb 2
\&  # @attribs will contain 'Public' and 'Inherited'
\&  @attribs = field_attribs('Bar', 'yarrow');
.Ve
The attributes returned are the same as those taken by \fIshow_fields()\fR.
.Ip "\fBdump_all_attribs\fR" 4
.IX Item "dump_all_attribs"
.Vb 6
\&  dump_all_attribs;
\&  dump_all_attribs(@classes);
\&        or
\&  Class->dump_all_attribs;
\&        or
\&  $obj->dump_all_attribs;
.Ve
A debugging tool which simply prints to \s-1STDERR\s0 everything it can about
a given set of \f(CW@classes\fR in a relatively formated manner.
.Sp
Alas, this function works slightly differently if used as a function
as opposed to a method:
.Sp
When called as a function it will print out attribute information
about all \f(CW@classes\fR given.  If no \f(CW@classes\fR are given it will print out
the attributes of \-every- class it can find that has attributes.
.Sp
When uses as a method, it will print out attribute information for the
class or object which uses the method.  No arguments are accepted.
.Sp
I'm not entirely happy about this split and I might change it in the
future.
.SH "EXAMPLES"
.IX Header "EXAMPLES"
Neat tricks that can be done with this module:
.RS 4
.Ip "An integrity check for your object." 4
.IX Item "An integrity check for your object."
Upon destruction, check to make sure no strange keys were added to
your object hash.  This is a nice check against typos and other
modules sticking their dirty little fingers where they shouldn't be
if you're not using a pseudo-hash.
.Sp
.Vb 3
\&    sub DESTROY {
\&        my($self) = @_;
\&        my($class) = ref $self;
.Ve
.Vb 7
\&        my %fields = map { ($_,1) } $self->show_fields;
\&        foreach my $key ( keys %$self ) {
\&            warn "Strange key '$key' found in object '$self' ".
\&                  "of class '$class'" unless
\&                exists $fields{$key};
\&        }
\&    }
.Ve
.Ip "Autoloaded accessors for public data members." 4
.IX Item "Autoloaded accessors for public data members."
Proper \s-1OO\s0 dogma tells you to do all public data access through
accessors (methods who's sole purpose is to get and set data in your
object).  This can be a royal pain in the ass to write and can also
get rapidly unmaintainable since you wind up with a series of nearly
identical methods.
.Sp
*Perfect* for an autoloader!
.Sp
.Vb 4
\&    package Test::Autoload::Example;
\&    use base qw(Class::Fields);
\&    use public qw(this that up down);
\&    use private qw(_left _right);
.Ve
.Vb 3
\&    sub AUTOLOAD {
\&        my $self = $_[0];
\&        my $class = ref $self;
.Ve
.Vb 1
\&        my($field) = $AUTOLOAD =~ /::([^:]+)$/;
.Ve
.Vb 1
\&        return if $field eq 'DESTROY';
.Ve
.Vb 15
\&        # If its a public field, set up a named closure as its
\&        # data accessor.
\&        if ( $self->is_public($field) ) {
\&            *{$class."::$field"} = sub {
\&                my($self) = shift;
\&                if (@_) {
\&                    $self->{$field} = shift;
\&                }
\&                return $self->{$field};
\&            };
\&            goto &{$class."::$field"};
\&        } else {
\&            die "'$field' is not a public data member of '$class'";
\&        }
\&    }
.Ve
the EXAMPLES entry in the Class::Accessor manpage for a much simpler version of this same
technique.
.RE
.RS 4
.SH "AUTHOR"
.IX Header "AUTHOR"
Michael G Schwern <schwern@pobox.com> with much code liberated from the
original fields.pm.
.SH "THANKS"
.IX Header "THANKS"
Thanks to Tels for his big feature request/bug report.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
the fields manpage, the public manpage, the private manpage, the protected manpage
.Sp
Modules with similar effects...
the Tie::SecureHash manpage, the Class::Contract manpage
