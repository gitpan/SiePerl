.\" Automatically generated by Pod::Man version 1.15
.\" Fri Apr 20 15:24:04 2001
.\"
.\" Standard preamble:
.\" ======================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R

.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used
.\" to do unbreakable dashes and therefore won't be available.  \*(C` and
.\" \*(C' expand to `' in nroff, nothing in troff, for use with C<>
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr
.\" for titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and
.\" index entries marked with X<> in POD.  Of course, you'll have to process
.\" the output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it
.\" makes way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.bd B 3
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ======================================================================
.\"
.IX Title "Date 3"
.TH Date 3 "perl v5.6.1" "2001-02-23" "User Contributed Perl Documentation"
.UC
.SH "NAME"
Tk::Date \- a date/time widget for perl/Tk
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&    use Tk::Date;
\&    $date_widget = $top->Date->pack;
\&    $date_widget->get("%x %X");
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Tk::Date implements a date/time widget. There are three ways to input
a date:
.Ip "\(bu Using the keyboard to input the digits and the tab key or the mouse pointer to move focus between fields." 4
.IX Item "Using the keyboard to input the digits and the tab key or the mouse pointer to move focus between fields."
.PD 0
.Ip "\(bu Using up and down cursor keys to increment/decrement the date (only with installed Tk::NumEntryPlain widget)." 4
.IX Item "Using up and down cursor keys to increment/decrement the date (only with installed Tk::NumEntryPlain widget)."
.Ip "\(bu Selecting up and down arrow buttons will increment or decrement the value of the active field (only with installed Tk::FireButton widget)." 4
.IX Item "Selecting up and down arrow buttons will increment or decrement the value of the active field (only with installed Tk::FireButton widget)."
.PD
.Sh "The Date/Time Format"
.IX Subsection "The Date/Time Format"
Unlike Java, Perl does not have a date/time object. However, it is
possible to use the unix time (seconds since epoch, that is 1st
January 1970) as a replacement. This is limited, since on most
architectures, the valid range is between 14th December 1901 and 19th
January 2038. For other dates, it is possible to use a hash notation:
.PP
.Vb 6
\&    { y => year,
\&      m => month,
\&      d => day,
\&      H => hour,
\&      M => minute,
\&      S => second }
.Ve
The abbreviations are derivated from the format letters of strftime.
Note that year is the full year (1998 instead of 98) and month is the
real month number, as opposed to the output of \fIlocaltime()\fR, where the
month is subtracted by one.
.PP
In this document, the first method will be referred as \fBunixtime\fR and
the second method as \fBdatehash\fR.
.SH "STANDARD OPTIONS"
.IX Header "STANDARD OPTIONS"
Tk::Date descends from Frame and inherits all of its options.
.Ip "\-orient" 4
.IX Item "-orient"
Specified orientation of the increment and decrements buttons. May be
vertical (default) or horizontal.
.SH "WIDGET-SPECIFIC OPTIONS"
.IX Header "WIDGET-SPECIFIC OPTIONS"
Some options are only available if the prerequisite modules from the
Tk-GBARR distribution are installed too.
.Ip "\-allarrows" 4
.IX Item "-allarrows"
If true then all entry fields will obtain arrows. Otherwise only one
arrow pair for each date and time will be drawn. This option can be
set only while creating the widget. This option needs the Tk::NumEntry
widget to be installed.
.Ip "\-bell" 4
.IX Item "-bell"
Specifies a boolean value. If true then a bell will ring if the user
attempts to enter an illegal character (e.g. a non-digit).
.Ip "\-check" 4
.IX Item "-check"
If set to a true value, Tk::Date makes sure that the user can't input
incorrect dates. This option can be set only while creating the
widget.
.Ip "\-choices" 4
.IX Item "-choices"
Creates an additional choice button. The argument to \fI\-choices\fR must
be one of \f(CW\*(C`now\*(C'\fR, \f(CW\*(C`today\*(C'\fR, \f(CW\*(C`yesterday\*(C'\fR or \f(CW\*(C`tomorrow\*(C'\fR, or an array
with a combination of those. If only one is used, only a simple button
is created, otherwise an optionmenu. This option can be set only while
creating the widget.
.Sp
Examples:
.Sp
.Vb 2
\&        -choices => 'now'
\&        -choices => ['today', 'yesterday', 'tomorrow']
.Ve
It is possible to specify user-defined values. User-defined values
should be defined as array elements with two elements. The first element
is the label for the button or optionmenu entry. The second element
specifies the time associated with this value. It may be either a date
hash (missing values are set to the current date) or a subroutine which
calculates unix seconds.
.Sp
Here are two examples. The first defines an additional optionmenu
entry for this year's christmas and the second defines an entry for
the day before yesterday.
.Sp
.Vb 7
\&        -choices => ['today',
\&                     ['christmas' => { 'm' => 12, 'd' => 25}]
\&                    ]
\&        -choices => ['today',
\&                     'yesterday',
\&                     ['the day before yesterday' => sub { time()-86400*2 }]
\&                    ]
.Ve
.Ip "\-command" 4
.IX Item "-command"
Specifies a callback which is executed every time after an arrow
button is selected. The callback is called with the following
arguments: reference of date widget, field specifier, increment value.
The field specifier is either \*(L"date\*(R" or \*(L"time\*(R" or one of \*(L"H\*(R", \*(L"M\*(R",
\&\*(L"S\*(R", \*(L"d\*(R", \*(L"m\*(R", \*(L"y\*(R" for the possible time and date fields.
.Ip "\-datefmt" 4
.IX Item "-datefmt"
This is a sprintf/printf-like format string for setting the order and
format of the date entries. By default, the format string is
\&\*(L"%2d.%2m.%4y\*(R" meaning a two-character wide day entry, followed by a
dot, followed by a two-character wide month entry, another dot, and
finally a four-character wide year entry. The characters are the same
as in the strftime function (see the POSIX manpage). It is also possible to use
the 'A' letter for displaying the (localized) weekday name. See below
in the \s-1EXAMPLES\s0 section for a more US-like date format. This option
can be set only while creating the widget.
.Ip "\-decbitmap" 4
.IX Item "-decbitmap"
Sets the bitmap for the decrease button. Defaults to FireButton's default
decrease bitmap.
.Ip "\-editable" 4
.IX Item "-editable"
If set to a false value, disables editing of the date widget. All
entries are converted to labels and there are no arrow buttons.
Defaults to true (widget is editable). This option can be set only
while creating the widget.
.Ip "\-fields" 4
.IX Item "-fields"
Specifies which fields are constructed: date, time or both. Defaults
to both. This option can be set only while creating the widget.
.Ip "\-incbitmap" 4
.IX Item "-incbitmap"
Sets the bitmap for the increase button. Defaults to FireButton's default
increase bitmap.
.Ip "\-monthmenu" 4
.IX Item "-monthmenu"
Use an optionmenu for input of the month.
.Ip "\-monthnames" 4
.IX Item "-monthnames"
Replace the standard month names (either English or as supplied by
the locale system) with a user-defined array. The argument should be a
reference to a hash with 12 elements.
.Ip "\-precommand" 4
.IX Item "-precommand"
Specifies a callback which is executed every time when an arrow button
is selected and before actually execute the increment or decrement
command. The callback is called with following arguments: date widget,
type (either \f(CW\*(C`date\*(C'\fR or \f(CW\*(C`time\*(C'\fR) and increment (+1 or \-1). If the
callback returns with a false value, the increment or decrement
command will not be executed.
.Ip "\-repeatinterval" 4
.IX Item "-repeatinterval"
Specifies the amount of time between invokations of the increment or
decrement. Defaults to 50 milliseconds.
.Ip "\-repeatdelay" 4
.IX Item "-repeatdelay"
Specifies the amount of time before the increment or decrement is first done
after the Button-1 is pressed over the widget. Defaults to 500 milliseconds.
.Ip "\-timefmt" 4
.IX Item "-timefmt"
This is a sprintf/printf-like format string for setting the order and
format of the time entries. By default, the format string is
\&\*(L"%2H.%2M.%2S\*(R" meaning a two-character wide hour entry, followed by a
dot, followed by a two-character wide minute entry, another dot, and
finally a two-character wide seconds entry. The characters are the
same as in the strftime function (see the POSIX manpage). This option can be
set only while creating the widget.
.Ip "\-selectlabel" 4
.IX Item "-selectlabel"
Change label text for choice menu. Defaults to 'Select:'. This option
can be set only while creating the widget.
.Ip "\-value" 4
.IX Item "-value"
Sets an initial value for the widget. The argument may be \fBunixtime\fR,
\&\fBdatehash\fR or \fBnow\fR (for the current time).
.Ip "\-varfmt" 4
.IX Item "-varfmt"
Specifies the format of the \fI\-variable\fR or \fI\-value\fR argument. May be
\&\fBunixtime\fR (default) or \fBdatehash\fR. This option can be set only
while creating the widget.
.Ip "\-variable" 4
.IX Item "-variable"
Ties the specified variable to the widget. (See Bugs)
.Ip "\-weekdays" 4
.IX Item "-weekdays"
Replace the standard weekday names (either English or as supplied by
the locale system) with a user-defined array. The argument should be a
reference to a hash with seven elements. The names have to start with
Sunday.
.SH "METHODS"
.IX Header "METHODS"
The \fBDate\fR widget supports the following non-standard method:
.Ip "\fBget\fR([\fIfmt\fR])" 4
.IX Item "get([fmt])"
Gets the current value of the date widget. If \fIfmt\fR is not given or
equal \*(L"%s\*(R", the returned value is in unix time (seconds since epoch).
This should work on all systems.
.Sp
Otherwise, \fIfmt\fR is a format string which is fed to \fBstrftime\fR.
\&\fBstrftime\fR needs the POSIX module installed and therefore
may not work on all systems.
.SH "EXAMPLES"
.IX Header "EXAMPLES"
Display a date widget with only the date field in the format dd/mm/yyyy
and get the value in the same format:
.PP
.Vb 6
\&  $date = $top->Date(-datefmt => '%2d/%2m/%4y',
\&                     -fields => 'date',
\&                     -value => 'now')->pack;
\&  # this "get" only works for systems with POSIX.pm
\&  $top->Button(-text => 'Get date',
\&               -command => sub { warn $date->get("%d/%m/%Y") })->pack;
.Ve
Use the datehash format instead of unixtime:
.PP
.Vb 4
\&  $top->Date(-fields  => 'date',
\&             -value   => {'d' => '13', 'm' => '12', 'y' => '1957'},
\&             -varfmt => 'datehash',
\&            )->pack;
.Ve
.SH "NOTES"
.IX Header "NOTES"
Please note that the full set of features only available, if the
Tk-GBARR distribution is also installed. However, the widget also
works without this distribution, only lacking the arrow buttons.
.PP
If the \s-1POSIX\s0 module is available, localised weekday and month names
will be used instead of English names. Otherwise you have to use the
\&\-weekday and \-monthnames options.
.SH "BUGS/TODO"
.IX Header "BUGS/TODO"
.Vb 2
\& - The -orient option can be only set while creating the widget. Also
\&   other options are only settable at create time.
.Ve
.Vb 13
\& - waiting for a real perl Date/Time object
\& - tie interface (-variable) does not work if the date widget gets destroyed
\&   (see uncommented DESTROY)
\& - get and set must use the tied variable, otherwise tieying does no work
\&   at all
\& - -from/-to is missing (limit) (or -minvalue, -maxvalue?)
\& - range check (in DateNumEntryPlain::incdec)
\& - am/pm
\& - more interactive examples are needed for some design issues (how strong
\&   signal errors? ...)
\& - check date-Function
\& - optionally use Tk::DateEntry for the date part
\& - -command is not fully implemented
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Tk, Tk::NumEntryPlain,
Tk::FireButton, POSIX
.SH "AUTHOR"
.IX Header "AUTHOR"
Slaven Rezic <eserte@cs.tu-berlin.de>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 1997, 1998, 1999, 2000 Slaven Rezic. All rights
reserved. This module is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
