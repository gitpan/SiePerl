.\" Automatically generated by Pod::Man version 1.15
.\" Mon Apr 23 13:01:51 2001
.\"
.\" Standard preamble:
.\" ======================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R

.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used
.\" to do unbreakable dashes and therefore won't be available.  \*(C` and
.\" \*(C' expand to `' in nroff, nothing in troff, for use with C<>
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr
.\" for titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and
.\" index entries marked with X<> in POD.  Of course, you'll have to process
.\" the output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it
.\" makes way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.bd B 3
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ======================================================================
.\"
.IX Title "HTTP::Message 3"
.TH HTTP::Message 3 "libwww-perl-5.51" "1998-11-19" "User Contributed Perl Documentation"
.UC
.SH "NAME"
\&\s-1HTTP:\s0:Message \- Class encapsulating \s-1HTTP\s0 messages
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\& package HTTP::Request;  # or HTTP::Response
\& require HTTP::Message;
\& @ISA=qw(HTTP::Message);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
A \f(CW\*(C`HTTP::Message\*(C'\fR object contains some headers and a content (body).
The class is abstract, i.e. it only used as a base class for
\&\f(CW\*(C`HTTP::Request\*(C'\fR and \f(CW\*(C`HTTP::Response\*(C'\fR and should never instantiated
as itself.
.PP
The following methods are available:
.Ip "$mess = new \s-1HTTP:\s0:Message;" 4
.IX Item "$mess = new HTTP::Message;"
This is the object constructor.  It should only be called internally
by this library.  External code should construct \f(CW\*(C`HTTP::Request\*(C'\fR or
\&\f(CW\*(C`HTTP::Response\*(C'\fR objects.
.Ip "$mess->\fIclone()\fR" 4
.IX Item "$mess->clone()"
Returns a copy of the object.
.Ip "$mess->protocol([$proto])" 4
.IX Item "$mess->protocol([$proto])"
Sets the \s-1HTTP\s0 protocol used for the message.  The \fIprotocol()\fR is a string
like \*(L"\s-1HTTP/1\s0.0\*(R" or \*(L"\s-1HTTP/1\s0.1\*(R".
.Ip "$mess->content([$content])" 4
.IX Item "$mess->content([$content])"
The \fIcontent()\fR method sets the content if an argument is given.  If no
argument is given the content is not touched.  In either case the
previous content is returned.
.Ip "$mess->add_content($data)" 4
.IX Item "$mess->add_content($data)"
The \fIadd_content()\fR methods appends more data to the end of the previous
content.
.Ip "$mess->content_ref" 4
.IX Item "$mess->content_ref"
The \fIcontent_ref()\fR method will return a reference to content string.
It can be more efficient to access the content this way if the content
is huge, and it can be used for direct manipulation of the content,
for instance:
.Sp
.Vb 1
\&  ${$res->content_ref} =~ s/\ebfoo\eb/bar/g;
.Ve
.Ip "$mess->headers;" 4
.IX Item "$mess->headers;"
Return the embedded \s-1HTTP:\s0:Headers object.
.Ip "$mess->headers_as_string([$endl])" 4
.IX Item "$mess->headers_as_string([$endl])"
Call the \s-1HTTP:\s0:Headers->\fIas_string()\fR method for the headers in the
message.
.PP
All unknown \f(CW\*(C`HTTP::Message\*(C'\fR methods are delegated to the
\&\f(CW\*(C`HTTP::Headers\*(C'\fR object that is part of every message.  This allows
convenient access to these methods.  Refer to the HTTP::Headers manpage for
details of these methods:
.PP
.Vb 4
\&  $mess->header($field => $val);
\&  $mess->scan(\e&doit);
\&  $mess->push_header($field => $val);
\&  $mess->remove_header($field);
.Ve
.Vb 19
\&  $mess->date;
\&  $mess->expires;
\&  $mess->if_modified_since;
\&  $mess->if_unmodified_since;
\&  $mess->last_modified;
\&  $mess->content_type;
\&  $mess->content_encoding;
\&  $mess->content_length;
\&  $mess->content_language
\&  $mess->title;
\&  $mess->user_agent;
\&  $mess->server;
\&  $mess->from;
\&  $mess->referer;
\&  $mess->www_authenticate;
\&  $mess->authorization;
\&  $mess->proxy_authorization;
\&  $mess->authorization_basic;
\&  $mess->proxy_authorization_basic;
.Ve
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright 1995\-1997 Gisle Aas.
.PP
This library is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
