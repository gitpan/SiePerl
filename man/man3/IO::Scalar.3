.\" Automatically generated by Pod::Man version 1.15
.\" Tue Jun 12 10:58:13 2001
.\"
.\" Standard preamble:
.\" ======================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R

.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used
.\" to do unbreakable dashes and therefore won't be available.  \*(C` and
.\" \*(C' expand to `' in nroff, nothing in troff, for use with C<>
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr
.\" for titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and
.\" index entries marked with X<> in POD.  Of course, you'll have to process
.\" the output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it
.\" makes way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.bd B 3
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ======================================================================
.\"
.IX Title "IO::Scalar 3"
.TH IO::Scalar 3 "perl v5.6.1" "2001-04-04" "User Contributed Perl Documentation"
.UC
.SH "NAME"
\&\s-1IO:\s0:Scalar \- \s-1IO::\s0 interface for reading/writing a scalar
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
If you have any Perl5, you can use the basic \s-1OO\s0 interface...
.PP
.Vb 1
\&    use IO::Scalar;
.Ve
.Vb 3
\&    ### Open a handle on a string:
\&    $SH = new IO::Scalar;
\&    $SH->open(\e$somestring);
.Ve
.Vb 4
\&    ### Open a handle on a string, read it line-by-line, then close it:
\&    $SH = new IO::Scalar \e$somestring;
\&    while ($_ = $SH->getline) { print "Line: $_" }
\&    $SH->close;
.Ve
.Vb 3
\&    ### Open a handle on a string, and slurp in all the lines:
\&    $SH = new IO::Scalar \e$somestring;
\&    print $SH->getlines;
.Ve
.Vb 3
\&    ### Open a handle on a string, and append to it:
\&    $SH = new IO::Scalar \e$somestring
\&    $SH->print("bar\en");        ### will add "bar\en" to the end
.Ve
.Vb 2
\&    ### Get the current position:
\&    $pos = $SH->getpos;         ### $SH->tell() also works
.Ve
.Vb 2
\&    ### Set the current position:
\&    $SH->setpos($pos);          ### $SH->seek(POS,WHENCE) also works
.Ve
.Vb 4
\&    ### Open an anonymous temporary scalar:
\&    $SH = new IO::Scalar;
\&    $SH->print("Hi there!");
\&    print "I got: ", ${$SH->sref}, "\en";      ### get at value
.Ve
If your Perl is 5.004 or later, you can use the \s-1TIEHANDLE\s0
interface, and read/write scalars just like files:
.PP
.Vb 1
\&    use IO::Scalar;
.Ve
.Vb 5
\&    ### Writing to a scalar...
\&    my $s; 
\&    tie *OUT, 'IO::Scalar', \e$s;
\&    print OUT "line 1\enline 2\en", "line 3\en";
\&    print "s is now... $s\en"
.Ve
.Vb 5
\&    ### Reading and writing an anonymous scalar... 
\&    tie *OUT, 'IO::Scalar';
\&    print OUT "line 1\enline 2\en", "line 3\en";
\&    tied(OUT)->seek(0,0);
\&    while (<OUT>) { print "LINE: ", $_ }
.Ve
Stringification now works, too!
.PP
.Vb 4
\&    my $SH = new IO::Scalar \e$somestring;
\&    $SH->print("Hello, ");
\&    $SH->print("world!");
\&    print "I've got: <$SH>\en";
.Ve
You can also make the objects sensitive to the $/ setting,
just like \s-1IO:\s0:Handle wants them to be:
.PP
.Vb 5
\&    my $SH = new IO::Scalar \e$somestring;
\&    $SH->use_RS(1);           ### perlvar's short name for $/
\&    ...
\&    local $/ = "";            ### read paragraph-at-a-time
\&    $nextpar = $SH->getline;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This class implements objects which behave just like FileHandle
(or \s-1IO:\s0:Handle) objects, except that you may use them to write to
(or read from) scalars.  They can be tiehandle'd as well.  
.PP
Basically, this:
.PP
.Vb 4
\&    my $s;
\&    $SH = new IO::Scalar \e$s;
\&    $SH->print("Hel", "lo, ");         # OO style
\&    $SH->print("world!\en");            # ditto
.Ve
Or this (if you have 5.004 or later):
.PP
.Vb 4
\&    my $s;
\&    $SH = tie *OUT, 'IO::Scalar', \e$s;
\&    print OUT "Hel", "lo, ";           # non-OO style
\&    print OUT "world!\en";              # ditto
.Ve
Or this (if you have 5.004 or later):
.PP
.Vb 4
\&    my $s;
\&    $SH = IO::Scalar->new_tie(\e$s);
\&    $SH->print("Hel", "lo, ");         # OO style...
\&    print $SH "world!\en";              # ...or non-OO style!
.Ve
Causes \f(CW$s\fR to be set to:    
.PP
.Vb 1
\&    "Hello, world!\en"
.Ve
.SH "PUBLIC INTERFACE"
.IX Header "PUBLIC INTERFACE"
.Sh "Construction"
.IX Subsection "Construction"
.Ip "new [\s-1ARGS\s0...]" 4
.IX Item "new [ARGS...]"
\&\fIClass method.\fR
Return a new, unattached scalar handle.  
If any arguments are given, they're sent to \fIopen()\fR.
.Ip "open [\s-1SCALARREF\s0]" 4
.IX Item "open [SCALARREF]"
\&\fIInstance method.\fR
Open the scalar handle on a new scalar, pointed to by \s-1SCALARREF\s0.
If no \s-1SCALARREF\s0 is given, a \*(L"private\*(R" scalar is created to hold
the file data.
.Sp
Returns the self object on success, undefined on error.
.Ip "opened" 4
.IX Item "opened"
\&\fIInstance method.\fR
Is the scalar handle opened on something?
.Ip "close" 4
.IX Item "close"
\&\fIInstance method.\fR
Disassociate the scalar handle from its underlying scalar.
Done automatically on destroy.
.Sh "Input and output"
.IX Subsection "Input and output"
.Ip "flush" 4
.IX Item "flush"
\&\fIInstance method.\fR
No-op, provided for \s-1OO\s0 compatibility.
.Ip "getc" 4
.IX Item "getc"
\&\fIInstance method.\fR
Return the next character, or undef if none remain.
.Ip "getline" 4
.IX Item "getline"
\&\fIInstance method.\fR
Return the next line, or undef on end of string.  
Can safely be called in an array context.
Currently, lines are delimited by \*(L"\en\*(R".
.Ip "getlines" 4
.IX Item "getlines"
\&\fIInstance method.\fR
Get all remaining lines.
It will \fIcroak()\fR if accidentally called in a scalar context.
.Ip "print \s-1ARGS\s0..." 4
.IX Item "print ARGS..."
\&\fIInstance method.\fR
Print \s-1ARGS\s0 to the underlying scalar.  
.Sp
\&\fBWarning:\fR Currently, this always causes a \*(L"seek to the end of the string\*(R"; 
this may change in the future.
.Ip "read \s-1BUF\s0, \s-1NBYTES\s0, [\s-1OFFSET\s0]" 4
.IX Item "read BUF, NBYTES, [OFFSET]"
\&\fIInstance method.\fR
Read some bytes from the scalar.
Returns the number of bytes actually read, 0 on end-of-file, undef on error.
.Ip "write \s-1BUF\s0, \s-1NBYTES\s0, [\s-1OFFSET\s0]" 4
.IX Item "write BUF, NBYTES, [OFFSET]"
\&\fIInstance method.\fR
Write some bytes to the scalar.
.Ip "sysread \s-1BUF\s0, \s-1LEN\s0, [\s-1OFFSET\s0]" 4
.IX Item "sysread BUF, LEN, [OFFSET]"
\&\fIInstance method.\fR
Read some bytes from the scalar.
Returns the number of bytes actually read, 0 on end-of-file, undef on error.
.Ip "syswrite \s-1BUF\s0, \s-1NBYTES\s0, [\s-1OFFSET\s0]" 4
.IX Item "syswrite BUF, NBYTES, [OFFSET]"
\&\fIInstance method.\fR
Write some bytes to the scalar.
.Sh "Seeking/telling and other attributes"
.IX Subsection "Seeking/telling and other attributes"
.Ip "autoflush" 4
.IX Item "autoflush"
\&\fIInstance method.\fR
No-op, provided for \s-1OO\s0 compatibility.
.Ip "binmode" 4
.IX Item "binmode"
\&\fIInstance method.\fR
No-op, provided for \s-1OO\s0 compatibility.
.Ip "clearerr" 4
.IX Item "clearerr"
\&\fIInstance method.\fR  Clear the error and \s-1EOF\s0 flags.  A no-op.
.Ip "eof" 4
.IX Item "eof"
\&\fIInstance method.\fR  Are we at end of file?
.Ip "seek \s-1OFFSET\s0, \s-1WHENCE\s0" 4
.IX Item "seek OFFSET, WHENCE"
\&\fIInstance method.\fR  Seek to a given position in the stream.
.Ip "sysseek \s-1OFFSET\s0, \s-1WHENCE\s0" 4
.IX Item "sysseek OFFSET, WHENCE"
\&\fIInstance method.\fR Identical to \f(CW\*(C`seek OFFSET, WHENCE\*(C'\fR, \fIq.v.\fR
.Ip "tell" 4
.IX Item "tell"
\&\fIInstance method.\fR
Return the current position in the stream, as a numeric offset.
.Ip "use_RS [\s-1YESNO\s0]" 4
.IX Item "use_RS [YESNO]"
\&\fIInstance method.\fR
Obey the curent setting of $/, like \s-1IO:\s0:Handle does?
Default is false.
.Ip "setpos \s-1POS\s0" 4
.IX Item "setpos POS"
\&\fIInstance method.\fR
Set the current position, using the opaque value returned by \f(CW\*(C`getpos()\*(C'\fR.
.Ip "getpos" 4
.IX Item "getpos"
\&\fIInstance method.\fR
Return the current position in the string, as an opaque object.
.Ip "sref" 4
.IX Item "sref"
\&\fIInstance method.\fR
Return a reference to the underlying scalar.
.SH "VERSION"
.IX Header "VERSION"
$Id: Scalar.pm,v 1.126 2001/04/04 05:37:51 eryq Exp $
.SH "AUTHORS"
.IX Header "AUTHORS"
.Sh "Principal author"
.IX Subsection "Principal author"
Eryq (\fIeryq@zeegee.com\fR).
President, ZeeGee Software Inc (\fIhttp://www.zeegee.com\fR).
.Sh "Other contributors"
.IX Subsection "Other contributors"
The full set of contributors always includes the folks mentioned
in the CHANGE LOG entry in the IO::Stringy manpage.  But just the same, special
thanks to the following individuals for their invaluable contributions
(if I've forgotten or misspelled your name, please email me!):
.PP
\&\fIAndy Glew,\fR
for contributing \f(CW\*(C`getc()\*(C'\fR.
.PP
\&\fIBrandon Browning,\fR
for suggesting \f(CW\*(C`opened()\*(C'\fR.
.PP
\&\fIDavid Richter,\fR
for finding and fixing the bug in \f(CW\*(C`PRINTF()\*(C'\fR.
.PP
\&\fIEric L. Brine,\fR
for his offset-using \fIread()\fR and \fIwrite()\fR implementations. 
.PP
\&\fIRichard Jones,\fR
for his patches to massively improve the performance of \f(CW\*(C`getline()\*(C'\fR
and add \f(CW\*(C`sysread\*(C'\fR and \f(CW\*(C`syswrite\*(C'\fR.
.PP
\&\fIB. K. Oxley (binkley),\fR
for stringification and inheritance improvements,
and sundry good ideas.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
the IO::String manpage, which is quite similar but which was designed
more-recently and with an \s-1IO:\s0:Handle-like interface in mind, 
so you can mix \s-1OO-\s0 and native-filehandle usage without using \fItied()\fR.  
\&\fINote:\fR if anyone can make \s-1IO:\s0:Scalar do that without breaking
the regression tests, I'm all ears.
