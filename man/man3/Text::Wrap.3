.\" Automatically generated by Pod::Man version 1.15
.\" Fri Apr 20 13:09:24 2001
.\"
.\" Standard preamble:
.\" ======================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R

.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used
.\" to do unbreakable dashes and therefore won't be available.  \*(C` and
.\" \*(C' expand to `' in nroff, nothing in troff, for use with C<>
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr
.\" for titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and
.\" index entries marked with X<> in POD.  Of course, you'll have to process
.\" the output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it
.\" makes way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.bd B 3
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ======================================================================
.\"
.IX Title "Text::Wrap 3"
.TH Text::Wrap 3 "perl v5.6.1" "2001-02-23" "Perl Programmers Reference Guide"
.UC
.SH "NAME"
Text::Wrap \- line wrapping to form simple paragraphs
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
\&\fBExample 1\fR
.PP
.Vb 1
\&        use Text::Wrap
.Ve
.Vb 2
\&        $initial_tab = "\et";    # Tab before first line
\&        $subsequent_tab = "";   # All other lines flush left
.Ve
.Vb 2
\&        print wrap($initial_tab, $subsequent_tab, @text);
\&        print fill($initial_tab, $subsequent_tab, @text);
.Ve
.Vb 1
\&        @lines = wrap($initial_tab, $subsequent_tab, @text);
.Ve
.Vb 1
\&        @paragraphs = fill($initial_tab, $subsequent_tab, @text);
.Ve
\&\fBExample 2\fR
.PP
.Vb 1
\&        use Text::Wrap qw(wrap $columns $huge);
.Ve
.Vb 4
\&        $columns = 132;         # Wrap at 132 characters
\&        $huge = 'die';
\&        $huge = 'wrap';
\&        $huge = 'overflow';
.Ve
\&\fBExample 3\fR
.PP
.Vb 1
\&        use Text::Wrap
.Ve
.Vb 2
\&        $Text::Wrap::columns = 72;
\&        print wrap('', '', @text);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fIText::Wrap::wrap()\fR is a very simple paragraph formatter.  It formats a
single paragraph at a time by breaking lines at word boundries.
Indentation is controlled for the first line (\f(CW\*(C`$initial_tab\*(C'\fR) and
all subsquent lines (\f(CW\*(C`$subsequent_tab\*(C'\fR) independently.  Please note: 
\&\f(CW\*(C`$initial_tab\*(C'\fR and \f(CW\*(C`$subsequent_tab\*(C'\fR are the literal strings that will
be used: it is unlikley you would want to pass in a number.
.PP
Lines are wrapped at \f(CW\*(C`$Text::Wrap::columns\*(C'\fR columns.  \f(CW\*(C`$Text::Wrap::columns\*(C'\fR
should be set to the full width of your output device.  In fact,
every resulting line will have length of no more than \f(CW\*(C`$columns \- 1\*(C'\fR.  
.PP
Beginner note: In example 2, above \f(CW\*(C`$columns\*(C'\fR is imported into
the local namespace, and set locally.  In example 3,
\&\f(CW\*(C`$Text::Wrap::columns\*(C'\fR is set in its own namespace without importing it.
.PP
When words that are longer than \f(CW\*(C`$columns\*(C'\fR are encountered, they
are broken up.  \f(CW\*(C`wrap()\*(C'\fR adds a \f(CW\*(C`"\en"\*(C'\fR at column \f(CW\*(C`$columns\*(C'\fR.
This behavior can be overridden by setting \f(CW\*(C`$huge\*(C'\fR to
\&'die' or to 'overflow'.  When set to 'die', large words will cause
\&\f(CW\*(C`die()\*(C'\fR to be called.  When set to 'overflow', large words will be
left intact.  
.PP
\&\fIText::Wrap::fill()\fR is a simple multi-paragraph formatter.  It formats
each paragraph separately and then joins them together when it's done.  It
will destory any whitespace in the original text.  It breaks text into
paragraphs by looking for whitespace after a newline.  In other respects
it acts like \fIwrap()\fR.
.PP
When called in list context, \f(CW\*(C`wrap()\*(C'\fR will return a list of lines and 
\&\f(CW\*(C`fill()\*(C'\fR will return a list of paragraphs.
.PP
Historical notes: Older versions of \f(CW\*(C`wrap()\*(C'\fR and \f(CW\*(C`fill()\*(C'\fR always 
returned strings.  Also, 'die' used to be the default value of
\&\f(CW\*(C`$huge\*(C'\fR.  Now, 'wrap' is the default value.
.SH "EXAMPLE"
.IX Header "EXAMPLE"
.Vb 2
\&        print wrap("\et","","This is a bit of text that forms 
\&                a normal book-style paragraph");
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
David Muir Sharnoff <muir@idiom.com> with help from Tim Pierce and
many many others.  
