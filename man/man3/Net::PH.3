.\" Automatically generated by Pod::Man version 1.15
.\" Mon Apr 23 12:21:31 2001
.\"
.\" Standard preamble:
.\" ======================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R

.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used
.\" to do unbreakable dashes and therefore won't be available.  \*(C` and
.\" \*(C' expand to `' in nroff, nothing in troff, for use with C<>
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr
.\" for titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and
.\" index entries marked with X<> in POD.  Of course, you'll have to process
.\" the output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it
.\" makes way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.bd B 3
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ======================================================================
.\"
.IX Title "Net::PH 3"
.TH Net::PH 3 "perl v5.6.1" "1998-07-25" "User Contributed Perl Documentation"
.UC
.SH "NAME"
Net::PH \- \s-1CCSO\s0 Nameserver Client class
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use Net::PH;
.Ve
.Vb 4
\&    $ph = Net::PH->new("some.host.name",
\&                       Port    => 105,
\&                       Timeout => 120,
\&                       Debug   => 0);
.Ve
.Vb 3
\&    if($ph) {
\&        $q = $ph->query({ field1 => "value1" },
\&                        [qw(name address pobox)]);
.Ve
.Vb 3
\&        if($q) {
\&        }
\&    }
.Ve
.Vb 1
\&    # Alternative syntax
.Ve
.Vb 3
\&    if($ph) {
\&        $q = $ph->query('field1=value1',
\&                        'name address pobox');
.Ve
.Vb 3
\&        if($q) {
\&        }
\&    }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\f(CW\*(C`Net::PH\*(C'\fR is a class implementing a simple Nameserver/PH client in Perl
as described in the \s-1CCSO\s0 Nameserver \*(-- Server-Client Protocol. Like other
modules in the Net:: family the \f(CW\*(C`Net::PH\*(C'\fR object inherits methods from
\&\f(CW\*(C`Net::Cmd\*(C'\fR.
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
.Ip "new ( [ \s-1HOST\s0 ] [, \s-1OPTIONS\s0 ])" 4
.IX Item "new ( [ HOST ] [, OPTIONS ])"
.Vb 5
\&    $ph = Net::PH->new("some.host.name",
\&                       Port    => 105,
\&                       Timeout => 120,
\&                       Debug   => 0
\&                      );
.Ve
This is the constructor for a new Net::PH object. \f(CW\*(C`HOST\*(C'\fR is the
name of the remote host to which a \s-1PH\s0 connection is required.
.Sp
If \f(CW\*(C`HOST\*(C'\fR is not given, then the \f(CW\*(C`SNPP_Host\*(C'\fR specified in \f(CW\*(C`Net::Config\*(C'\fR
will be used.
.Sp
\&\f(CW\*(C`OPTIONS\*(C'\fR is an optional list of named options which are passed in
a hash like fashion, using key and value pairs. Possible options are:\-
.Sp
\&\fBPort\fR \- Port number to connect to on remote host.
.Sp
\&\fBTimeout\fR \- Maximum time, in seconds, to wait for a response from the
Nameserver, a value of zero will cause all \s-1IO\s0 operations to block.
(default: 120)
.Sp
\&\fBDebug\fR \- Enable the printing of debugging information to \s-1STDERR\s0
.SH "METHODS"
.IX Header "METHODS"
Unless otherwise stated all methods return either a \fItrue\fR or \fIfalse\fR
value, with \fItrue\fR meaning that the operation was a success. When a method
states that it returns a value, failure will be returned as \fIundef\fR or an
empty list.
.Ip "query( \s-1SEARCH\s0 [, \s-1RETURN\s0 ] )" 4
.IX Item "query( SEARCH [, RETURN ] )"
.Vb 2
\&    $q = $ph->query({ name => $myname },
\&                    [qw(name email schedule)]);
.Ve
.Vb 9
\&    foreach $handle (@{$q}) {
\&        foreach $field (keys %{$handle}) {
\&            $c = ${$handle}{$field}->code;
\&            $v = ${$handle}{$field}->value;
\&            $f = ${$handle}{$field}->field;
\&            $t = ${$handle}{$field}->text;
\&            print "field:[$field] [$c][$v][$f][$t]\en" ;
\&        }
\&    }
.Ve
Search the database and return fields from all matching entries.
.Sp
The \f(CW\*(C`SEARCH\*(C'\fR argument is a reference to a \s-1HASH\s0 which contains field/value
pairs which will be passed to the Nameserver as the search criteria.
.Sp
\&\f(CW\*(C`RETURN\*(C'\fR is optional, but if given it should be a reference to a list which
contains field names to be returned.
.Sp
The alternative syntax is to pass strings instead of references, for example
.Sp
.Vb 2
\&    $q = $ph->query('name=myname',
\&                    'name email schedule');
.Ve
The \f(CW\*(C`SEARCH\*(C'\fR argument is a string that is passed to the Nameserver as the 
search criteria. The strings being passed should \fBnot\fR contain any carriage
returns, or else the query command might fail or return invalid data.
.Sp
\&\f(CW\*(C`RETURN\*(C'\fR is optional, but if given it should be a string which will
contain field names to be returned.
.Sp
Each match from the server will be returned as a \s-1HASH\s0 where the keys are the
field names and the values are \f(CW\*(C`Net::PH:Result\*(C'\fR objects (\fIcode\fR, \fIvalue\fR, 
\&\fIfield\fR, \fItext\fR).
.Sp
Returns a reference to an \s-1ARRAY\s0 which contains references to HASHs, one
per match from the server.
.Ip "change( \s-1SEARCH\s0 , \s-1MAKE\s0 )" 4
.IX Item "change( SEARCH , MAKE )"
.Vb 2
\&    $r = $ph->change({ email => "*.domain.name" },
\&                     { schedule => "busy");
.Ve
Change field values for matching entries.
.Sp
The \f(CW\*(C`SEARCH\*(C'\fR argument is a reference to a \s-1HASH\s0 which contains field/value
pairs which will be passed to the Nameserver as the search criteria.
.Sp
The \f(CW\*(C`MAKE\*(C'\fR argument is a reference to a \s-1HASH\s0 which contains field/value
pairs which will be passed to the Nameserver that
will set new values to designated fields.
.Sp
The alternative syntax is to pass strings instead of references, for example
.Sp
.Vb 2
\&    $r = $ph->change('email="*.domain.name"',
\&                     'schedule="busy"');
.Ve
The \f(CW\*(C`SEARCH\*(C'\fR argument is a string to be passed to the Nameserver as the 
search criteria. The strings being passed should \fBnot\fR contain any carriage
returns, or else the query command might fail or return invalid data.
.Sp
The \f(CW\*(C`MAKE\*(C'\fR argument is a string to be passed to the Nameserver that
will set new values to designated fields.
.Sp
Upon success all entries that match the search criteria will have
the field values, given in the Make argument, changed.
.Ip "login( \s-1USER\s0, \s-1PASS\s0 [, \s-1ENCRYPT\s0 ])" 4
.IX Item "login( USER, PASS [, ENCRYPT ])"
.Vb 1
\&    $r = $ph->login('username','password',1);
.Ve
Enter login mode using \f(CW\*(C`USER\*(C'\fR and \f(CW\*(C`PASS\*(C'\fR. If \f(CW\*(C`ENCRYPT\*(C'\fR is given and
is \fItrue\fR then the password will be used to encrypt a challenge text 
string provided by the server, and the encrypted string will be sent back
to the server. If \f(CW\*(C`ENCRYPT\*(C'\fR is not given, or \fIfalse\fR then the password 
will be sent in clear text (\fIthis is not recommended\fR)
.Ip "\fIlogout()\fR" 4
.IX Item "logout()"
.Vb 1
\&    $r = $ph->logout();
.Ve
Exit login mode and return to anonymous mode.
.Ip "fields( [ \s-1FIELD_LIST\s0 ] )" 4
.IX Item "fields( [ FIELD_LIST ] )"
.Vb 8
\&    $fields = $ph->fields();
\&    foreach $field (keys %{$fields}) {
\&        $c = ${$fields}{$field}->code;
\&        $v = ${$fields}{$field}->value;
\&        $f = ${$fields}{$field}->field;
\&        $t = ${$fields}{$field}->text;
\&        print "field:[$field] [$c][$v][$f][$t]\en";
\&    }
.Ve
In a scalar context, returns a reference to a \s-1HASH\s0. The keys of the \s-1HASH\s0 are
the field names and the values are \f(CW\*(C`Net::PH:Result\*(C'\fR objects (\fIcode\fR,
\&\fIvalue\fR, \fIfield\fR, \fItext\fR).
.Sp
In an array context, returns a two element array. The first element is a
reference to a \s-1HASH\s0 as above, the second element is a reference to an array
which contains the tag names in the order that they were returned from the
server.
.Sp
\&\f(CW\*(C`FIELD_LIST\*(C'\fR is a string that lists the fields for which info will be
returned.
.Ip "add( \s-1FIELD_VALUES\s0 )" 4
.IX Item "add( FIELD_VALUES )"
.Vb 1
\&    $r = $ph->add( { name => $name, phone => $phone });
.Ve
This method is used to add new entries to the Nameserver database. You
must successfully call the login manpage before this method can be used.
.Sp
\&\fBNote\fR that this method adds new entries to the database. To modify
an existing entry use the change manpage.
.Sp
\&\f(CW\*(C`FIELD_VALUES\*(C'\fR is a reference to a \s-1HASH\s0 which contains field/value
pairs which will be passed to the Nameserver and will be used to 
initialize the new entry.
.Sp
The alternative syntax is to pass a string instead of a reference, for example
.Sp
.Vb 1
\&    $r = $ph->add('name=myname phone=myphone');
.Ve
\&\f(CW\*(C`FIELD_VALUES\*(C'\fR is a string that consists of field/value pairs which the
new entry will contain. The strings being passed should \fBnot\fR contain any
carriage returns, or else the query command might fail or return invalid data.
.Ip "delete( \s-1FIELD_VALUES\s0 )" 4
.IX Item "delete( FIELD_VALUES )"
.Vb 1
\&    $r = $ph->delete('name=myname phone=myphone');
.Ve
This method is used to delete existing entries from the Nameserver database.
You must successfully call the login manpage before this method can be used.
.Sp
\&\fBNote\fR that this method deletes entries to the database. To modify
an existing entry use the change manpage.
.Sp
\&\f(CW\*(C`FIELD_VALUES\*(C'\fR is a string that serves as the search criteria for the
records to be deleted. Any entry in the database which matches this search 
criteria will be deleted.
.Ip "id( [ \s-1ID\s0 ] )" 4
.IX Item "id( [ ID ] )"
.Vb 1
\&    $r = $ph->id('709');
.Ve
Sends \f(CW\*(C`ID\*(C'\fR to the Nameserver, which will enter this into its
logs. If \f(CW\*(C`ID\*(C'\fR is not given then the \s-1UID\s0 of the user running the
process will be sent.
.Ip "\fIstatus()\fR" 4
.IX Item "status()"
Returns the current status of the Nameserver.
.Ip "\fIsiteinfo()\fR" 4
.IX Item "siteinfo()"
.Vb 8
\&    $siteinfo = $ph->siteinfo();
\&    foreach $field (keys %{$siteinfo}) {
\&        $c = ${$siteinfo}{$field}->code;
\&        $v = ${$siteinfo}{$field}->value;
\&        $f = ${$siteinfo}{$field}->field;
\&        $t = ${$siteinfo}{$field}->text;
\&        print "field:[$field] [$c][$v][$f][$t]\en";
\&    }
.Ve
Returns a reference to a \s-1HASH\s0 containing information about the server's 
site. The keys of the \s-1HASH\s0 are the field names and values are
\&\f(CW\*(C`Net::PH:Result\*(C'\fR objects (\fIcode\fR, \fIvalue\fR, \fIfield\fR, \fItext\fR).
.Ip "\fIquit()\fR" 4
.IX Item "quit()"
.Vb 1
\&    $r = $ph->quit();
.Ve
Quit the connection
.SH "Q&A"
.IX Header "Q&A"
How do I get the values of a Net::PH::Result object?
.PP
.Vb 8
\&    foreach $handle (@{$q}) {
\&        foreach $field (keys %{$handle}) {
\&            $my_code  = ${$q}{$field}->code;
\&            $my_value = ${$q}{$field}->value;
\&            $my_field = ${$q}{$field}->field;
\&            $my_text  = ${$q}{$field}->text;
\&        }
\&    }
.Ve
How do I get a count of the returned matches to my query?
.PP
.Vb 1
\&    $my_count = scalar(@{$query_result});
.Ve
How do I get the status code and message of the last \f(CW\*(C`$ph\*(C'\fR command?
.PP
.Vb 2
\&    $status_code    = $ph->code;
\&    $status_message = $ph->message;
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
the Net::Cmd manpage
.SH "AUTHORS"
.IX Header "AUTHORS"
Graham Barr <gbarr@pobox.com>
Alex Hristov <hristov@slb.com>
.SH "ACKNOWLEDGMENTS"
.IX Header "ACKNOWLEDGMENTS"
Password encryption code ported to perl by Broc Seib <bseib@purdue.edu>,
Purdue University Computing Center.
.PP
Otis Gospodnetic <otisg@panther.middlebury.edu> suggested
passing parameters as string constants. Some queries cannot be 
executed when passing parameters as string references.
.PP
.Vb 1
\&        Example: query first_name last_name email="*.domain"
.Ve
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
The encryption code is based upon cryptit.c, Copyright (C) 1988 by
Steven Dorner, and Paul Pomes, and the University of Illinois Board
of Trustees, and by \s-1CSNET\s0.
.PP
All other code is Copyright (c) 1996\-1997 Graham Barr <gbarr@pobox.com>
and Alex Hristov <hristov@slb.com>. All rights reserved. This program is
free software; you can redistribute it and/or modify it under the same
terms as Perl itself.
