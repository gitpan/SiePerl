.\" Automatically generated by Pod::Man version 1.15
.\" Mon Apr 23 12:57:04 2001
.\"
.\" Standard preamble:
.\" ======================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R

.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used
.\" to do unbreakable dashes and therefore won't be available.  \*(C` and
.\" \*(C' expand to `' in nroff, nothing in troff, for use with C<>
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr
.\" for titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and
.\" index entries marked with X<> in POD.  Of course, you'll have to process
.\" the output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it
.\" makes way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.bd B 3
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ======================================================================
.\"
.IX Title "Storage::Property 3"
.TH Storage::Property 3 "perl v5.6.1" "1998-02-25" "User Contributed Perl Documentation"
.UC
.SH "NAME"
\&\s-1OLE:\s0:Storage::Property \- maintain Properties for \s-1OLE:\s0:Storage::Var
.PP
$Revision: 1.1.1.1 $ \f(CW$Date:\fR 1998/02/25 21:13:00 $
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
\&\s-1OLE:\s0:Storage and \s-1OLE:\s0:PropertySet are returning from time to time a
kind of variables called Properties (\fI$Prop\fR). Properties could be handled
as follows:
.PP
.Vb 10
\& sub work {
\&    my $Prop = shift;
\&    if (is_scalar $Prop) {
\&       do_something_with ($Prop); # $Prop definitively is a scalar.
\&    } else {
\&       foreach $P (@{array $Prop}) {
\&          work ($P);              # $P could be an array itself.
\&       }
\&    }
\& }
.Ve
\&\fI$string\fR = \fI$Prop\fR \-> \fIstring()\fR
.PP
\&\fI$NewProp\fR = \fI$OldProp\fR \-> cast ("\f(CW\*(C`string\*(C'\fR")
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\s-1OLE:\s0:Storage::Property is maintaining the Properties, that are initially
instantiated by other packages. It gives storage places to
\&\s-1OLE:\s0:Storage::Var, manages Property to Property conversions, Property to
scalar conversions and type information. Though you will use the member
functions of \s-1OLE:\s0:Storage::Property quite often, you should never create a
Property directly with this package. Therefore \*(L"use \s-1OLE:\s0:Storage::Property\*(R"
even was useless.
.PP
Type implementation itself is done at \s-1OLE:\s0:Storage::Var, that offers some
private methods for \s-1OLE:\s0:Storage::Property. Both, type conversions and type
availability are quite far from being complete (as you will notice when
looking at Var.pm). For this release I cared only to have the
something->string conversions working, and therefore only them are
documented above.
.Ip "array" 4
.IX Item "array"
\&\fI\e@Properties\fR = \fI$Prop\fR \-> \fIarray()\fR
.Sp
Returns a reference to a Property list. You have to use this to find
out, which properties are hiding inside an array property.
.Ip "Conversion: Property to perl scalar" 4
.IX Item "Conversion: Property to perl scalar"
\&\fI$scalar\fR = \fI$Prop\fR \-> \fImethod()\fR
.Sp
Returns a scalar variable, that perl understands. Momentarily \fImethod()\fR
should be \fIstring()\fR only.
.Ip "Conversion: Property to Property" 4
.IX Item "Conversion: Property to Property"
\&\fI$NewProp\fR = \fI$OldProp\fR \-> cast ("\f(CW\*(C`method\*(C'\fR")
.Sp
Returns a Property of type \f(CW\*(C`method\*(C'\fR. 
.Ip "is_scalar" 4
.IX Item "is_scalar"
\&\f(CW\*(C`1\*(C'\fR||\f(CW\*(C`0\*(C'\fR == \fI$Prop\fR \-> \fIis_scalar()\fR
.Sp
Returns 1 if \f(CW$Prop\fR is a scalar variable, 0 otherwise. A property is 
scalar, if it is not an array. 
.Ip "is_array" 4
.IX Item "is_array"
\&\f(CW\*(C`1\*(C'\fR||\f(CW\*(C`0\*(C'\fR == \fI$Prop\fR \-> \fIis_array()\fR
.Sp
Returns 1 if \f(CW$Prop\fR is some array variable, 0 otherwise.
.Ip "is_varray" 4
.IX Item "is_varray"
\&\f(CW\*(C`1\*(C'\fR||\f(CW\*(C`0\*(C'\fR == \fI$Prop\fR \-> \fIis_varray()\fR
.Sp
Returns 1 if \f(CW$Prop\fR is a variant array variable, 0 otherwise. A variant array
is an array, that consists out of elements with different types. 
.Ip "stype" 4
.IX Item "stype"
\&\fI$type\fR = \fI$Prop\fR \-> \fIstype()\fR
.Sp
Returns the scalar type of property \f(CW$Prop\fR. This is useful if \f(CW$Prop\fR is an
array and you want to know, what kind of variables it consists of.
.Ip "type" 4
.IX Item "type"
\&\fI$type\fR = \fI$Prop\fR \-> \fItype()\fR
.Sp
Returns the type of the Property. It is a number if it is a real property
type, and it is a string, if it is an internal property type.
.Ip "typestr" 4
.IX Item "typestr"
\&\fI$typestr\fR = \fI$Prop\fR \-> \fItypestr()\fR
.Sp
Returns the name of the property type as string.
.SH "KNOWN BUGS"
.IX Header "KNOWN BUGS"
Property handling is \fIvery\fR slow.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
the OLE::Storage::Var manpage, demonstration program \*(L"ldat\*(R"
.SH "AUTHOR"
.IX Header "AUTHOR"
Martin Schwartz <\fIschwartz@cs.tu-berlin.de\fR>. 
