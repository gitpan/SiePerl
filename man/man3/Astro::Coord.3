.\" Automatically generated by Pod::Man version 1.15
.\" Mon Apr 23 08:16:00 2001
.\"
.\" Standard preamble:
.\" ======================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R

.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used
.\" to do unbreakable dashes and therefore won't be available.  \*(C` and
.\" \*(C' expand to `' in nroff, nothing in troff, for use with C<>
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr
.\" for titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and
.\" index entries marked with X<> in POD.  Of course, you'll have to process
.\" the output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it
.\" makes way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.bd B 3
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ======================================================================
.\"
.IX Title "Astro::Coord 3"
.TH Astro::Coord 3 "perl v5.6.1" "1999-11-15" "User Contributed Perl Documentation"
.UC
.SH "NAME"
Astro::Coord \- Astronomical coordinate transformations
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use Astro::Coord;
.Ve
.Vb 2
\&    ($l, $b) = fk4gal($ra, $dec);
\&    ($az, $el) = eqazel($ha, $dec, $latitude);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Astro::Coord contains an assorted set Perl routines for coordinate
conversions, such as hour angle to elevation and J2000 to B1950.
.SH "AUTHOR"
.IX Header "AUTHOR"
Chris Phillips  phillips@jive.nfra.nl
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
.Ip "\fBpol2r\fR"
.IX Item "pol2r"
.Vb 1
\&  ($x, $y, $z) = pol2r($polar1, $polar2);
.Ve
.Vb 3
\& Converts a position in polar coordinates into rectangular coordinates
\&   $polar1, $polar2   The polar coordinates to convert (turns)
\&   $x, $y, $z         The rectangular coordinates
.Ve
.Ip "\fBr2pol\fR"
.IX Item "r2pol"
.Vb 1
\&  ($polar1, $polar2) = r2pol($x, $y, $z);
.Ve
.Vb 4
\& Converts a position in rectangular coordinates into polar coordinates
\&   $x, $y, $y         The rectangular coordinates to convert
\&   $polar1, $polar2   The polar coordinates (turns);
\& Returns undef if too few or too many arguments are passed.
.Ve
.Ip "\fBxy2azel\fR"
.IX Item "xy2azel"
.Vb 1
\&  ($az, $el) = xy2azel($x, $y);
.Ve
.Vb 3
\& Converts a telescope position in X,Y coordinates into Az,El coordinates 
\&   $x, $y     The X and Y coordinates (turns)
\&   $az, $el    The azimuth and elevation (turns)
.Ve
.Ip "\fBazel2xy\fR"
.IX Item "azel2xy"
.Vb 1
\&  ($x, $y) = azel2xy($az, $el);
.Ve
.Vb 3
\& Converts a position in Az,El coordinates into X,Y coordinates
\&   $az, $el    The azimuth and elevation (turns)
\&   $x, $y      The X and Y coordinate (turns)
.Ve
.Ip "\fBeqazel\fR"
.IX Item "eqazel"
.Vb 2
\&  ($ha, $dec) = eqazel($az, $el, $latitude);
\&  ($az, $el) = eqazel($ha, $dec, $latitude);
.Ve
.Vb 6
\& Converts HA/Dec coordinates to Az/El and vice versa. 
\&   $ha, $dec     Hour angle and declination of source (turns)
\&   $az, $el      Azimuth and elevation of source (turns)
\&   $latitude     Latitude of the observatory (turns)
\& Note:
\&  The ha,dec and az,el conversion is symmetrical
.Ve
.Ip "\fBfk4fk5r\fR"
.IX Item "fk4fk5r"
.Vb 1
\& @fk5 = fk4fk5r(@fk4);
.Ve
.Vb 4
\& Converts an FK4 (B1950) position to the equivalent FK5 (J2000) position.
\& Note: Convert equitoral positions to/from 3-vectors using pol2r and r2pol.
\&   @fk4       fk4 position (as a 3-vector, turns)
\&   @fk5       fk5 position (as a 3-vector, turns)
.Ve
.Vb 1
\& Returns undef if too few or two many arguments are passed.
.Ve
.Ip "\fBfk5fk4r\fR"
.IX Item "fk5fk4r"
.Vb 1
\&  @fk4 = fk5fk4r(@fk5);
.Ve
.Vb 4
\& Converts an FK5 (J2000) position to the equivalent FK4 (B1950) position.
\& Note: Convert equitoral positions to/from 3-vectors using pol2r and r2pol.
\&   @fk5     fk5 position (as a 3-vector, turns)
\&   @fk4     fk4 position (as a  3-vector, turns)
.Ve
.Ip "\fBfk4galr\fR"
.IX Item "fk4galr"
.Vb 1
\&  @gal = fk4galr(@fk4)
.Ve
.Vb 7
\& Converts an FK4 position (B1950.0) to the IAU 1958 Galactic
\& coordinate system
\& Note: convert equitoral positions to/from 3-vectors using pol2r and r2pol.
\&   @fk4     fk4 position to convert (as a 3-vector, turns)
\&   @gal     Galactic position (as a 3-vector, turns)
\& Returns undef if too few or two many arguments are passed.
\& Reference : Blaauw et al., 1960, MNRAS, 121, 123.
.Ve
.Ip "\fBgalfk4r\fR"
.IX Item "galfk4r"
.Vb 1
\&  @fk4 = galfk4r(@gal)
.Ve
.Vb 6
\& Converts an IAU 1958 Galactic position to the FK4 coordinate system (B1950)
\& Notes: Convert equitoral positions to/from 3-vectors using pol2r and r2pol.
\&   @gal      Galactic position (as a 3-vector, turns)
\&   @fk4      fk4 position (as a  3-vector, turns)
\& Returns undef if too few or two many arguments are passed.
\& Reference : Blaauw et al., 1960, MNRAS, 121, 123.
.Ve
.Ip "\fBfk4fk5\fR"
.IX Item "fk4fk5"
.Vb 1
\& ($JRA, $JDec) = fk4fk5($BRA, $BDec);
.Ve
.Vb 4
\& Converts an FK4 (B1950) position to the equivalent FK5 (J2000) position.
\&   **LOW PRECISION**
\&   $BRA,$BDec     fk4/B1950 position (turns)
\&   $JRA,$Dec      fk5/J2000 position (turns)
.Ve
.Ip "\fBfk5fk4\fR"
.IX Item "fk5fk4"
.Vb 1
\& ($BRA, $BDec) = fk5fk4($JRA, $JDec);
.Ve
.Vb 4
\& Converts an FK5 (J2000) position to the equivalent FK4 (B1950) position.
\&   **LOW PRECISION**
\&   $JRA,$Dec      fk5/J2000 position (turns)
\&   $BRA,$BDec     fk4/B1950 position (turns)
.Ve
.Ip "\fBfk4gal\fR"
.IX Item "fk4gal"
.Vb 1
\&  ($l, $b) = fk4gal($ra, $dec);
.Ve
.Vb 5
\& Converts an FK4 position (B1950) to the IAU 1958 Galactic
\& coordinate system
\&   ($ra, $dec)  fk4 position to convert (turns)
\&   ($l, $b)     Galactic position (turns)
\& Reference : Blaauw et al., 1960, MNRAS, 121, 123.
.Ve
.Ip "\fBgalfk4\fR"
.IX Item "galfk4"
.Vb 1
\&  ($ra, $dec) = galfk4($l, $b);
.Ve
.Vb 5
\& Converts an IAU 1958 Galactic coordinate system position 
\& to FK4  (B1950).
\&   ($l, $b)    Galactic position (turns)
\&  ($ra, $dec)  fk4 position to convert (turns)
\&  Reference : Blaauw et al., 1960, MNRAS, 121, 123.
.Ve
.Ip "\fBephem_vars\fR"
.IX Item "ephem_vars"
.Vb 1
\&  ($omega, $rma, $mlanom, $F, $D, $eps0) = ephem_vars($jd)
.Ve
.Vb 2
\&  Given the Julian day ($jd) this routine calculates the ephemeris
\&  values required by the prcmat and nutate routines
.Ve
.Vb 8
\&  The returned values are :
\&    $omega  - Longitude of the ascending node of the Moons mean orbit on
\&              the ecliptic, measured from the mean equinox of date.
\&    $rma    - Mean anomaly of the Sun.
\&    $mlanom - Mean anomaly of the Moon.
\&    $F      - L - omega, where L is the mean longitude of the Moon.
\&    $D      - Mean elongation of the Moon from the Sun.
\&    $eps0   - Mean obilquity of the ecliptic.
.Ve
.Ip "\fBnutate\fR"
.IX Item "nutate"
.Vb 1
\&  ($deps, $dpsi, @nu) = nutate($omega, $F, $D, $rma, $mlanom, $eps0);
.Ve
.Vb 6
\&  To calculate the nutation in longitude and obliquity according to
\&  the 1980 IAU Theory of Nutation including terms with amplitudes
\&  greater than 0.01 arcsecond.  The nutation matrix is used to
\&  compute true place from mean place: true vector = N x mean place
\&  vector where the three components of each vector are the direction
\&  cosines wrt the mean equinox and equator.
.Ve
.Vb 5
\&       /   1          -dpsi.cos(eps)    -dpsi.sin(eps)  \e
\&      |                                                  |
\&  N = |  dpsi.cos(eps)      1               -deps        |
\&      |                                                  |
\&       \e dpsi.sin(eps)    deps                 1        /
.Ve
.Vb 8
\&  The required inputs are : (NOTE: these are the values returned by ephem_vars)
\&    $omega  - Longitude of the ascending node of the Moons mean orbit on 
\&              the ecliptic, measured from the mean equinox of date.
\&    $rma    - Mean anomaly of the Sun.
\&    $mlanom - Mean anomaly of the Moon.
\&    $F      - L - omega, where L is the mean longitude of the Moon.
\&    $D      - Mean elongation of the Moon from the Sun.
\&    $eps0   - Mean obilquity of the ecliptic.
.Ve
.Vb 4
\&  The returned values are :
\&    $deps - nutation in obliquity
\&    $dpsi - nutation in longitude (scalar)
\&    @nu   - nutation matrix (array [3][3])
.Ve
.Ip "\fBprecsn\fR"
.IX Item "precsn"
.Vb 1
\&  @gp = precsn($jd_start, $jd_stop);
.Ve
.Vb 4
\&  To calculate the precession matrix P for dates AFTER 1984.0 (JD =
\&  2445700.5) Given the position of an object referred to the equator
\&  and equinox of the epoch $jd_start its position referred to the
\&  equator and equinox of epoch $jd_stop can be calculated as follows :
.Ve
.Vb 3
\&  1) Express the position as a direction cosine 3-vector (V1)
\&     (use pol2r to do this).
\&  2) The corresponding vector V2 for epoch jd_end is V2 = P.V1
.Ve
.Vb 3
\&  The required inputs are :
\&    $jd_start - The Julian day of the current epoch of the coordinates.
\&    $jd_end   - The Julian day at the required epoch for the conversion.
.Ve
.Vb 2
\&  The returned values are :
\&    @gp - The required precession matrix (array [3][3])
.Ve
.Ip "\fBcoord_convert\fR"
.IX Item "coord_convert"
.Vb 4
\&  ($output_left, $output_right) = coord_convert($input_left, $input_right,
\&                                                $input_mode, $output_mode,
\&                                                $mjd, $longitude, $latitude,
\&                                                $ref0);
.Ve
.Vb 8
\&  A routine for converting between any of the following coordinate systems :
\&        Coordinate system                               input/output mode
\&        -----------------                               -----------------
\&    X, Y (East-West mounted)                                    0
\&    Azimuth, Elevation                                          1
\&    Hour Angle, Declination                                     2
\&    Right Ascension, Declination (date, J2000 or B1950)       3,4,5
\&    Galactic (B1950)                                            6
.Ve
.Vb 14
\&  The last four parameters in the call ($mjd, $longitude, $latitude
\&  and $ref0) are not always required for the coordinate conversion.
\&  In particular if the conversion is between two coordinate systems
\&  which are fixed with respect to the celestial sphere (RA/Dec J2000,
\&  B1950 or Galactic), or two coordinate systems which are fixed with
\&  respect to the antenna (X/Y and Az/El) then these parameters are not
\&  used (NOTE: they must always be passed, even if they only hold 0 or
\&  undef as the routine will return undef if it is not passed 8
\&  parameters).  The RA/Dec date system is defined with respect to the
\&  celestial sphere, but varies with time.  The table below shows which
\&  of $mjd, $longitude, $latitude and $ref0 are used for a given
\&  conversion.  If in doubt you should determing the correct values for
\&  all input parameters, no checking is done in the routine that the
\&  passed values are sensible.
.Ve
.Vb 4
\&                Conversion                 $mjd $longitude $latitude $ref0
\&  ------------------------------------------------------------------------
\&  Galactic,             Galactic,
\&  RA/Dec J2000,B1950 <->RA/Dec J2000, B1950  N       N         N       N
.Ve
.Vb 2
\&  Galactic,
\&  RA/Dec J2000,B1950 <->RA/Dec date          Y       N         N       N
.Ve
.Vb 3
\&  Galactic,
\&  RA/Dec J2000,B1950,<->HA/Dec               Y       Y         N       N
\&  date
.Ve
.Vb 3
\&  Galactic,
\&  RA/Dec J2000,B1950,<->X/Y, Az/El           Y       Y         Y       Y
\&  date
.Ve
.Vb 1
\&  X/Y, Az/El         <->X/Y, Az/El           N       N         N       N
.Ve
.Vb 1
\&  X/Y, Az/El         <->HA/Dec               N       N         Y       Y
.Ve
.Vb 2
\&  NOTE :  The method used for refraction correction is asymptotic at
\&          an elevation of 0 degrees.
.Ve
.Vb 12
\&  The required inputs are :
\&    $input_left   - The left/longitude input coordinate (turns)
\&    $input_right  - The right/latitude input coordinate (turns)
\&    $input_mode   - The mode of the input coordinates (0-6)
\&    $output_mode  - The mode to convert the coordinates to.
\&    $mjd          - The time as modified Julian day (if necessary) at
\&                    which to perform the conversion
\&    $longitude    - The longitude of the location/observatory (if necessary)
\&                    at which to perform the conversion (turns)
\&    $latitude     - The latitude of the location/observatory (if necessary)
\&                    at which to perform the conversion (turns)
\&    $ref0         - The refraction constant (if in doubt use 0.00005).
.Ve
.Vb 3
\&  The returned values are :
\&    $output_left  - The left/longitude output coordinate (turns)
\&    $output_right - The right/latitude output coordinate (turns)
.Ve
.Ip "\fBhaset_ewxy\fR"
.IX Item "haset_ewxy"
.Vb 1
\&  $haset = haset_ewxy($declination, $latitude, %limits);
.Ve
.Vb 5
\&   This routine takes the $declination of the source, and the $latitude of the
\&   EWXY mounted antenna and calculates the hour angle at which the source 
\&   will set.  It is then trivial to calculate the time until the source
\&   sets, simply by subtracting the current hour angle of the source from
\&   the hour angle at which it sets.
.Ve
.Vb 7
\&  The required inputs are :
\&    $declination - The declination of the source (turns)
\&    $latitude    - The latitude of the observatory (turns)
\&    %limits     - A reference to a hash holding the EWXY antenna limits
\&                   The following keys must be defined XLOW, XLOW_KEYHOLE,
\&                   XHIGH, XHIGH_KEYHOLE, YLOW, YLOW_KEYHOLE, YHIGH, 
\&                   YHIGH_KEYHOLE (all values shoule be in turns)
.Ve
.Vb 4
\&  The returned value is :
\&    $haset       - The hour angle (turns) at which a source at this 
\&                   declination sets for an EWXY mounted antenna with the 
\&                   given limits at the given latitude
.Ve
.Vb 1
\&  NOTE: returns undef if %limits hash is missing any of the required keys
.Ve
.Ip "\fBewxy_tlos\fR"
.IX Item "ewxy_tlos"
.Vb 1
\&  $tlos = ewxy_tlos($hour_angle, $declination, $latitude, %limits);
.Ve
.Vb 2
\&  This routine calculates the time left on-source (tlos) for a source
\&  at $hour_angle, $declination for an EWXY mount antenna at $latitude.
.Ve
.Vb 8
\&  The required inputs are :
\&    $hour_angle  - The current hour angle of the source (turns)
\&    $declination - The declination of the source (turns)
\&    $latitude    - The latitude of the observatory (turns)
\&    \e%limits     - A reference to a hash holding the EWXY antenna limits
\&                   The following keys must be defined XLOW, XLOW_KEYHOLE,
\&                   XHIGH, XHIGH_KEYHOLE, YLOW, YLOW_KEYHOLE, YHIGH,
\&                   YHIGH_KEYHOLE (all values should be in turns)
.Ve
.Vb 2
\&  The returned value is :
\&    $tlos        - The time left on-source (turns)
.Ve
.Ip "\fBhaset_azel\fR"
.IX Item "haset_azel"
.Vb 1
\&  $haset = haset_azel($declination, $latitude, %limits);
.Ve
.Vb 7
\&   This routine takes the $declination of the source, and the
\&   $latitude of the Az/El mounted antenna and calculates the hour
\&   angle at which the source will set.  It is then trivial to
\&   calculate the time until the source sets, simply by subtracting the
\&   current hour angle of the source from the hour angle at which it
\&   sets.  This routine assumes that the antenna is able to rotate
\&   through 360 degrees in azimuth.
.Ve
.Vb 6
\&  The required inputs are :
\&    $declination - The declination of the source (turns)
\&    $latitude    - The latitude of the observatory (turns)
\&    \e%limits     - A reference to a hash holding the Az/El antenna limits
\&                   The following keys must be defined ELLOW (all values should
\&                   be in turns)
.Ve
.Vb 4
\&  The returned value is :
\&    $haset       - The hour angle (turns) at which a source at this
\&                   declination sets for an Az/El mounted antenna with the
\&                   given limits at the given latitude
.Ve
.Vb 1
\&  NOTE: returns undef if the %limits hash is missing any of the required keys
.Ve
.Ip "\fBazel_tlos\fR"
.IX Item "azel_tlos"
.Vb 1
\&  $tlos = azel_tlos($hour_angle, $declination, $latitude, \e%limits);
.Ve
.Vb 2
\&  This routine calculates the time left on-source (tlos) for a source
\&  at $hour_angle, $declination for an Az/El mount antenna at $latitude.
.Ve
.Vb 7
\&  The required inputs are :
\&    $hour_angle  - The current hour angle of the source (turns)
\&    $declination - The declination of the source (turns)
\&    $latitude    - The latitude of the observatory (turns)
\&    %limits     - A reference to a hash holding the Az/El antenna limits
\&                   The following keys must be defined ELLOW (all values
\&                   should be in turns)
.Ve
.Vb 2
\&  The returned value is :
\&    $tlos        - The time left on-source (turns)
.Ve
.Ip "\fBantenna_rise\fR"
.IX Item "antenna_rise"
.Vb 1
\&  $ha_set = antenna_rise($declination, $latitude, $mount, \e%limits);
.Ve
.Vb 9
\&   Given the $declination of the source, the $latitude of the antenna,
\&   the type of the antenna $mount and a reference to a hash holding
\&   information on the antenna limits, this routine calculates the hour
\&   angle at which the source sets for the antenna.  The hour angle at
\&   which it rises is simply the negative of that at which it sets.
\&   These values in turn can be used to calculate the LMST at which the
\&   source rises/sets and from that the UT at which the source
\&   rises/sets on a given day, or to calculate the native coordinates
\&   at which the source rises/sets.
.Ve
.Vb 2
\&   If you want to calculate source rise times above arbitrary elevation,
\&   use the routine rise.
.Ve
.Vb 12
\&  The required inputs are :
\&    $declination - The declination of the source (turns)
\&    $latitude    - The latitude of the observatory (turns)
\&    $mount       - The type of antenna mount, 0 => EWXY mount, 1 => Az/El,
\&                   any other number will cause the routine to return 
\&                   undef
\&    %limits     - A reference to a hash holding the antenna limits
\&                   For an EWXY antenna there must be keys for all the
\&                   limits (i.e.  XLOW, XLOW_KEYHOLE, XHIGH, XHIGH_KEYHOLE, 
\&                   YLOW, YLOW_KEYHOLE, YHIGH, YHIGH_KEYHOLE).  For an Az/El
\&                   antenna there must be a key for ELLOW (all values should
\&                   be in turns).
.Ve
.Vb 4
\&  The returned values are :
\&    $ha_set  - The hour angle at which the source sets (turns).  The hour
\&               angle at which the source rises is simply the negative of this
\&               value.
.Ve
