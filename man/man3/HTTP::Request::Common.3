.\" Automatically generated by Pod::Man version 1.15
.\" Mon Apr 23 13:01:03 2001
.\"
.\" Standard preamble:
.\" ======================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R

.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used
.\" to do unbreakable dashes and therefore won't be available.  \*(C` and
.\" \*(C' expand to `' in nroff, nothing in troff, for use with C<>
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr
.\" for titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and
.\" index entries marked with X<> in POD.  Of course, you'll have to process
.\" the output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it
.\" makes way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.bd B 3
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ======================================================================
.\"
.IX Title "HTTP::Request::Common 3"
.TH HTTP::Request::Common 3 "libwww-perl-5.51" "2001-01-05" "User Contributed Perl Documentation"
.UC
.SH "NAME"
\&\s-1HTTP:\s0:Request::Common \- Construct common \s-1HTTP:\s0:Request objects
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 4
\&  use HTTP::Request::Common;
\&  $ua = LWP::UserAgent->new;
\&  $ua->request(GET 'http://www.sn.no/');
\&  $ua->request(POST 'http://somewhere/foo', [foo => bar, bar => foo]);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module provide functions that return newly created \s-1HTTP:\s0:Request
objects.  These functions are usually more convenient to use than the
standard \s-1HTTP:\s0:Request constructor for these common requests.  The
following functions are provided.
.Ip "\s-1GET\s0 \f(CW$url\fR, Header => Value,..." 4
.IX Item "GET $url, Header => Value,..."
The \fIGET()\fR function returns a \s-1HTTP:\s0:Request object initialized with the
\&\s-1GET\s0 method and the specified \s-1URL\s0.  Without additional arguments it
is exactly equivalent to the following call
.Sp
.Vb 1
\&  HTTP::Request->new(GET => $url)
.Ve
but is less cluttered.  It also reads better when used together with the
\&\s-1LWP:\s0:UserAgent->\fIrequest()\fR method:
.Sp
.Vb 3
\&  my $ua = new LWP::UserAgent;
\&  my $res = $ua->request(GET 'http://www.sn.no')
\&  if ($res->is_success) { ...
.Ve
You can also initialize header values in the request by specifying
some key/value pairs as optional arguments.  For instance:
.Sp
.Vb 4
\&  $ua->request(GET 'http://www.sn.no',
\&                   If_Match => 'foo',
\&                   From     => 'gisle@aas.no',
\&              );
.Ve
A header key called 'Content' is special and when seen the value will
initialize the content part of the request instead of setting a header.
.Ip "\s-1HEAD\s0 \f(CW$url\fR, [Header => Value,...]" 4
.IX Item "HEAD $url, [Header => Value,...]"
Like \fIGET()\fR but the method in the request is \s-1HEAD\s0.
.Ip "\s-1PUT\s0 \f(CW$url\fR, [Header => Value,...]" 4
.IX Item "PUT $url, [Header => Value,...]"
Like \fIGET()\fR but the method in the request is \s-1PUT\s0.
.Ip "\s-1POST\s0 \f(CW$url\fR, [$form_ref], [Header => Value,...]" 4
.IX Item "POST $url, [$form_ref], [Header => Value,...]"
This works mostly like \fIGET()\fR with \s-1POST\s0 as the method, but this function
also takes a second optional array or hash reference parameter
($form_ref).  This argument can be used to pass key/value pairs for
the form content.  By default we will initialize a request using the
\&\f(CW\*(C`application/x\-www\-form\-urlencoded\*(C'\fR content type.  This means that
you can emulate a \s-1HTML\s0 <form> POSTing like this:
.Sp
.Vb 7
\&  POST 'http://www.perl.org/survey.cgi',
\&       [ name   => 'Gisle Aas',
\&         email  => 'gisle@aas.no',
\&         gender => 'M',
\&         born   => '1964',
\&         perc   => '3%',
\&       ];
.Ve
This will create a \s-1HTTP:\s0:Request object that looks like this:
.Sp
.Vb 3
\&  POST http://www.perl.org/survey.cgi
\&  Content-Length: 66
\&  Content-Type: application/x-www-form-urlencoded
.Ve
.Vb 1
\&  name=Gisle%20Aas&email=gisle%40aas.no&gender=M&born=1964&perc=3%25
.Ve
The \s-1POST\s0 method also supports the \f(CW\*(C`multipart/form\-data\*(C'\fR content used
for \fIForm-based File Upload\fR as specified in \s-1RFC\s0 1867.  You trigger
this content format by specifying a content type of \f(CW\*(C`'form\-data'\*(C'\fR as
one of the request headers.  If one of the values in the \f(CW$form_ref\fR is
an array reference, then it is treated as a file part specification
with the following interpretation:
.Sp
.Vb 1
\&  [ $file, $filename, Header => Value... ]
.Ve
The first value in the array ($file) is the name of a file to open.
This file will be read and its content placed in the request.  The
routine will croak if the file can't be opened.  Use an \f(CW\*(C`undef\*(C'\fR as \f(CW$file\fR
value if you want to specify the content directly.  The \f(CW$filename\fR is
the filename to report in the request.  If this value is undefined,
then the basename of the \f(CW$file\fR will be used.  You can specify an empty
string as \f(CW$filename\fR if you don't want any filename in the request.
.Sp
Sending my \fI~/.profile\fR to the survey used as example above can be
achieved by this:
.Sp
.Vb 8
\&  POST 'http://www.perl.org/survey.cgi',
\&       Content_Type => 'form-data',
\&       Content      => [ name  => 'Gisle Aas',
\&                         email => 'gisle@aas.no',
\&                         gender => 'M',
\&                         born   => '1964',
\&                         init   => ["$ENV{HOME}/.profile"],
\&                       ]
.Ve
This will create a \s-1HTTP:\s0:Request object that almost looks this (the
boundary and the content of your \fI~/.profile\fR is likely to be
different):
.Sp
.Vb 3
\&  POST http://www.perl.org/survey.cgi
\&  Content-Length: 388
\&  Content-Type: multipart/form-data; boundary="6G+f"
.Ve
.Vb 2
\&  --6G+f
\&  Content-Disposition: form-data; name="name"
.Ve
.Vb 3
\&  Gisle Aas
\&  --6G+f
\&  Content-Disposition: form-data; name="email"
.Ve
.Vb 3
\&  gisle@aas.no
\&  --6G+f
\&  Content-Disposition: form-data; name="gender"
.Ve
.Vb 3
\&  M
\&  --6G+f
\&  Content-Disposition: form-data; name="born"
.Ve
.Vb 4
\&  1964
\&  --6G+f
\&  Content-Disposition: form-data; name="init"; filename=".profile"
\&  Content-Type: text/plain
.Ve
.Vb 2
\&  PATH=/local/perl/bin:$PATH
\&  export PATH
.Ve
.Vb 1
\&  --6G+f--
.Ve
If you set the \f(CW$DYNAMIC_FILE_UPLOAD\fR variable (exportable) to some \s-1TRUE\s0
value, then you get back a request object with a subroutine closure as
the content attribute.  This subroutine will read the content of any
files on demand and return it in suitable chunks.  This allow you to
upload arbitrary big files without using lots of memory.  You can even
upload infinite files like \fI/dev/audio\fR if you wish; however, if
the file is not a plain file, there will be no Content-Length header 
defined for the request.  Not all servers (or server
applications) like this.  Also, if the \fIfile\fR\|(s) change in size between
the time the Content-Length is calculated and the time that the last
chunk is delivered, the subroutine will \f(CW\*(C`Croak\*(C'\fR.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
the HTTP::Request manpage, the LWP::UserAgent manpage
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright 1997\-2000, Gisle Aas
.PP
This library is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
