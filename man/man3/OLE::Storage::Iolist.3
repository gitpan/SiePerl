.\" Automatically generated by Pod::Man version 1.15
.\" Mon Apr 23 12:57:27 2001
.\"
.\" Standard preamble:
.\" ======================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R

.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used
.\" to do unbreakable dashes and therefore won't be available.  \*(C` and
.\" \*(C' expand to `' in nroff, nothing in troff, for use with C<>
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr
.\" for titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and
.\" index entries marked with X<> in POD.  Of course, you'll have to process
.\" the output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it
.\" makes way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.bd B 3
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ======================================================================
.\"
.IX Title "Storage::Iolist 3"
.TH Storage::Iolist 3 "perl v5.6.1" "1998-02-25" "User Contributed Perl Documentation"
.UC
.SH "NAME"
\&\s-1OLE:\s0:Storage::Iolist \- Data management for \s-1OLE:\s0:Storage::Io (\fIalpha\fR) 
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
use \s-1OLE:\\fIs0:Storage::Iolist()\fR;
.PP
s.b.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fBNote\fR: \s-1OLE:\s0:Storage uses Iolists in conjuntion with Io interface for \s-1IO\s0
operations. An \s-1IO\s0 entry is a two element list like (\fI$offset\fR, \fI$length\fR).
.Ip "aggregate" 4
.IX Item "aggregate"
\&\fI$NewIolist\fR = \fI$IoL\fR \-> aggregate (\fI$method\fR)
.Sp
Sorts and merges Iolist \fI$IoL\fR, returns the new packed Iolist
\&\fI$NewIolist\fR. Returns an empty Iolist on errors (!\fBto be changed\fR!). 
\&\fI$method\fR can be:
.Sp
.Vb 5
\&   method       sort offsets    allow offset overlaps
\&   1            yes             no
\&   2            yes             yes
\&   3            no              no
\&   4            no              yes
.Ve
.Ip "append" 4
.IX Item "append"
(\fI$o1\fR, \fI$l1\fR) == \fI$IoL\fR \-> append (\fI$o\fR, \fI$l\fR)
.Sp
Appends an entry to Iolist. Tries to merge the Iolists last entry
with the new one. Returns the new last entry of Iolist.
.Ip "entry" 4
.IX Item "entry"
(\fI$o\fR, \fI$l\fR) = \fI$IoL\fR \-> entry (\fI$i\fR)
.Sp
rval: Get entry number \fI$i\fR.
.Sp
(\fI$o\fR, \fI$l\fR) == \fI$IoL\fR \-> entry (\fI$i\fR, \fI$o\fR, \fI$l\fR)
.Sp
lval: Set entry number \fI$i\fR to (\fI$o\fR, \fI$l\fR). 
Returns this entry. 
.Ip "length" 4
.IX Item "length"
(\fI$l\fR) = \fI$IoL\fR \-> length (\fI$i\fR)
.Sp
rval: Get length of entry number \fI$i\fR.
.Sp
\&\fI$l\fR == \fI$IoL\fR \-> length (\fI$i\fR, \fI$l\fR)
.Sp
lval: Set length of entry number \fI$i\fR to \fI$l\fR. Returns \fI$l\fR.
.Ip "max\" 4
.IX Item "max\"
\&\fI$num\fR = \fI$IoL\fR \-> max ()
.Sp
Returns number of \fI$IoL\fR's entries.
.Ip "new\" 4
.IX Item "new\"
\&\fI$IoL\fR = new Iolist ([\fI\e@offset\fR, \fI\e@length\fR])
.Sp
Iolist constructor. Returns an Iolist handle. Can be initialized with
references to corresponding offset and length lists.
.Ip "offset" 4
.IX Item "offset"
(\fI$o\fR) = \fI$IoL\fR \-> offset (\fI$i\fR)
.Sp
rval: Get offset of entry number \fI$i\fR.
.Sp
\&\fI$o\fR == \fI$IoL\fR \-> offset (\fI$i\fR, \fI$o\fR)
.Sp
lval: Set offset of entry number \fI$i\fR to \fI$o\fR. Returns \fI$o\fR.
.Ip "push" 4
.IX Item "push"
\&\f(CW\*(C`1\*(C'\fR == \fI$IoL\fR \-> push (\fI$AnotherIolist\fR)
.Sp
Appends all entries of \fI$AnotherIolist\fR to \fI$IoL\fR.
.Ip "sumlen" 4
.IX Item "sumlen"
\&\fI$length\fR = \fI$IoL\fR \-> sumlen ()
.Sp
Returns total length of \fI$IoL\fR's entries.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
the OLE::Storage::Io manpage
.SH "AUTHOR"
.IX Header "AUTHOR"
Martin Schwartz <\fIschwartz@cs.tu-berlin.de\fR>
