.\" Automatically generated by Pod::Man version 1.15
.\" Mon Apr 23 13:03:58 2001
.\"
.\" Standard preamble:
.\" ======================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R

.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used
.\" to do unbreakable dashes and therefore won't be available.  \*(C` and
.\" \*(C' expand to `' in nroff, nothing in troff, for use with C<>
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr
.\" for titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and
.\" index entries marked with X<> in POD.  Of course, you'll have to process
.\" the output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it
.\" makes way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.bd B 3
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ======================================================================
.\"
.IX Title "LWP::MediaTypes 3"
.TH LWP::MediaTypes 3 "libwww-perl-5.51" "1999-11-16" "User Contributed Perl Documentation"
.UC
.SH "NAME"
\&\s-1LWP:\s0:MediaTypes \- guess media type for a file or a \s-1URL\s0
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\& use LWP::MediaTypes qw(guess_media_type);
\& $type = guess_media_type("/tmp/foo.gif");
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module provides functions for handling media (also known as
\&\s-1MIME\s0) types and encodings.  The mapping from file extentions to media
types is defined by the \fImedia.types\fR file.  If the \fI~/.media.types\fR
file exists it is used instead.
For backwards compatability we will also look for \fI~/.mime.types\fR.
.PP
The following functions are exported by default:
.Ip "guess_media_type($filename_or_url, [$header_to_modify])" 4
.IX Item "guess_media_type($filename_or_url, [$header_to_modify])"
This function tries to guess media type and encoding for a file or url.
It returns the content-type, which is a string like \f(CW\*(C`"text/html"\*(C'\fR.
In array context it also returns any content-encodings applied (in the
order used to encode the file).  You can pass a \s-1URI\s0 object
reference, instead of the file name.
.Sp
If the type can not be deduced from looking at the file name,
then \fIguess_media_type()\fR will let the \f(CW\*(C`\-T\*(C'\fR Perl operator take a look.
If this works (and \f(CW\*(C`\-T\*(C'\fR returns a \s-1TRUE\s0 value) then we return
\&\fItext/plain\fR as the type, otherwise we return
\&\fIapplication/octet-stream\fR as the type.
.Sp
The optional second argument should be a reference to a \s-1HTTP:\s0:Headers
object or any object that implements the \f(CW$obj\fR->header method in a
similar way.  When it is present the values of the
\&'Content-Type' and 'Content-Encoding' will be set for this header.
.Ip "media_suffix($type,...)" 4
.IX Item "media_suffix($type,...)"
This function will return all suffixes that can be used to denote the
specified media \fItype\fR\|(s).  Wildcard types can be used.  In a scalar
context it will return the first suffix found.
.Sp
Examples:
.Sp
.Vb 2
\&  @suffixes = media_suffix('image/*', 'audio/basic');
\&  $suffix = media_suffix('text/html');
.Ve
.PP
The following functions are only exported by explict request:
.Ip "add_type($type, \f(CW@exts\fR)" 4
.IX Item "add_type($type, @exts)"
Associate a list of file extensions with the given media type.
.Sp
Example:
.Sp
.Vb 1
\&    add_type("x-world/x-vrml" => qw(wrl vrml));
.Ve
.Ip "add_encoding($type, \f(CW@ext\fR)" 4
.IX Item "add_encoding($type, @ext)"
Associate a list of file extensions with an encoding type.
.Sp
Example:
.Sp
.Vb 1
\& add_encoding("x-gzip" => "gz");
.Ve
.Ip "read_media_types(@files)" 4
.IX Item "read_media_types(@files)"
Parse media types files and add the type mappings found there.
.Sp
Example:
.Sp
.Vb 1
\&    read_media_types("conf/mime.types");
.Ve
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright 1995\-1999 Gisle Aas.
.PP
This library is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
