.\" Automatically generated by Pod::Man version 1.15
.\" Mon Apr 23 13:39:37 2001
.\"
.\" Standard preamble:
.\" ======================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R

.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used
.\" to do unbreakable dashes and therefore won't be available.  \*(C` and
.\" \*(C' expand to `' in nroff, nothing in troff, for use with C<>
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr
.\" for titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and
.\" index entries marked with X<> in POD.  Of course, you'll have to process
.\" the output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it
.\" makes way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.bd B 3
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ======================================================================
.\"
.IX Title "XML::Doctype::ElementDecl 3"
.TH XML::Doctype::ElementDecl 3 "perl v5.6.1" "2000-08-17" "User Contributed Perl Documentation"
.UC
.SH "NAME"
\&\s-1XML:\s0:Doctype::ElementDecl \- A class representing an <!ELEMENT> tag
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&   $elt = $dtd->element( 'foo' ) ;
\&   $elt->name() ;
\&   $elt->attr( 'foo' ) ;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module is used to represent <!ELEMENT> tags in an \s-1XML:\s0:Doctype object.
It contains <!ATTLIST> tags as well.
.SH "STATUS"
.IX Header "STATUS"
This module is alpha code.  It's developed enough to support \s-1XML:\s0:ValidWriter,
but need a lot of work.  Some big things that are lacking are:
.SH "METHODS"
.IX Header "METHODS"
.Ip "new" 4
.IX Item "new"
.Vb 3
\&   # Undefined element constructors:
\&   $dtd = XML::Doctype::ElementDecl->new( $name ) ;
\&   $dtd = XML::Doctype::ElementDecl->new( $name, undef, \e@attdefs ) ;
.Ve
.Vb 3
\&   # Defined element constructors
\&   $dtd = XML::Doctype::ElementDecl->new( $name, \e@kids, \e@attdef ) ;
\&   $dtd = XML::Doctype::ElementDecl->new( $name, [], \e@attdefs ) ;
.Ve
.Ip "add_attdef" 4
.IX Item "add_attdef"
.Vb 1
\&   $elt_decl->add_attdef( $att_def ) ;
.Ve
.Ip "attdef" 4
.IX Item "attdef"
.Vb 1
\&   $attr = $elt->attdef( $name ) ;
.Ve
Returns the \s-1XML:\s0:Doctype::AttDef named by \f(CW$name\fR or undef if there is no
such attribute.
.Ip "attdefs" 4
.IX Item "attdefs"
.Vb 1
\&   $attdefs = $elt->attdefs( $name ) ;
.Ve
Returns the list of \s-1XML:\s0:Doctype::AttDef instances associated with this
element.
.Ip "attribute_names" 4
.IX Item "attribute_names"
Returns a list of the attdefs' names.
.Ip "child_names" 4
.IX Item "child_names"
.Vb 1
\&   @names = $elt->child_names ;
.Ve
Returns a list of names of elements in this element decl's content model.
.Ip "is_declared" 4
.IX Item "is_declared"
.Vb 2
\&   if ( $elt_decl->is_declared ) ...
\&   $elt_decl->is_declared( 1 ) ;
.Ve
Returns \s-1TRUE\s0 if there is any data defined in the element other than name and
attributes or if is_declared has been set by calling is_declared( 1 ) or
passing \s-1DECLARED\s0 => 1 to \fInew()\fR.
.Ip "is_empty" 4
.IX Item "is_empty"
.PD 0
.Ip "is_any" 4
.IX Item "is_any"
.Ip "is_mixed" 4
.IX Item "is_mixed"
.Ip "name" 4
.IX Item "name"
.PD
.Vb 1
\&   $n = $elt_decl->name ;
.Ve
Gets the name of the element.
.Ip "validate_content" 4
.IX Item "validate_content"
.Vb 1
\&   $v = $elt_decl->validate_content( \e@seq ) ;
.Ve
Takes an \s-1ARRAY\s0 ref of tag names (or '#PCDATA') and checks to see if
it would be valid content for elements of this type.
.Sp
Right now, this must be called only when an element's end tag is
emitted.  It can be broadened to be incremental if need be.
.SH "SUBCLASSING"
.IX Header "SUBCLASSING"
This object uses the fields pragma, so you should use base and fields for
any subclasses.
.SH "AUTHOR"
.IX Header "AUTHOR"
Barrie Slaymaker <barries@slaysys.com>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
This module is Copyright 2000, Barrie Slaymaker.  All rights reserved.
.Sp
This module is licensed under the \s-1GPL\s0, version 2.  Please contact me if this
does not suit your needs.
