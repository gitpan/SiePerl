.\" Automatically generated by Pod::Man version 1.15
.\" Mon Apr 23 12:01:53 2001
.\"
.\" Standard preamble:
.\" ======================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R

.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used
.\" to do unbreakable dashes and therefore won't be available.  \*(C` and
.\" \*(C' expand to `' in nroff, nothing in troff, for use with C<>
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr
.\" for titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and
.\" index entries marked with X<> in POD.  Of course, you'll have to process
.\" the output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it
.\" makes way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.bd B 3
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ======================================================================
.\"
.IX Title "INTERP 1"
.TH INTERP 1 "perl v5.6.1" "2001-01-05" "User Contributed Perl Documentation"
.UC
.SH "NAME"
\&\s-1HTML:\s0:Mason::Interp \- Mason Component Interpreter
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&    my $i = new HTML::Mason::Interp (data_dir=>'/usr/local/mason',
\&                                     comp_root=>'/usr/local/www/htdocs/',
\&                                     ...other params...);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Interp is the Mason workhorse, executing components and routing their
output and errors to all the right places. In a mod_perl environment,
Interp objects are handed off immediately to an ApacheHandler object
which internally calls the Interp implementation methods. In that case
the only user method is the \fInew()\fR constructor.
.PP
If you want to call components outside of mod_perl (e.g. from \s-1CGI\s0 or a
stand-alone Perl script), see the \s-1STANDALONE\s0 \s-1MODE\s0 section below.
.SH "PARAMETERS FOR \fInew()\fP CONSTRUCTOR"
.IX Header "PARAMETERS FOR new() CONSTRUCTOR"
.Ip "allow_recursive_autohandlers" 4
.IX Item "allow_recursive_autohandlers"
True or undef. Default is true as of verison 0.85. If true,
autohandlers apply both to their own directories and all
subdirectories; if undef, only to their own directories. See the
Devel/autohandlers section of the Component Developer's Guide for a
discussion of the pros and cons.
.Ip "autohandler_name" 4
.IX Item "autohandler_name"
File name used for autohandlers. Default is \*(L"autohandler\*(R". If
undef, Mason will not look for autohandlers.
.Ip "code_cache_max_size" 4
.IX Item "code_cache_max_size"
Specifies the maximum size, in bytes, of the in-memory code cache
where components are stored. e.g.
.Sp
.Vb 2
\&    code_cache_max_size => 20*1024*1024
\&    code_cache_max_size => 20_000_000
.Ve
Default is 10 \s-1MB\s0. See the Admin/Code Cache section of the \fIAdmin Guide\fR
for further details.
.Ip "comp_root" 4
.IX Item "comp_root"
The required Mason component root. All components live under the comp_root.
.Sp
You may also specify multiple component roots to be searched in the
spirit of Perl's \f(CW@INC\fR. To do so you must specify a list of lists:
.Sp
.Vb 1
\&    comp_root => [[key1, root1], [key2, root2], ...]
.Ve
Each pair consists of a key and root.  The key is a string that
identifies the root mnemonically to a component developer.  Data cache
and object directories are split up by these keys to make sure
different components sharing the same path have different cache and
object files. The key is also included whenever Mason prints the
component title, as in an error message.
.Sp
For example:
.Sp
.Vb 1
\&    comp_root => [['private', '/usr/home/joe/comps'], ['main', '/usr/local/www/htdocs']]
.Ve
This specifies two component roots, a main component tree and a
private tree which overrides certain components.  The order is
respected ala \f(CW@INC\fR, so 'private' is searched first and 'main' second.
.Ip "current_time" 4
.IX Item "current_time"
Overrides the time returned by \f(CW$m\fR->time with a fixed Perl \fItime()\fR value
(seconds since the epoch). On time-sensitive sites, this can be used
to set up port-based time/date simulations, e.g. a port that looks one
day into the future.
.Sp
With no current_time parameter (the default), \f(CW$m\fR->time reports the
true time.
.Ip "data_dir" 4
.IX Item "data_dir"
The required Mason data directory. Mason's various data directories
(obj, cache, debug, etc), live within the data_dir.
.Ip "data_cache_dir" 4
.IX Item "data_cache_dir"
Specifies an absolute directory for data cache files. By default, it lives
under \f(CW\*(C`data_dir\*(C'\fR/cache.
.Ip "dhandler_name" 4
.IX Item "dhandler_name"
File name used for dhandlers. Default is \*(L"dhandler\*(R". If
undef, Mason will not look for dhandlers.
.Ip "max_recurse" 4
.IX Item "max_recurse"
The maximum component stack depth the interpreter is allowed to
descend before signalling an error.  Default is 32.
.Ip "out_method" 4
.IX Item "out_method"
Indicates where to send output. If out_method is a reference to a
scalar, output is appended to the scalar.  If out_method is a
reference to a subroutine, the subroutine is called with each output
string. For example, to send output to a file called \*(L"mason.out\*(R":
.Sp
.Vb 3
\&    my $fh = new IO::File ">mason.out";
\&    ...
\&    out_method => sub { $fh->print($_[0]) }
.Ve
By default, out_method prints to standard output. (In a mod_perl
environment this is automatically redirected to the \s-1HTTP\s0 client.)
.Ip "out_mode" 4
.IX Item "out_mode"
Specifies one of two ways to send output, 'batch' or 'stream'.  In
batch mode Mason computes the entire page in a memory buffer and then
transmits it all at once. In stream mode Mason outputs data as soon as
it is computed. (This does not take into account buffering done by
Apache or the O/S.) The default mode is batch.  See the 
Admin/staging vs production section of the \fIAdmin Guide\fR for a
discussion of the trade-offs.
.Ip "parser" 4
.IX Item "parser"
Parser object for compiling components on the fly. If omitted, creates
a parser with default parameters.
.Ip "preloads" 4
.IX Item "preloads"
A list of component paths, optionally with glob wildcards, to load
when the interpreter initializes. e.g.
.Sp
.Vb 1
\&    preloads => ['/foo/index.html','/bar/*.pl']
.Ve
Default is the empty list. This should only be used for components that
are frequently viewed and rarely updated.  See the Admin/preloading
section of the \fIAdmin Guide\fR for further details.
.Ip "static_file_root" 4
.IX Item "static_file_root"
Absolute path to prepend to relative filenames passed to \f(CW\*(C`$m\->file()\*(C'\fR. Does
not require a trailing slash. For example, if the file root is
\&'/foo/bar', then \f(CW\*(C`$m\->file('baz/bap')\*(C'\fR will read the file
\&'/foo/bar/baz/bap'. Undefined by default; if left undefined,
relative path names to \f(CW\*(C`$m\->file()\*(C'\fR are prepended with the
current component directory.
.Ip "system_log_events" 4
.IX Item "system_log_events"
A string value indicating one or more events to record in the system
log, separated by \*(L"|\*(R". Default is to log nothing.
.Ip "system_log_file" 4
.IX Item "system_log_file"
Absolute path of system log.  Default is data_dir/etc/system.log.
.Ip "system_log_separator" 4
.IX Item "system_log_separator"
Separator to use between fields on a line in the system log. Default is ctrl-A (\*(L"\ecA\*(R").
.Ip "use_data_cache" 4
.IX Item "use_data_cache"
True or undef, default is true. Specifies whether the \f(CW$m\fR->cache and
related commands are operational.  You may need to disable data
caching temporarily for debugging purposes, but normally this should
be left alone.
.Ip "use_object_files" 4
.IX Item "use_object_files"
True or undef, default is true.  Specifies whether Mason creates
object files to save the results of component parsing. You may want to
turn off object files for disk space reasons, but otherwise this
should be left alone.
.Ip "use_reload_file" 4
.IX Item "use_reload_file"
True or undef, default is undef. If true, disables Mason's automatic
timestamp checking on component source files, relying instead on an
explicitly updated Admin/reload file.
.Ip "verbose_compile_error" 4
.IX Item "verbose_compile_error"
True or undef, default is undef. If true, component compile errors are
followed with the full component source, annotated with line numbers,
to better interpret the error message. Does not affect runtime errors.
.SH "ACCESSOR METHODS"
.IX Header "ACCESSOR METHODS"
All of the above properties have standard accessor methods of the same
name. In general, no arguments retrieves the value, and one argument
sets and returns the value.  For example:
.PP
.Vb 4
\&    my $interp = new HTML::Mason::Interp (...);
\&    my $p = $interp->parser;
\&    my $comproot = $interp->comp_root;
\&    $interp->out_method(\e$buf);
.Ve
The following properties can be queried but not modified:
comp_root, data_dir, system_log_file, system_log_separator, preloads.
.SH "OTHER METHODS"
.IX Header "OTHER METHODS"
.Ip "set_global ($varname, [values...])" 4
.IX Item "set_global ($varname, [values...])"
This method sets a global to be used in components. \f(CW\*(C`varname\*(C'\fR is a
variable name, optionally preceded with a prefix (\f(CW\*(C`$\*(C'\fR, \f(CW\*(C`@\*(C'\fR, or
\&\f(CW\*(C`%\*(C'\fR); if the prefix is omitted then \f(CW\*(C`$\*(C'\fR is assumed. \f(CW\*(C`varname\*(C'\fR is
followed by a value, in the case of a scalar, or by one or more values
in the case of a list or hash.  For example:
.Sp
.Vb 2
\&    # Set a global variable $dbh containing the database handle
\&    $interp->set_global(dbh => DBI->connect(...));
.Ve
.Vb 2
\&    # Set a global hash %session from a local hash
\&    $interp->set_global('%session', %s);
.Ve
The global is set in the package that components run in: usually
\&\f(CW\*(C`HTML::Mason::Commands\*(C'\fR, although this can be overridden via the
Parser parameter Parser/in_package.  The lines above, for example,
are equivalent to:
.Sp
.Vb 2
\&    $HTML::Mason::Commands::dbh = DBI->connect(...);
\&    %HTML::Mason::Commands::session = %s;
.Ve
assuming that \f(CW\*(C`in_package\*(C'\fR has not been changed.
.Sp
Any global that you set should also be registered with the Parser
parameter Parser/allow_globals; otherwise you'll get warnings from
\&\f(CW\*(C`strict\*(C'\fR.
.SH "STANDALONE MODE"
.IX Header "STANDALONE MODE"
Although Mason is most commonly used in conjunction with mod_perl,
there is also a functional \s-1API\s0 that allows you to use Mason from \s-1CGI\s0
programs or from stand-alone Perl scripts.  In the latter case Mason can be
used as a glorified Text::Template, producing a set of
files from components, or used to generate a flat version of a componentized site.
.PP
When using Mason outside of mod_perl, just create a Parser and Interp
object; you do not need the ApacheHandler object.  Once you've created
an interpreter, the main thing you'll want to do with it is call a
component and do something with the output. To call a component, use
Interp's \fIexec()\fR method:
.PP
.Vb 1
\&    $interp->exec(<comp> [,<..list of component params..>]);
.Ve
where \fIcomp\fR is a component path or component object.
.PP
Component parameters are given as a series of name/value pairs, just
as they are with \f(CW\*(C`$m\->comp\*(C'\fR. exec returns the return value of
the component. Component output is sent to standard output by default,
but you can change this by specifying \f(CW\*(C`out_method\*(C'\fR.
.PP
Here is a skeleton script that calls a component and places the output
in a file:
.PP
.Vb 11
\&    my $outbuf;
\&    my $parser = new HTML::Mason::Parser;
\&    my $interp = new HTML::Mason::Interp (parser=>$parser,
\&                                          comp_root=>'<component root>',
\&                                          data_dir=>'<data directory>',
\&                                          out_method=>\e$outbuf);
\&    my $retval = $interp->exec('<component path>',<args>...);
\&    open(F,">mason.out");
\&    print F $outbuf;
\&    close(F);
\&    print "return value of component was: $retval\en";
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Jonathan Swartz, swartz@pobox.com
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\s-1HTML:\s0:Mason,
\&\s-1HTML:\s0:Mason::Parser,
\&\s-1HTML:\s0:Mason::ApacheHandler,
\&\s-1HTML:\s0:Mason::Admin
