.\" Automatically generated by Pod::Man version 1.15
.\" Mon Apr 23 13:12:00 2001
.\"
.\" Standard preamble:
.\" ======================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R

.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used
.\" to do unbreakable dashes and therefore won't be available.  \*(C` and
.\" \*(C' expand to `' in nroff, nothing in troff, for use with C<>
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr
.\" for titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and
.\" index entries marked with X<> in POD.  Of course, you'll have to process
.\" the output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it
.\" makes way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.bd B 3
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ======================================================================
.\"
.IX Title "Agent::Driver::File 3"
.TH Agent::Driver::File 3 "perl v5.6.1" "2001-03-14" "User Contributed Perl Documentation"
.UC
.SH "NAME"
Log::Agent::Driver::File \- file logging driver for Log::Agent
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\& use Log::Agent;
\& require Log::Agent::Driver::File;
.Ve
.Vb 13
\& my $driver = Log::Agent::Driver::File->make(
\&     -prefix     => "prefix",
\&     -duperr     => 1,
\&     -stampfmt   => "own",
\&     -showpid    => 1,
\&     -magic_open => 0,
\&     -channels   => {
\&        'error'   => '/tmp/output.err',
\&        'output'  => 'log.out',
\&        'debug'   => '../appli.debug',
\&     },
\& );
\& logconfig(-driver => $driver);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The file logging driver redirects \fIlogxxx()\fR operations to specified files,
one per channel usually (but channels may go to the same file).
.PP
The creation routine \fImake()\fR takes the following arguments:
.if n .Ip "\f(CW""""\-channels""""\fR => \fIhash ref\fR" 4
.el .Ip "\f(CW\-channels\fR => \fIhash ref\fR" 4
.IX Item "-channels => hash ref"
Specifies where channels go. The supplied hash maps channel names
(\f(CW\*(C`error\*(C'\fR, \f(CW\*(C`output\*(C'\fR and \f(CW\*(C`debug\*(C'\fR) to filenames. When \f(CW\*(C`\-magic_open\*(C'\fR is
set to true, filenames are allowed magic processing via perl's \fIopen()\fR, so
this allows things like:
.Sp
.Vb 5
\&    -channels => {
\&        'error'   => '>&FILE',
\&        'output'  => '>newlog',   # recreate each time, don't append
\&        'debug'  => '|mailx -s whatever user',
\&    }
.Ve
If a channel (e.g. 'output') is not specified, it will go to the 'error'
channel, and if that one is not specified either, it will go to \s-1STDERR\s0 instead.
.Sp
If you have installed the additional \f(CW\*(C`Log::Agent::Rotate\*(C'\fR module, it is
also possible to override any default rotating policy setup via the \f(CW\*(C`\-rotate\*(C'\fR
argument: instead of supplying the channel as a single string, use an array
reference where the first item is the channel file, and the second one is
the \f(CW\*(C`Log::Agent::Rotate\*(C'\fR configuration:
.Sp
.Vb 6
\&    my $rotate = Log::Agent::Rotate->make(
\&        -backlog     => 7,
\&        -unzipped    => 2,
\&        -max_write   => 100_000,
\&        -is_alone    => 1,
\&    );
.Ve
.Vb 10
\&    my $driver = Log::Agent::Driver::File->make(
\&        ...
\&        -channels => {
\&            'error'  => ['errors', $rotate],
\&            'output' => ['output, $rotate],
\&            'debug'  => ['>&FILE, $rotate],    # WRONG
\&        },
\&        -magic_open => 1,
\&        ...
\&    );
.Ve
In the above example, the rotation policy for the \f(CW\*(C`debug\*(C'\fR channel will
not be activated, since the channel is opened via a \fImagic\fR method.
See the Log::Agent::Rotate manpage for more details.
.if n .Ip "\f(CW""""\-duperr""""\fR => \fIflag\fR" 4
.el .Ip "\f(CW\-duperr\fR => \fIflag\fR" 4
.IX Item "-duperr => flag"
When true, all messages normally sent to the \f(CW\*(C`error\*(C'\fR channel are also
copied to the \f(CW\*(C`output\*(C'\fR channel with a prefixing made to clearly mark
them as such: \*(L"\s-1FATAL:\s0 \*(R" for \fIlogdie()\fR, \fIlogcroak()\fR and \fIlogconfess()\fR,
\&\*(L"\s-1ERROR:\s0 \*(R" for \fIlogerr()\fR and \*(L"\s-1WARNING:\s0 \*(R" for \fIlogwarn()\fR.
.Sp
Note that the \*(L"duplicate\*(R" is the original error string for \fIlogconfess()\fR
and \fIlogcroak()\fR, and is not strictly identical to the message that will be
logged to the \f(CW\*(C`error\*(C'\fR channel.  This is a an accidental feature.
.Sp
Default is false.
.if n .Ip "\f(CW""""\-file""""\fR => \fIfile\fR" 4
.el .Ip "\f(CW\-file\fR => \fIfile\fR" 4
.IX Item "-file => file"
This switch supersedes both \f(CW\*(C`\-duperr\*(C'\fR and \f(CW\*(C`\-channels\*(C'\fR by defining a
single file for all the channels.
.if n .Ip "\f(CW""""\-magic_open""""\fR => \fIflag\fR" 4
.el .Ip "\f(CW\-magic_open\fR => \fIflag\fR" 4
.IX Item "-magic_open => flag"
When true, channel filenames beginning with '>' or '|' are opened using
Perl's \fIopen()\fR. Otherwise, \fIsysopen()\fR is used, in append mode.
.Sp
Default is false.
.if n .Ip "\f(CW""""\-prefix""""\fR => \fIprefix\fR" 4
.el .Ip "\f(CW\-prefix\fR => \fIprefix\fR" 4
.IX Item "-prefix => prefix"
The application prefix string to prepend to messages.
.if n .Ip "\f(CW""""\-rotate""""\fR => \fIobject\fR" 4
.el .Ip "\f(CW\-rotate\fR => \fIobject\fR" 4
.IX Item "-rotate => object"
This sets a default logfile rotation policy.  You need to install the
additional \f(CW\*(C`Log::Agent::Rotate\*(C'\fR module to use this switch.
.Sp
\&\fIobject\fR is the \f(CW\*(C`Log::Agent::Rotate\*(C'\fR instance describing the default
policy for all the channels.  Only files which are not opened via a
so-called \fImagic open\fR can be rotated.
.if n .Ip "\f(CW""""\-showpid""""\fR => \fIflag\fR" 4
.el .Ip "\f(CW\-showpid\fR => \fIflag\fR" 4
.IX Item "-showpid => flag"
If set to true, the \s-1PID\s0 of the process will be appended within square
brackets after the prefix, to all messages.
.Sp
Default is false.
.if n .Ip "\f(CW""""\-stampfmt""""\fR => (\fIname\fR | \fI\s-1CODE\s0\fR)" 4
.el .Ip "\f(CW\-stampfmt\fR => (\fIname\fR | \fI\s-1CODE\s0\fR)" 4
.IX Item "-stampfmt => (name | CODE)"
Specifies the time stamp format to use. By default, my \*(L"own\*(R" format is used.
The following formats are available:
.Sp
.Vb 4
\&    date      "[Fri Oct 22 16:23:10 1999]"
\&    none
\&    own       "99/10/22 16:23:10"
\&    syslog    "Oct 22 16:23:10".
.Ve
You may also specify a \s-1CODE\s0 ref: that routine will be called every time
we need to compute a time stamp. It should not expect any parameter, and
should return a string.
.SH "CHANNELS"
.IX Header "CHANNELS"
All the channels go to the specified files. If a channel is not configured,
it is redirected to 'error', or \s-1STDERR\s0 if no 'error' channel was configured
either.
.PP
Two channels not opened via a \fImagic\fR open and whose logfile name is the
same are effectively \fIshared\fR, i.e. the same file descriptor is used for
both of them. If you supply distinct rotation policies (e.g. by having a
default policy, and supplying another policy to one of the channel only),
then the final rotation policy will depend on which one was opened first.
So don't do that.
.SH "CAVEAT"
.IX Header "CAVEAT"
Beware of \fIchdir()\fR.  If your program uses \fIchdir()\fR, you should always specify
logfiles by using absolute paths, otherwise you run the risk of having
your relative paths become invalid: there is no anchoring done at the time
you specify them.  This is especially true when configured for rotation,
since the logfiles are recreated as needed and you might end up with many
logfiles scattered throughout all the directories you \fIchdir()\fRed to.
.PP
Logging channels with the same pathname are shared, i.e. they are only
opened once by \f(CW\*(C`Log::Agent::Driver::File\*(C'\fR.  Therefore, if you specify
different rotation policy to such channels, the channel opening order will
determine which of the policies will be used for all such shared channels.
Such errors are flagged at runtime with the following message:
.PP
.Vb 1
\& Rotation for 'logfile' may be wrong (shared with distinct policies)
.Ve
emitted in the logs upon subsequent sharing.
.SH "AUTHOR"
.IX Header "AUTHOR"
Raphael Manfredi \fI<Raphael_Manfredi@pobox.com>\fR
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fILog::Agent::Driver\fR\|(3), \fILog::Agent\fR\|(3), \fILog::Agent::Rotate\fR\|(3).
