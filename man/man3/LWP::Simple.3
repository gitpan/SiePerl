.\" Automatically generated by Pod::Man version 1.15
.\" Mon Apr 23 13:01:43 2001
.\"
.\" Standard preamble:
.\" ======================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R

.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used
.\" to do unbreakable dashes and therefore won't be available.  \*(C` and
.\" \*(C' expand to `' in nroff, nothing in troff, for use with C<>
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr
.\" for titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and
.\" index entries marked with X<> in POD.  Of course, you'll have to process
.\" the output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it
.\" makes way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.bd B 3
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ======================================================================
.\"
.IX Title "LWP::Simple 3"
.TH LWP::Simple 3 "libwww-perl-5.51" "2000-05-24" "User Contributed Perl Documentation"
.UC
.SH "NAME"
get, head, getprint, getstore, mirror \- Procedural \s-1LWP\s0 interface
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& perl -MLWP::Simple -e 'getprint "http://www.sn.no"'
.Ve
.Vb 5
\& use LWP::Simple;
\& $content = get("http://www.sn.no/")
\& if (mirror("http://www.sn.no/", "foo") == RC_NOT_MODIFIED) {
\&     ...
\& }
.Ve
.Vb 3
\& if (is_success(getprint("http://www.sn.no/"))) {
\&     ...
\& }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This interface is intended for those who want a simplified view of the
libwww-perl library.  It should also be suitable for one-liners.  If
you need more control or access to the header fields in the requests
sent and responses received you should use the full object oriented
interface provided by the \f(CW\*(C`LWP::UserAgent\*(C'\fR module.
.PP
The following functions are provided (and exported) by this module:
.Ip "get($url)" 3
.IX Item "get($url)"
The \fIget()\fR function will fetch the document identified by the given \s-1URL\s0
and return it.  It returns \f(CW\*(C`undef\*(C'\fR if it fails.  The \f(CW$url\fR argument can
be either a simple string or a reference to a \s-1URI\s0 object.
.Sp
You will not be able to examine the response code or response headers
(like 'Content-Type') when you are accessing the web using this
function.  If you need that information you should use the full \s-1OO\s0
interface (see the LWP::UserAgent manpage).
.Ip "head($url)" 3
.IX Item "head($url)"
Get document headers. Returns the following 5 values if successful:
($content_type, \f(CW$document_length\fR, \f(CW$modified_time\fR, \f(CW$expires\fR, \f(CW$server\fR)
.Sp
Returns an empty list if it fails.  In scalar context returns \s-1TRUE\s0 if
successful.
.Ip "getprint($url)" 3
.IX Item "getprint($url)"
Get and print a document identified by a \s-1URL\s0. The document is printed
to \s-1STDOUT\s0 as data is received from the network.  If the request fails,
then the status code and message are printed on \s-1STDERR\s0.  The return
value is the \s-1HTTP\s0 response code.
.Ip "getstore($url, \f(CW$file\fR)" 3
.IX Item "getstore($url, $file)"
Gets a document identified by a \s-1URL\s0 and stores it in the file. The
return value is the \s-1HTTP\s0 response code.
.Ip "mirror($url, \f(CW$file\fR)" 3
.IX Item "mirror($url, $file)"
Get and store a document identified by a \s-1URL\s0, using
\&\fIIf-modified-since\fR, and checking the \fIContent-Length\fR.  Returns
the \s-1HTTP\s0 response code.
.PP
This module also exports the \s-1HTTP:\s0:Status constants and procedures.
These can be used when you check the response code from \fIgetprint()\fR,
\&\fIgetstore()\fR and \fImirror()\fR.  The constants are:
.PP
.Vb 37
\&   RC_CONTINUE
\&   RC_SWITCHING_PROTOCOLS
\&   RC_OK
\&   RC_CREATED
\&   RC_ACCEPTED
\&   RC_NON_AUTHORITATIVE_INFORMATION
\&   RC_NO_CONTENT
\&   RC_RESET_CONTENT
\&   RC_PARTIAL_CONTENT
\&   RC_MULTIPLE_CHOICES
\&   RC_MOVED_PERMANENTLY
\&   RC_MOVED_TEMPORARILY
\&   RC_SEE_OTHER
\&   RC_NOT_MODIFIED
\&   RC_USE_PROXY
\&   RC_BAD_REQUEST
\&   RC_UNAUTHORIZED
\&   RC_PAYMENT_REQUIRED
\&   RC_FORBIDDEN
\&   RC_NOT_FOUND
\&   RC_METHOD_NOT_ALLOWED
\&   RC_NOT_ACCEPTABLE
\&   RC_PROXY_AUTHENTICATION_REQUIRED
\&   RC_REQUEST_TIMEOUT
\&   RC_CONFLICT
\&   RC_GONE
\&   RC_LENGTH_REQUIRED
\&   RC_PRECONDITION_FAILED
\&   RC_REQUEST_ENTITY_TOO_LARGE
\&   RC_REQUEST_URI_TOO_LARGE
\&   RC_UNSUPPORTED_MEDIA_TYPE
\&   RC_INTERNAL_SERVER_ERROR
\&   RC_NOT_IMPLEMENTED
\&   RC_BAD_GATEWAY
\&   RC_SERVICE_UNAVAILABLE
\&   RC_GATEWAY_TIMEOUT
\&   RC_HTTP_VERSION_NOT_SUPPORTED
.Ve
The \s-1HTTP:\s0:Status classification functions are:
.Ip "is_success($rc)" 3
.IX Item "is_success($rc)"
True if response code indicated a successful request.
.Ip "is_error($rc)" 3
.IX Item "is_error($rc)"
True if response code indicated that an error occured.
.PP
The module will also export the \s-1LWP:\s0:UserAgent object as \f(CW\*(C`$ua\*(C'\fR if you
ask for it explicitly.
.PP
The user agent created by this module will identify itself as
\&\*(L"\s-1LWP:\s0:Simple/#.##\*(R" (where \*(L"#.##\*(R" is the libwww-perl version number)
and will initialize its proxy defaults from the environment (by
calling \f(CW$ua\fR->env_proxy).
.SH "SEE ALSO"
.IX Header "SEE ALSO"
the LWP manpage, the LWP::UserAgent manpage, the HTTP::Status manpage, the lwp-request manpage,
the lwp-mirror manpage
