.\" Automatically generated by Pod::Man version 1.15
.\" Fri Apr 20 15:45:57 2001
.\"
.\" Standard preamble:
.\" ======================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R

.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used
.\" to do unbreakable dashes and therefore won't be available.  \*(C` and
.\" \*(C' expand to `' in nroff, nothing in troff, for use with C<>
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr
.\" for titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and
.\" index entries marked with X<> in POD.  Of course, you'll have to process
.\" the output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it
.\" makes way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.bd B 3
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ======================================================================
.\"
.IX Title "ObjScanner 3"
.TH ObjScanner 3 "perl v5.6.1" "2001-01-17" "User Contributed Perl Documentation"
.UC
.SH "NAME"
Tk::ObjScanner \- Tk data scanner
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Tk::ObjScanner;
.Ve
.Vb 2
\&  my $scanner = $mw->ObjScanner( caller => $object, 
\&                                 title=>"windows") -> pack ;
.Ve
.Vb 11
\&  my $mw -> ObjScanner
\&  (
\&   caller                   => $object,
\&   title                    => 'demo setting the scanner options',
\&   background       => 'white',
\&   selectbackground => 'beige',
\&   foldImage            => $mw->Photo(-file => Tk->findINC('folder.xpm')),
\&   openImage            => $mw->Photo(-file => Tk->findINC('openfolder.xpm')),
\&   itemImage            => $mw->Photo(-file => Tk->findINC('textfile.xpm')),
\&  )
\&  -> pack(expand => 1, fill => 'both') ;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The scanner provides a \s-1GUI\s0 to scan the attributes of an object. It can
also be used to scan the elements of a hash or an array.
.PP
The scanner is a composite widget made of a the Tk::HList manpage and a text
window (actually a the TK::ROText manpage). This widget acts as a scanner to
the object (or hash ref) passed with the 'caller' parameter. The
scanner will retrieve all keys of the hash/object and insert them in
the HList.
.PP
When the user double clicks on a key, the corresponding value will be added
in the HList.
.PP
If the value is a scalar, the scalar will be displayed in the text window.
(Which is handy if the value is a multi-line string)
.SH "Constructor parameters"
.IX Header "Constructor parameters"
.Ip "\(bu" 4
caller: The ref of the object or hash or array to scan (mandatory).
.Ip "\(bu" 4
title: the title of the menu created by the scanner (optional)
.Ip "\(bu" 4
destroyable: If set, a menu entry will allow the user to destroy the scanner
widget. (optional, default 1) . You may want to set this parameter to 0 if
the destroy can be managed by a higher level object.
.Ip "\(bu" 4
background: the background color for subwidgets (optional)
.Ip "\(bu" 4
selectbackground: the select background color for HList (optional)
.Ip "\(bu" 4
itemImage: the image for a scalar item (optional, default 'file.xbm')
.Ip "\(bu" 4
foldImage: the image for a composite item (array or hash) when closed (optional, default 'folder.xbm')
.Ip "\(bu" 4
openImage: the image for a composite item (array or hash) when open (optional, default 'openfolder.xbm')
.SH "WIDGET-SPECIFIC METHODS"
.IX Header "WIDGET-SPECIFIC METHODS"
.Sh "updateListBox"
.IX Subsection "updateListBox"
Update the keys of the listbox. This method may be handy if the
scanned object wants to update the listbox of the scanner 
when the scanned object gets new attributes.
.SH "CAVEATS"
.IX Header "CAVEATS"
The name of the widget is misleading as any data (not only object) may
be scanned. This widget is in fact a DataScanner.
.PP
ObjScanner may fail if an object involves a lot of internal perl
magic.  In this case, I'd be glad to hear about and I'll try to fix
the problem.
.PP
ObjScanner does not detect recursive data structures. It will just
keep on displaying the tree until the user gets tired of clicking on
the HList items.
.PP
There's no sure way to detect if a reference is a pseudo-hash or
not. When a reference is believed to be a pseudo-hash, ObjScanner will
display the content of the reference like a hash. If the reference is
should not be displayed like a pseudo-hash, you can turn off the
pseudo-hash view with the check button on the top right of the widget.
.SH "THANKS"
.IX Header "THANKS"
To Rudi Farkas for all the improvements provided to ObjScanner.
.PP
To Slaven Rezic for the propotype code of the pseudo-hash viewer.
.SH "AUTHOR"
.IX Header "AUTHOR"
Dominique Dumont, Dominique_Dumont@grenoble.hp.com
.PP
Copyright (c) 1997\-2001 Dominique Dumont. All rights reserved.
This program is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIperl\fR\|(1), \fITk\fR\|(3), \fITk::HList\fR\|(3)
