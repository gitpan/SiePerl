.\" Automatically generated by Pod::Man version 1.15
.\" Fri Apr 20 15:43:16 2001
.\"
.\" Standard preamble:
.\" ======================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R

.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used
.\" to do unbreakable dashes and therefore won't be available.  \*(C` and
.\" \*(C' expand to `' in nroff, nothing in troff, for use with C<>
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr
.\" for titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and
.\" index entries marked with X<> in POD.  Of course, you'll have to process
.\" the output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it
.\" makes way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.bd B 3
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ======================================================================
.\"
.IX Title "MesgBox 3"
.TH MesgBox 3 "perl v5.6.1" "2000-09-16" "User Contributed Perl Documentation"
.UC
.SH "NAME"
MesgBox \- Perl/Tk module for message and button dialogue boxes.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use MesgBox;
.Ve
.Vb 2
\&    # Example 1: an 'OK' box.
\&    # Pressing <Space>, <Return>, <o>, <Control-o> or <Alt-o> will close the box.
.Ve
.Vb 2
\&    my $msg = $Window->MesgBox(-title => 'Test', -text => 'Test Complete.');
\&    $msg->Show;
.Ve
.Vb 4
\&    # Example 2: a 'Yes/No' box.
\&    # Pressing <Space>, <Return>, <y>, <Control-y> or <Alt-y> 
\&    # presses the 'Yes' button;
\&    # pressing <n>, <Control-n> or <Alt-n> presses the 'No' button.
.Ve
.Vb 9
\&    my $msg = $Window->MesgBox(
\&        -title     => 'Save File?',
\&        -text      => "Save '$filename'?",
\&        -icon      => 'QUESTION',
\&        -buttons   => ['Yes', 'No'],
\&        -defbutton => 'Yes',
\&        );
\&    my $ans = $msg->Show;
\&    &save_file if $ans eq 'Yes';
.Ve
.Vb 5
\&    # Example 3: an 'OK/Cancel' box.
\&    # Pressing <Space>, <Return>, <o>, <Control-o> or <Alt-o> presses the 'OK'
\&    # button;
\&    # pressing <Escape>, <c>, <Control-c> or <Alt-c> presses the 'Cancel'
\&    # button.
.Ve
.Vb 7
\&    my $msg = $Window->MesgBox(
\&        -title   => 'Print',
\&        -text    => 'Print the page',
\&        -buttons => ['OK', 'Cancel'],
\&        );
\&    my $ans = $msg->Show;
\&    &print if $ans eq 'OK';
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This message box is similar to the MsgBox function provided with Windows. It
provides a message text with an optional 'icon' and any buttons required. It
is not as versatile as the Dialog box supplied with Tk but is simpler, and
it provides automatic keyboard bindings.
.PP
All options are optional, although defining a \f(CW\*(C`\-title\*(C'\fR and \f(CW\*(C`\-text\*(C'\fR is
only sensible. Leaving out everything else will provide a simple \s-1OK\s0 button.
.PP
The keyboard is bound such that the first letter of each button is bound both
as a letter alone and in conjunction with both Control and Alt. This letter is
also displayed underlined. It is recommended that each button's text begins
with a unique letter. Any button with the text '\s-1OK\s0' will be the default button
responding to <Return>, unless overridden by the \f(CW\*(C`\-defbutton\*(C'\fR option. Any
button with the text 'Cancel' will be the default cancel button responding to
<Escape> unless overridden by the \f(CW\*(C`\-canbutton\*(C'\fR option.
.PP
\&\f(CW\*(C`\-title\*(C'\fR is the text which appears in the title bar.
.PP
\&\f(CW\*(C`\-text\*(C'\fR is the text which appears in the body of the message. It may include
newlines which are respected, but it will wrap.
.PP
\&\f(CW\*(C`\-icon\*(C'\fR is the 'icon' which appears to the left of the message. It may be one
of Tk's standard bitmaps: info 'i', error '(\e)', warning '!', question '?'; or
one of the MesgBox versions: \s-1INFO\s0 'i', \s-1ERROR\s0 'E', \s-1WARNING\s0 '!', \s-1QUESTION\s0 '?'. It
may be undefined meaning no image appears.
.PP
\&\f(CW\*(C`\-defbutton\*(C'\fR is the default button. It defaults to the '\s-1OK\s0' button if there
is one. The default button is the button 'pressed' when the user presses
<Return>.
.PP
\&\f(CW\*(C`\-canbutton\*(C'\fR is the cancel button. It defaults to the 'Cancel' button if there
is one. The cancel button is the button 'pressed' when the user presses
<Escape>.
.PP
\&\f(CW\*(C`\-buttons\*(C'\fR is an array of button captions. By default it is set to a list
consisting of one element, '\s-1OK\s0'. You may use any text, e.g. '\s-1OK\s0', 'Cancel',
\&'Yes', 'Retry', etc. You may have as many buttons as you like \- although too
many might not fit on the screen...
.PP
\&\f(CW\*(C`\-aspect\*(C'\fR is the ratio of width to height. Generally increase this past the
default of 200, say to 300, 400 or 500 to make the message box wider and
shorter.
.PP
\&\f(CW\*(C`\-justify\*(C'\fR sets the justification for the \f(CW\*(C`\-text\*(C'\fR \- may be 'center', 'left'
or 'right'. Defaults to 'center'.
.PP
\&\f(CW\*(C`\-textfg\*(C'\fR sets the foreground colour for the \f(CW\*(C`\-text\*(C'\fR; default is black.
.PP
\&\f(CW\*(C`\-textbg\*(C'\fR sets the background colour for the \f(CW\*(C`\-text\*(C'\fR; default is lightgrey.
.PP
\&\f(CW\*(C`\-buttonfont\*(C'\fR sets the font for the button; default is 12pt Helvetica.
.PP
\&\f(CW\*(C`\-bindctrl\*(C'\fR sets the keyboard bindings to include <Control-$letter>, defaults
to true.
.PP
\&\f(CW\*(C`\-bindalt\*(C'\fR sets the keyboard bindings to include <Alt-$letter>, defaults
to true.
.PP
\&\f(CW\*(C`\-bindord\*(C'\fR sets the keyboard bindings to include <$letter>, defaults
to true.
.PP
\&\f(CW\*(C`\-buttonpadx\*(C'\fR sets the left and right padding around the button, defaults to
0.
.PP
\&\f(CW\*(C`\-buttonpady\*(C'\fR sets the above and below padding around the button, defaults to
0.
.PP
\&\f(CW\*(C`\-buttonfg\*(C'\fR sets the button foreground colour, defaults to black.
.PP
\&\f(CW\*(C`\-buttonbg\*(C'\fR sets the button foreground colour, defaults to lightgrey.
.PP
\&\f(CW\*(C`\-buttonHL\*(C'\fR sets the button highlight colour, defaults to lightgrey.
.SH "INSTALLATION"
.IX Header "INSTALLATION"
MesgBox.pm should be placed in any Tk directory in any lib directory in
Perl's \f(CW%INC\fR path, for example, '/usr/lib/perl5/Tk'.
.SH "BUGS"
.IX Header "BUGS"
MesgBox does almost no error checking.
.SH "CHANGES"
.IX Header "CHANGES"
1999/01/18  First public release.
.PP
1999/01/22  Minor documentation changes.
.PP
1999/01/23  Tidied up set_icon.
.PP
1999/02/23  Should now be Windows compatible.
.PP
1999/08/05  Just changed the files to make them more \s-1CPAN\s0 friendly.
.PP
1999/08/08  Changed licence to \s-1LGPL\s0.
.PP
1999/09/06  Minor change to packaging for \s-1CPAN\s0.
.PP
1999/10/01  Changed the \fIShow()\fR method so that it is now compatible with
            Tk800.015 as well as earlier Tk800 versions.
.PP
2000/05/05  Minor increment because I accidentally deleted it from \s-1CPAN\s0.
.PP
2000/09/16  Added new options to control colours and padding: almost all the
            new code was supplied by Daniel Berger.
.SH "AUTHOR"
.IX Header "AUTHOR"
Mark Summerfield. I can be contacted as <summer@perlpress.com> \-
please include the word 'mesgbox' in the subject line.
.PP
The code draws very heavily from Stephen O. Lidie's Dialog.pm module.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) Mark Summerfield 1999,2000. All Rights Reserved.
.PP
This module may be used/distributed/modified under the \s-1LGPL\s0. 
