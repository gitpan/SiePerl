.\" Automatically generated by Pod::Man version 1.15
.\" Mon Apr 23 13:01:58 2001
.\"
.\" Standard preamble:
.\" ======================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R

.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used
.\" to do unbreakable dashes and therefore won't be available.  \*(C` and
.\" \*(C' expand to `' in nroff, nothing in troff, for use with C<>
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr
.\" for titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and
.\" index entries marked with X<> in POD.  Of course, you'll have to process
.\" the output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it
.\" makes way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.bd B 3
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ======================================================================
.\"
.IX Title "HTTP::Request 3"
.TH HTTP::Request 3 "libwww-perl-5.51" "1999-11-17" "User Contributed Perl Documentation"
.UC
.SH "NAME"
\&\s-1HTTP:\s0:Request \- Class encapsulating \s-1HTTP\s0 Requests
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\& require HTTP::Request;
\& $request = HTTP::Request->new(GET => 'http://www.oslonett.no/');
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\f(CW\*(C`HTTP::Request\*(C'\fR is a class encapsulating \s-1HTTP\s0 style requests,
consisting of a request line, some headers, and some (potentially empty)
content. Note that the \s-1LWP\s0 library also uses this \s-1HTTP\s0 style requests
for non-HTTP protocols.
.PP
Instances of this class are usually passed to the \f(CW\*(C`request()\*(C'\fR method
of an \f(CW\*(C`LWP::UserAgent\*(C'\fR object:
.PP
.Vb 3
\& $ua = LWP::UserAgent->new;
\& $request = HTTP::Request->new(GET => 'http://www.oslonett.no/');
\& $response = $ua->request($request);
.Ve
\&\f(CW\*(C`HTTP::Request\*(C'\fR is a subclass of \f(CW\*(C`HTTP::Message\*(C'\fR and therefore
inherits its methods.  The inherited methods most often used are \fIheader()\fR,
\&\fIpush_header()\fR, \fIremove_header()\fR, \fIheaders_as_string()\fR and \fIcontent()\fR.
See the HTTP::Message manpage for details.
.PP
The following additional methods are available:
.Ip "$r = \s-1HTTP:\s0:Request->new($method, \f(CW$uri\fR, [$header, [$content]])" 4
.IX Item "$r = HTTP::Request->new($method, $uri, [$header, [$content]])"
Constructs a new \f(CW\*(C`HTTP::Request\*(C'\fR object describing a request on the
object \f(CW\*(C`$uri\*(C'\fR using method \f(CW\*(C`$method\*(C'\fR.  The \f(CW\*(C`$uri\*(C'\fR argument can be
either a string, or a reference to a \f(CW\*(C`URI\*(C'\fR object.  The \f(CW$header\fR
argument should be a reference to an \f(CW\*(C`HTTP::Headers\*(C'\fR object.
.Ip "$r->method([$val])" 4
.IX Item "$r->method([$val])"
.PD 0
.Ip "$r->uri([$val])" 4
.IX Item "$r->uri([$val])"
.PD
These methods provide public access to the attributes containing
respectively the method of the request and the \s-1URI\s0 object of the
request.
.Sp
If an argument is given the attribute is given that as its new
value. If no argument is given the value is not touched. In either
case the previous value is returned.
.Sp
The \fIuri()\fR method accept both a reference to a \s-1URI\s0 object and a
string as its argument.  If a string is given, then it should be
parseable as an absolute \s-1URI\s0.
.Ip "$r->\fIas_string()\fR" 4
.IX Item "$r->as_string()"
Method returning a textual representation of the request.
Mainly useful for debugging purposes. It takes no arguments.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
the HTTP::Headers manpage, the HTTP::Message manpage, the HTTP::Request::Common manpage
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright 1995\-1998 Gisle Aas.
.PP
This library is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
