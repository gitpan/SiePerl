.\" Automatically generated by Pod::Man version 1.15
.\" Mon Apr 23 14:57:57 2001
.\"
.\" Standard preamble:
.\" ======================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R

.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used
.\" to do unbreakable dashes and therefore won't be available.  \*(C` and
.\" \*(C' expand to `' in nroff, nothing in troff, for use with C<>
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr
.\" for titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and
.\" index entries marked with X<> in POD.  Of course, you'll have to process
.\" the output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it
.\" makes way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.bd B 3
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ======================================================================
.\"
.IX Title "SLIDESHOW 1"
.TH SLIDESHOW 1 "perl v5.6.1" "1999-06-30" "User Contributed Perl Documentation"
.UC
.SH "NAME"
Tk::SlideShow \*(-- a \fBTk\fR \fBPerl\fR module for building slide-like presentations.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module provide \fBPerl\fR with the ability to :
.Ip "\(bu" 4
build interactive and visual presentations with \fBPerl\fR and \fBTk\fR,
.Ip "\(bu" 4
build simple slide simply,
.Ip "\(bu" 4
build sophisticated slides (and even more than PowerPoint one) up to
real \s-1GUI\s0,
.Ip "\(bu" 4
build structured presentations, precisely computed,
.Ip "\(bu" 4
take advantage of your knowledge of \fBPerl\fR and \fBTk\fR for building
presentations,
.Ip "\(bu" 4
build portable presentations on all Unix provided with \fBTk\fR/\fBPerl\fR
.Ip "\(bu" 4
build presentations that will let the attendees wonder how they will do
it with Microsoft \s-1PP\s0 \f(CW\*(C`:\-)\*(C'\fR.
.Ip "\(bu" 4
build presentations without leaving your prefered developping enviroment : Unix,
.PP
To summarize the philosophy of \fBTk::SlideShow\fR, you have to understand that
slides will be defined and descripted :
.Ip "in a \fBPerl\fR script," 4
.IX Item "in a Perl script,"
for everything that is easier to define in \fBPerl\fR,
.Ip "interactively (with mouse)" 4
.IX Item "interactively (with mouse)"
for everything that is easier to define interactively. These informations will be saved
automaticaly on slide's specific files \*(-- in \fBPerl\fR of course.
.PP
In this document, I have tried to interlace a tutorial and a full
description approach. This may sound it a little bit amazing, but I
think it was possible in this case.
.SH "FIRST CONTACT"
.IX Header "FIRST CONTACT"
First of all, to build a presentation with \fBTk::SlideShow\fR, you had
better create a presentation specific directory for keeping all the
files that will be created.
.PP
In this directory, you have to edit the main script : This script will
have to \f(CW\*(C`use Tk::SlideShow;\*(C'\fR and some of its methods.
.PP
The \f(CW\*(C`init\*(C'\fR method lets \fBTk::SlideShow\fR self initialize for a new
presentation.  It understands 2 parameters as the sizes (resp. width
and height) of the main window. Without these parameters, the sizes of
the window will be the mawimum sizes of the X11 root. But sometimes,
like me, you have a bigger definition on your Unix desktop than on
your laptop. And perhaps, you will preferably travel the world with
your laptop rather than with your desktop, to show your
presentations. So, for example, you will design your presentation
for a definition of \f(CW\*(C`1024x768\*(C'\fR instead of \f(CW\*(C`1600x1280\*(C'\fR desktop 21
inch screen. Your script will therefor begin with something like :
.PP
.Vb 1
\&        my $p = Tk::SlideShow->init(1024,768);
.Ve
As Larry says often, it's useless to \f(CW\*(C`or die\*(C'\fR. Method \f(CW\*(C`init\*(C'\fR return
an instance of class \fBTk::SlideShow\fR. You may feel it useless to use
an instance of \fBTk::SlideShow\fR that will be probably uniq during the
life of the script execution, but this help for internal locality of
variables and also reduce the number of character to type. Now to
invoke a \fBTk::SlideShow\fR method, you will just have to type
\&\f(CW\*(C`$p\->method\*(C'\fR rather than \f(CW\*(C`Tk::SlideShow\->method\*(C'\fR (remember,
laziness ...).
.PP
Methods \f(CW\*(C`mw\*(C'\fR, \f(CW\*(C`can\*(C'\fR, \f(CW\*(C`h\*(C'\fR and \f(CW\*(C`w\*(C'\fR help you to access internals
objets and variables respectively : \f(CW\*(C`MainWindow\*(C'\fR, \f(CW\*(C`Canvas\*(C'\fR, width
and height of it.  In case you need them you probably had better to
insert this small line in the beginning of your script :
.PP
.Vb 1
\&        my ($mw,$c,$h,$w) = ($p->mw, $p->canvas, $p->h, $p->w);
.Ve
For pratical reason, I will suppose in future examples that these
lines are at the beginning of my examples scripts without mentioning
it.
.PP
Now, I am sure you're dying to know how to create a simple slide. This
is simple, as promised above. Let's look at it first and explain it afterward :
.PP
.Vb 6
\&        $p->save;
\&        $p->add('hello', sub {
\&                $p->Text('t1','Hello World !');
\&                $p->load;
\&        });
\&        $p->play;
.Ve
Just try (run) it (remember : As I said before, you have to add lines at the
beginning of your script) ! 
.PP
While running the script with \fBPerl\fR, it will create a big window
containing a Tk Canvas : in the middle : a text. Note that you are
able to drag the text \*(L"Hello World !\*(R" with the button 1, where you
want it to be.  Pressing key \f(CW\*(C`s\*(C'\fR, you will save its
positions. Pressing key \f(CW\*(C`q\*(C'\fR will quit the presentation. If you play
it again, you will find your text at the same place were you let it
just after you press key \f(CW\*(C`s\*(C'\fR. Pressing key \f(CW\*(C`space\*(C'\fR or \f(CW\*(C`backspace\*(C'\fR
let's you navigate thru different slides. Here, you just have one
\&.. so ...
.PP
This is how it looks. Now let's explain what it means :
.PP
First, I call the \f(CW\*(C`save\*(C'\fR method. As described more precisely later,
this make all your slides sensible to a keypress on \f(CW\*(C`s\*(C'\fR for saving
the artistic caracteristics of your slides on a file.
.PP
Then I call method \f(CW\*(C`add\*(C'\fR. This is for pushing a new slide on the pile
of slides. I give to arguments : a name to the slide to reference it
later and because I like to gave a name to what I am creating, and a
\&\f(CW\*(C`codeREF\*(C'\fR which is the real slide definition. This sub will be called
when the time of showing the slide has come.
.PP
Here I put a small text : \f(CW\*(C`Hello world\*(C'\fR. note that I do not specify
it's place. I just give the text. I will specify it's place later,
during the \fIartistic\fR step of the presentation building. The \fIartistic\fR
specifications, by the way, will be loaded when calling method \f(CW\*(C`load\*(C'\fR.
.PP
At the end of my small example, I call the method \f(CW\*(C`play\*(C'\fR to ask
\&\fBTk::SlideShow\fR to play all the slides in sequence.
.PP
That's all !
.PP
It sounds simple, doesn't it ?
.PP
I'm sure you have tones of questions, for how to do this or
that. But that's not the point of this simple example to answer your
questions. It's just a first contact with \fBTk::SlideShow\fR.
.SH "GORY DETAILS"
.IX Header "GORY DETAILS"
Let's now have a look at all the methods more precisely. I will continue
to give examples, of course.
.if n .Sh "Method \f(CW""add""\fP"
.el .Sh "Method \f(CWadd\fP"
.IX Subsection "Method add"
As, I'm sure you have understood : the central method for you is the
\&\f(CW\*(C`add\*(C'\fR method. This is where you are going to specify your slides.
.PP
As I mention above, this method add a new slide on the pile of already
existing slides. 
.PP
You have to give it a uniq name (or id) as a first parameter.  It lets
you reference it in the future more easely (as you will see
later). This name can be whatever a filename (without its directory)
can be. Keep in mind, that the position of most of your objects will
be saved in file call \f(CW\*(C`slide\-name.pl\*(C'\fR, where \f(CW\*(C`name\*(C'\fR will be replace
by the first argument to method \f(CW\*(C`add\*(C'\fR.
.PP
Then you have to give it a sub reference (as a second argument).
.if n .Sh "Method \f(CW""current""\fP"
.el .Sh "Method \f(CWcurrent\fP"
.IX Subsection "Method current"
During building your presentation, you will probably have to test
several times the look of what you have done and to add artistic value
to it. So, you need a method that helps you to jump to a particular
slide, given its name. This method is \f(CW\*(C`current\*(C'\fR. That's the reason
why I recommend to add a line before the call to method \f(CW\*(C`play\*(C'\fR :
.PP
.Vb 1
\&        $p->current(shift || 0);
.Ve
So that if your presentation is in file \f(CW\*(C`pres.pl\*(C'\fR and you start it
like this,
.PP
.Vb 1
\&        prompt-unix> pres.pl hello
.Ve
you will directly see the slide named \f(CW\*(C`hello\*(C'\fR. Actually, slides are
internally stored in a \s-1ARRAY\s0, and you can also specify the index of
your slide in this \s-1ARRAY\s0 :
.PP
.Vb 1
\&        prompt-unix> pres.pl 2347
.Ve
This will accelerate the access to a very big presentation !
.if n .Sh "Methods \f(CW""save""\fP and \f(CW""load""\fP"
.el .Sh "Methods \f(CWsave\fP and \f(CWload\fP"
.IX Subsection "Methods save and load"
As mention above, these methods deal with persistance of your added
artistic value. So, I am sure you realize how important they are
\&\f(CW\*(C`:\-)\*(C'\fR !
.PP
The method \f(CW\*(C`save\*(C'\fR may be called, but only once (is needed). It just
indicates to \fBTk::SlideShow\fR that you do want \fBTk::SlideShow\fR to
save the modifications you have done during the presentation until
pressing key \f(CW\*(C`s\*(C'\fR. If this is not what you want, just comment the
\&\f(CW\*(C`$p\->save;\*(C'\fR line.
.PP
The method \f(CW\*(C`load\*(C'\fR must be called when you want \fBTk::SlideShow\fR to
load what have been saved by method \f(CW\*(C`save\*(C'\fR : mainly, the position of
the objects your are going to define.  You may specify a filename as
an argument to method \f(CW\*(C`load\*(C'\fR (you will see later in this
documentation, where this is relevant), but most of the time this is
useless.
.PP
There is (at least) one file per slide that contains positions and
other characteristics of objects (color, fonts). The file will have
the name \f(CW\*(C`slide\-xxx\*(C'\fR where xxx is the name of the slide (that is the
name you give as a first argument to method \f(CW\*(C`add\*(C'\fR). This file
contains a \fBPerl\fR script that is automaticaly generated by
\&\fBTk::SlideShow\fR. So you will have at least as many files as you have
slides. That's a good reason, I think, for creating a specific
directory for your presentation.
.PP
It may sound obscure that you may have to specify an argument, but we
will see later that it is very usefull in some cases. 
.PP
But remember : you call method \f(CW\*(C`save\*(C'\fR once, and method \f(CW\*(C`load\*(C'\fR many
times, often at least once per slide.
.if n .Sh "Method \f(CW""bg""\fP"
.el .Sh "Method \f(CWbg\fP"
.IX Subsection "Method bg"
This method is used to specify a sub reference that will be called
before playing a slide. It stands for \fIbackground\fR.
.PP
(This sub will receive the \fBTk::SlideShow\fR object as argument.)
.PP
Here is an example :
.PP
.Vb 7
\&    $p->bg( sub {
\&                 $c->configure(-background,'chocolate');
\&                 $c->createText($w,0,-text,"Olivier Bouteille",
\&                                -anchor => 'ne',
\&                                -font => $s->f1,
\&                                -fill => 'yellow');
\&              });
.Ve
Remember \f(CW\*(C`$c\*(C'\fR is a global variable that I suppose you have
initialized previously as mentioned above. It contains the canvas where
all objects will be drawn. That the second and the last time I recall
it to you.
.PP
In this example, this is clear that you like chocolate ... as a color for
the background of you presentation, and that you like to insist on the
fact that you are the author of the presentation \f(CW\*(C`:\-)\*(C'\fR.
.PP
For simplicity I have added the possibility to specify only a color as
an argument instead of a sub reference. So :
.PP
.Vb 1
\&      $p->bg('chocolate');
.Ve
will work as a simplify expression of
.PP
.Vb 1
\&      $p->bg( sub {$c->configure(-background,'chocolate')};
.Ve
.Sh "General look of your presentation script"
.IX Subsection "General look of your presentation script"
To summarize what you have learned up to now, here's the look of the
script of your presentation :
.PP
.Vb 1
\&        use Tk::SlideShow;
.Ve
.Vb 3
\&        my $p = Tk::SlideShow->init(1024,768);
\&        $p->save;
\&        my ($mw,$c,$h,$w) = ($p->mw, $p->canvas, $p->h, $p->w);
.Ve
.Vb 5
\&        $p->add('menu',         sub { ...; $p->load });
\&        $p->add('introduction', sub { ...; $p->load });
\&        ...
\&        $p->add('development',  sub { ...; $p->load });
\&        $p->add('conclusion',   sub { ...; $p->load });
.Ve
.Vb 2
\&        $p->current(shift || 0);
\&        $p->play;
.Ve
Now you should be able to build any presentation. But it would be to
tedious to specify everything. So there are some more concept in
\&\fBTk::SlideShow\fR that will help your expression.
.SH "\fBSprites\fP"
.IX Header "Sprites"
\&\fBSprites\fR are graphics objects that you can place or change
interactively on a slide.  You describe it in \fBPerl\fR, and you place
it with the mouse. Sometimes you can also modify there shape
interactively. The characteristics that will be modified interactively
will be called \fI\s-1IC\s0\fR (i.e. Interactive Characteristique) of \fBSprites\fR
in this document.
.PP
These objects may be as complicated as \fBTk\fR canvas drawing. They are
composed of \fBTk\fR/Canvas items.
.PP
Each \fBSprite\fR has a name (an identifier) as they are very important
for \fBTk::SlideShow\fR. This name has to be uniq in a slide, but you can
reuse it in differents slides. In a first approach, the syntax for the
is a string without a character \f(CW\*(C`/\*(C'\fR. In fact this character is
possible but it has a special meaning for \fBTk::SlideShow\fR as we will
see it later. The name will be used to tag (in the sens of \fBTk\fR tags)
every canvas items composing a \fBSprite\fR.
.PP
There is a set of methods that can be applied on them.
.PP
\&\fBTk::SlideShow\fR provide some builtin \fBSprites\fR, but you can add some more
\&\fBSprite\fR.
.PP
After being described in the \fBPerl\fR script, they aspect and position my
be modified during running the presentation.
.Sh "builtin \fBSprites\fP"
.IX Subsection "builtin Sprites"
You have already met a \fBSprite\fR, without knowing it : The \f(CW\*(C`Text\*(C'\fR
\&\fBSprite\fR. You create a \f(CW\*(C`Text\*(C'\fR \fBSprite\fR by calling the method Text
on the \fBTk::SlideShow\fR object. This is very simple :
.PP
.Vb 1
\&        $p->Text('ident', 'text body', @options);
.Ve
The ident is mandatory. \f(CW\*(C`@options\*(C'\fR are optionals and directly passed
to \fBTk\fR when creating a canvas text item. So, look at \fBTk\fR
documentation to know what options you can use. 
.PP
What has been done for text has also been done for image.
The syntax is as follow :
.PP
.Vb 1
\&        $p->Image('ident','filename.gif',@options);
.Ve
and for animated images :
.PP
.Vb 1
\&        $p->Anim('ident','filename.gif',@options);
.Ve
Specificaly for the \fBSprite\fR \f(CW\*(C`Text\*(C'\fR, I have added an interactive
font family chooser and a color chooser. You may access it by double
clicking respectively with button 1 and 2 on the \f(CW\*(C`Sprite\*(C'\fR text
itself.. I'm not sure, this functionnality is necessary : I usualy
prefer to have a structured access (i.e. in the script) to font
families and color.
.PP
Now, here is a more useful definition of a slide :
.PP
.Vb 8
\&        $p->add('menu', sub {
\&           $p->Text('title','Abstract',-font => $p->f3);
\&           my $i = 0;
\&           for (split(/,/,'Introduction,Development,Conclusion')) {
\&                $p->Text("i$i",$_,$p->f1); $i++;
\&           }
\&           $p->load;
\&        });
.Ve
Here are some comments on this slide definition :
.Ip "\(bu" 4
Here, I have not been structured but rather PowerPoint
oriented. Actually, there will probably have more than one slide with
such a title in a presentation. So, it would have been better to
define a \fIsub\fR like this :
.Sp
.Vb 1
\&        sub title { $p->Text('title',shift,-font => $p->f3);}
.Ve
and call it at the beginning of each of my slides containing a title !
So, if I want to change the color of my titles, I will have to do it
just once.
.Ip "\(bu" 4
For the same reasons, it would have been more structured to :
.Sp
.Vb 3
\&        sub items {
\&           my $i = 0; for (@_) {$p->Text("item$i",$_, $p->f1); $i++}
\&        }
.Ve
.Ip "\(bu" 4
Nothing in this example specify any position. This will be done
later, during the execution. But I am sure you have already understand
it, since I already mention it  several times.
.PP
So, a more suitable definition of the slide would be something like :
.PP
.Vb 5
\&        $p->add('summarize', sub {
\&                titre('Menu');
\&                items(qw(Introduction Development Conclusion));
\&                $p->load;
\&        });
.Ve
Simple, isn't it ?
.PP
There exists some more \fBSprite\fR in \fBTk::SlideShow\fR, but their definition is so
simple that I think it will be more suitable to look at the code in
the file \f(CW\*(C`Tk/SlideShow/Sprite.pm\*(C'\fR and think of it as custumable examples.
.Sh "adding your own \fBSprite\fP"
.IX Subsection "adding your own Sprite"
Yes it's possible. Actually, this is very simple. Just have a look at
\&\f(CW\*(C`Tk/SlideShow.pm\*(C'\fR and you will find that it takes only a few lines to do it,
or to reuse it.
.PP
A \fBSprite\fR is just a \fBPerl\fR object with an identifier that is also
used as \fBTk\fR tag. It store a relative coordinates \f(CW\*(C`x,y)\*(C'\fR, tag name,
and all others \s-1IC\s0. It knows how to give a Perl persistant string of
itself.
.PP
You can add characteristic to this object either by inheriting class
\&\f(CW\*(C`Tk::SlideShow::Sprite\*(C'\fR, or by simply adding keys to the \fBPerl\fR object
(which is not very academic !).
.PP
Let's take examples : 
.Sh "Example 1"
.IX Subsection "Example 1"
Imagine you want to create a new kind of \fBSprite\fR. A little logo that
symbolise a man in front of a computer.
.PP
Here's the function you may write :
.PP
.Vb 17
\&          sub compuman { # given an id as a standalone argument
\&            my $s = $p->newSprite(shift);
\&            my $id = $s->id;
\&            # here are options
\&            my @o1 = (-width ,4,-fill, 'black', -tags ,$id);
\&            my @o2 = (-fill,'blue', -tags ,$id);
\&            my @o3 = (-width ,4,-fill,'red', -tags ,$id);
\&            $c->createLine(qw(10 20 10 40 25 40 25 50),@o1);      # chair
\&            $c->createLine(qw(15 15 15 35 30 35 30 50 35 50),@o1);# body
\&            $c->createOval(qw(11 11 18 18),@o2);                  # head
\&            $c->createLine(qw(15 25 30 25),@o1);                  # feet
\&            $c->createLine(qw(30 27 40 22),@o3);                  # keyboard
\&            $c->createPolygon(qw(35 20 40 0 55 10 55 20),@o3);    # screen
\&            $c->createLine(qw(45 20 45 30 35 30 35 30),@o3);      # screen foot
\&            $s->pan(1);
\&            return $s;
\&          }
.Ve
What this example shows is :
.Ip "\(bu" 4
The \f(CW\*(C`compuman\*(C'\fR \fIsub\fR argument is an identifier that will be use as
\&\fBTk\fR tag,
.Ip "\(bu" 4
The drawing as been design by hand on a small paper. The origin is
(0,0) by convention,
.Ip "\(bu" 4
I've created a new \fBSprite\fR using method \f(CW\*(C`newSprite\*(C'\fR. I pass the id
of the \fBSprite\fR,
.Ip "\(bu" 4
I turn the \fBSprite\fR pannable (or \fIdraggable\fR with button) with button 1 by
using method \f(CW\*(C`pan\*(C'\fR on it,
.Ip "\(bu" 4
Coordinates are from (0,0) to (45,50) but you will be able to place
where you want in the slide.
.PP
Once this little function written, I can use it everywhere in the
presentation, to place computer men symbols as many times as I'd like.
I will be able to place it interactively, and to save it's position
pressing on the \f(CW\*(C`s\*(C'\fR key.
.Sh "Example 2"
.IX Subsection "Example 2"
Imagine you would like to have text surrounded by a frame, and with a
special color background, that you will reused a lot in your
presentation. Here is the kind of function you may write :
.PP
.Vb 10
\&        sub framed {
\&          my ($id,$text) = @_;
\&          my $s = $p->newSprite($id);
\&          my $idw = $c->createText(0,0,'-text',$t, -justify, 'center',
\&                           -font => $p->f1, -tags => $id);
\&          $c->createRectangle($c->bbox($idw), -fill,'light blue',-tags => $id);
\&          $c->raise($idw);
\&          $s->pan(1);
\&          return $s;
\&        }
.Ve
Then, each time in a definition, you would like to have such a framed
text, then just call \f(CW\*(C`framed\*(C'\fR like this.
.PP
.Vb 1
\&        frame ('id1',"This is an\enImportant message");
.Ve
.Sh "Example 3"
.IX Subsection "Example 3"
Let's have an other example, a more classic example.  Imagine you want
to explain a source example (perl, of course) in your presentation.
You will probably want to have a \fBSprite\fR specialized representing
these scripts examples. To be consistant, you want it to look very
similar in the whole presentation slides. Even perhaps in all the
presentations you will build in your job, or even ... your life
(horror !)
.PP
Here's what you can do :
.PP
.Vb 16
\&        sub example { # given the id and the text of the script
\&          my ($id,$t) = @_;
\&          my $s = $p->newSprite($id);
\&          my @t = (-tags => $id);
\&          # here is the label of the script
\&          $c->createText(0,0,-text,'Script example', -font => $p->f1,
\&                         @t, -anchor => 'sw');
\&          # the text of the script example
\&          my $idw = $c->createText(0,0,-text,$t,-font => $p->ff1, @t,
\&                          -anchor => 'nw');
\&          # a rectangle around the example with a nice background
\&          $c->createRectangle($c->bbox($idw), -fill,'light green',$p);
\&          $c->raise($idw);
\&          $s->pan(1);
\&          return $s;
\&        }
.Ve
Here, I've created an new \fBSprite\fR, which consists of a 2 text
items. One with a fixe text : \f(CW\*(C`Script Example\*(C'\fR and one with the the
text of the example which is passed as an argument to the function.
.PP
Note that font used for these texts (\f(CW\*(C`f1\*(C'\fR and \f(CW\*(C`ff1\*(C'\fR) will be
explained later.
.Sh "Example 4"
.IX Subsection "Example 4"
Let's animate our \fBSprites\fR, now. Here's something that will be difficult
to do with PowerPoint, as far as I know.
.PP
Let's look at this function :
.PP
.Vb 15
\&    sub ticker {
\&      my ($id,$text) = @_;
\&      my $s = $p->newSprite($id>->pan(1);
\&      my $idw = $c->createText(0,0,-text,$text, 
\&                               -font => $p->f1, -tags => $id,);
\&      sub wrap_round {
\&        my $tag = shift;
\&        my $t = $c->itemcget($tag,-text);
\&        $c->dchars($tag,'0');                   # delete the first  character.
\&        $c->insert($tag,'end',substr($t,0,1));  # add it at the end of string.
\&        $c->after(100,[\e&wrap_round,$tag]);
\&      }
\&      wrap_round($idw);
\&      return $s;
\&    }
.Ve
This function create a new type of \fBSprite\fR that display a single line
of text that looks like a ticker tape. For animation, I use the
\&\fBTk/after\fR method, of course. 
.PP
Simple and powerful, isn't it : This is just \fBPerl\fR and \fBTk\fR !
.SH "Managing progression in the slide discovery"
.IX Header "Managing progression in the slide discovery"
Often, you'd like to explain progressively a complex slide. So,
you'd like to let \fBSprites\fR appear in a particular order, so that
attendees will discover the complex slide progresively.
.PP
\&\fBTk::SlideShow\fR provides you with the ability to let the \fBSprites\fR appear
progresively as you press button 3 of your mouse. They will appear,
slipping from top, bottom, left or right edge of the slide.
.PP
Here's how to do it (reusing the subs \f(CW\*(C`title\*(C'\fR and \f(CW\*(C`items\*(C'\fR decribed
previously) :
.PP
.Vb 8
\&        $p->add('menu', sub {
\&           titre('MENU');
\&           items('Introduction','Development','Conclusion');
\&           # ....
\&           $p->load;
\&           $p->a_bottom('titre');
\&           $p->a_left(map{"item$_"}(0..2));
\&        })
.Ve
What we see here is that after loading the position of our title and
items, I ask for title to appear slipping from bottom to it's place
when I will press button 3. If I press it again and again, I will see
the items arriving on my slide, slipping for the left side of it to
there final place. You may have used as well method \f(CW\*(C`a_right\*(C'\fR or
\&\f(CW\*(C`a_top\*(C'\fR for making them arrive repectively from right or from top
side of the slide. Note that you can play back this evolution by
pressing \f(CW\*(C`Control\-Button\-3\*(C'\fR.
.PP
If you need to let several \fBSprites\fR enter the slide together, then
just give an \f(CW\*(C`refARRAY\*(C'\fR of tags of these \fBSprites\fR instead of just
one tag. As an example you may try, just add [] around map instruction
in the previous example :
.PP
.Vb 1
\&           $p->a_left([map{"item$_"}(0..2)]);
.Ve
You will see that the 3 items will arrive on the slide simultaneously !
.PP
You are also able to let appear a  \fBSprite\fR suddenly by using 
method \f(CW\*(C`a_warp\*(C'\fR.
.PP
Sometimes you may want to make a \fBSprite\fR leave the slide. Just
replace the prefix \f(CW\*(C`a_\*(C'\fR (standing for arrive) by \f(CW\*(C`l_\*(C'\fR (standing for
leaving).
.PP
Sometimes, it is useful to show a \fBSprite\fR evolving thru a path.
This is done by using method \f(CW\*(C`a_multipos\*(C'\fR. You have to give it a
number of position, the \fBSprite\fR have to take. It will move from one
position to another by clicking on button 3. As usual you don't have
to specify in the script the coordinates of the positions. Just the
number of position. When you play the slide for the first time, the
\&\fBSprite\fR will stand in a default position. Just drag it where you
wan't it to be with button 1. Do this for each position. Then save it
(press \f(CW\*(C`s\*(C'\fR key). It will remenber where you have \fImouse-ly\fR
specified each position.  The script example is trivial :
.PP
.Vb 7
\&        $p->add('workflow', sub {
\&           titre('WorkFlow');
\&           $p->Image('adoc','document.gif');
\&           # ....
\&           $p->load;
\&           $p->a_multipos(10);
\&        }
.Ve
That will help describing the different stage of a document in
workflow system, for example. Here, the document will have 10
differents position, it will remember. 
.PP
You may want to specify the positions explicitly (computed, e.g.) in
the script. This is posible, of course. Just use the method
\&\f(CW\*(C`multipos\*(C'\fR on the \fBSprite\fR object, and give an \f(CW\*(C`ARRAY\*(C'\fR of the
positions just like you will define a line in a \fBTk\fR canvas.
.SH "Linking \fBSprites\fP"
.IX Header "Linking Sprites"
It's often useful to link \fBSprite\fR together, with a line, or an arrow or
whatever.
.PP
\&\fBTk::SlideShow\fR provide you with this ability. 
.PP
For example, to link two \fBSprites\fR with a simple line with a title on
the middle of the line, just call method \f(CW\*(C`newLink\*(C'\fR as follows :
.PP
.Vb 1
\&        $p->newLink($sprite1,$sprite2,'Title');
.Ve
Interactively, you will be able to change the attach point of the link
(here, a line) by clicking on the line, with Button 1 or 3. The attach
point will turn around the bounding box of the \fBSprite\fR, successively
following the eigth cardinals points (nw, n, ne, e, se, s, sw, w).
.PP
If you want an simple arrow, replace Link by Arroa, a Double
arrowreplace Link by DblArrow.
.PP
.Vb 2
\&        $p->newArrow($sprite1,$sprite2,"Titre");
\&        $p->newDblArrow($sprite1,$sprite2,"Titre");
.Ve
Note that you can change \s-1IC\s0 of arrows shape using keyboard \f(CW\*(C`Up\*(C'\fR,
\&\f(CW\*(C`Down\*(C'\fR, \f(CW\*(C`Left\*(C'\fR, \f(CW\*(C`Right\*(C'\fR when mouse is over the arrow, and their
Control counter part if the mouse is on the arrow.
.PP
You can also change the attach (cardinal) point of the arrow (which
inherit from link) on each \fBSprite\fR it links together, by clicking
button 1 or 3 on the arrow.
.PP
You can even add your new way of linking \fBSprites\fR. As an example, I
provide in \fBTk::SlideShow\fR a method \f(CW\*(C`newOrg\*(C'\fR that will helps you to create
hierarchical organisation graph. Look at Tk::SlideShow examples to see how it
looks.  Look at \f(CW\*(C`Tk/SlideShow.pm\*(C'\fR definition of \f(CW\*(C`newOrg\*(C'\fR method to see how
in less than 20 lines it is done, and at the example below, using Org
\&\fBSprite\fR.
.SH "hyperlinks"
.IX Header "hyperlinks"
Sometimes it may be useful to jump from one slide to another by
clicking on a \fBSprite\fR. This is also implemented. Here's how to do it.
.PP
.Vb 1
\&        $p->warp('i1','<Double-1>', 'introduction');
.Ve
In this example, if you double click with button 1 on \fBSprite\fR i1, you
will jump directly to slide named \f(CW\*(C`introduction\*(C'\fR.
.SH "Big Fontes"
.IX Header "Big Fontes"
X11 is not so much provided with big fonts, such as these one you want
to use for a presentation. So you have to take a scalable font and to
resize it. \fBTk::SlideShow\fR provide you with a minimal set of fonts.
.PP
There are severals methods for that, used in my previous examples :
.Ip "f" 4
.IX Item "f"
This method return a scalable \f(CW\*(C`charter\*(C'\fR font of a point size of
150. If you give it an argument, this will be taken to be multiplied
to 150. The family used by default is \f(CW\*(C`charter\*(C'\fR. You may change this
default family by using the method \f(CW\*(C`family\*(C'\fR with the new family as
argument. The list of family depends on your distribution of X11. On
my Linux box I have approximatly 20 family that are all free fonts.
.Sp
Here's where you may get these nice and funny fonts :
.Sp
.Vb 1
\&    ftp://ftp.gimp.org/pub/gimp
.Ve
.Ip "f1, f2, ..., f5" 4
.IX Item "f1, f2, ..., f5"
These method return proportional fonts bigger and bigger, that I feel
sufficient for my presentations.
.Ip "ff1, ff2, ... ff5" 4
.IX Item "ff1, ff2, ... ff5"
These methods return fixed fonts bigger and bigger, that I feel
sufficient for my presentations.
.SH "\fBSprites\fP id with /"
.IX Header "Sprites id with /"
\&\fBSprites\fR interactive characteristics (\s-1IC\s0) are stored in slide id
dependent file. For example, in a slide called \f(CW\*(C`menu\*(C'\fR, \fBSprites\fR \s-1IC\s0
will be stored in file \f(CW\*(C`slide\-menu.pl\*(C'\fR. If you want these \fBSprites\fR \s-1IC\s0
not to be stored in slide id dependent file, you just have to prefix
the \fBSprite\fR id with the name of the file followed by a \f(CW\*(C`/\*(C'\fR. For
example, a \fBSprite\fR called \f(CW\*(C`org/i1\*(C'\fR will see its \s-1IC\s0 be stored in file 
\&\f(CW\*(C`org\*(C'\fR.
.PP
The reason for this functionnality, is that there are case where you
would like to resuse \fBSprites\fR, in severals Slides. 
.PP
Here are some examples :
.Sh "Example 1"
.IX Subsection "Example 1"
Imagine you want you presentation to have on all slides (or most of
them) the menu of it on the right side of each slide. You may define 
this variable at the begining of your script :
.PP
.Vb 7
\&        my @plan = (
\&            'intro'      => "Introduction",
\&            'pos'        => "Position of the problem",
\&            'present'    => "Presentation",
\&            'dev'        => "Development",
\&            'solutions'  => "Solutions",
\&            'conclusion' => "Conclusion" );
.Ve
Left members stand for slide identifiers, and right members are text
you will see on the slide.
.PP
So, you may write this small sub :
.PP
.Vb 12
\&  sub small_summarize {
\&    my $count = 0;
\&    my @p = @plan;
\&    while(@p) {
\&      my ($slide,$title) = (shift @p, shift @p);
\&      my $id = "som/i$count";
\&      $p->Text($id,$title, -font, $p->f1, -fill,'blue', -anchor,'w');
\&      $p->warp($id,'<Double-1>',$diapo);
\&      $count ++;
\&    }
\&    $p->load('som'); # this load only place for sprites names som/...
\&  }
.Ve
You learn here that you can get the current id of the slide being
played, with method \f(CW\*(C`currentName\*(C'\fR.
.PP
You will have to call the \f(CW\*(C`small_summarize\*(C'\fR method at the begin of each slide definition. 
.PP
Interactively, the first time you will see the small menu, you will be
able to place it manually, and save it (by pressing \f(CW\*(C`s\*(C'\fR key). Then,
each time you will reuse this sub, \fBSprites\fR define in will be placed at
the same position. This is achieved because of the fact that the
\&\fBSprite\fR ids starts with string \f(CW\*(C`som/\*(C'\fR so that there \s-1IC\s0 will be stored
in file \f(CW\*(C`som\*(C'\fR.
.Sh "Exemple 2"
.IX Subsection "Exemple 2"
Imagine now that you would like to present your organisation.  You
would like to show your organisation graph one each slide.
.PP
You describe you organisation in a \fBPerl\fR variable :
.PP
.Vb 3
\&        my %org = ( 'a' => "Computer\enService",
\&                    'a.b' => "Design\enDepartment",
\&                    'a.c' => "Develop\enDepartment");
.Ve
You may use the \f(CW\*(C`framed\*(C'\fR \fBSprite\fR define above to put the entities
description.
.PP
.Vb 5
\&        sub org {
\&          my %sprites;
\&          # creating boixes
\&          $sprites{$name}= $p->Framed("org/$name",$desc)
\&            while my($name,$desc) = each %org ;
.Ve
.Vb 8
\&          # creating links
\&          while(my($name,$sprite) = each %sprites) {
\&            my ($sup) = ($name =~ /(.*)\e.\ew+/);
\&            $p->Org($sprite,$sprites{$sup})
\&                if exists $sprites{$sup};
\&          }
\&          $p->load('org');
\&        }
.Ve
You will have to place your boxes as you like during a first try of
playing your slides (as usual now). 
.PP
Then you will just have to call \fIsub\fR \f(CW\*(C`org\*(C'\fR at the beginning of each
slide you would like this graph to be seen.
.PP
Note that :
.Ip "\(bu" 4
It is simple to change the color of the box entity depending on
the name of the slide describing this entity,
.Ip "\(bu" 4
You can mix example 1 and 2,
.Ip "\(bu" 4
You can easily make box entities hyperlinks to slides.
.SH "DOCUMENTATION"
.IX Header "DOCUMENTATION"
As far as I am concerned, I feel that considering a paper copy of
slides as a documentation of a presentation is non sense. You have to
add your speach added value to it. That's why, in case I want to let
some documentation, I like to add to my presentation, a documentation
to each slides. This helps me also to prepare the presentation.
.PP
To add documentation to my slides, I have choosen to use html as a
language. Maybe in a future release, somebody else will want to
express attach documentation to slide in a different language (maybe
pod).
.PP
So, that's the reason for the method \f(CW\*(C`html\*(C'\fR on a
\&\f(CW\*(C`Tk::SlideShow::Diapo\*(C'\fR object.
.PP
To let you add an header and a footer to your presentation paper, I
have added 2 methods for the \f(CW\*(C`Tk::SlideShow\*(C'\fR object : \f(CW\*(C`htmlheader\*(C'\fR
and \f(CW\*(C`htmlfooter\*(C'\fR.
.PP
To output the whole documentation on a file, you may use the method
\&\f(CW\*(C`html\*(C'\fR on the \f(CW\*(C`Tk::SlideShow\*(C'\fR object (note that this is not on the
\&\f(CW\*(C`Tk::SlideShow::Diapo\*(C'\fR object this time). This method take the name
of a directory where it will produce differents snapshots of your
slides, plus \s-1HTML\s0 documentation explicitly attached to each slides (or
Tk::SlideShow::Diapo).
.PP
Note that the technic used to snapshot your slides is by using the X11
command \f(CW\*(C`xwd\*(C'\fR. Then it is converted in \s-1GIF\s0 image format, so that your
images will be viewable on most of browsers. As for now, I use convert
(from ImageMagick) to convert xwd to gif format as well as for
realizing the thumbnail.
.PP
So to sumarize this here's the look of a more complete example of a
\&\f(CW\*(C`Tk::SlideShow\*(C'\fR script :
.PP
.Vb 1
\&        use Tk::SlideShow;
.Ve
.Vb 13
\&        my $p = Tk::SlideShow->init(1024,768);
\&        $p->save;
\&        my ($mw,$c,$h,$w) = ($p->mw, $p->canvas, $p->h, $p->w);
\&        my $d; # stands for a diapo.
\&        $d = $p->add('menu',         sub { ...; $p->load });
\&        $d->html('blah blah on the menu slide');
\&        $d = $p->add('introduction', sub { ...; $p->load });
\&        $d->html('blah blah on the introduction slide');
\&        ...
\&        $d = $p->add('development',  sub { ...; $p->load });
\&        $d->html('blah blah on the development slide');
\&        $d = $p->add('conclusion',   sub { ...; $p->load });
\&        $d->html('blah blah on the conclusion slide');
.Ve
.Vb 4
\&        if (grep (/-html/,@ARGV)) {
\&          $p->html("doc");
\&          exit 0;
\&        }
.Ve
.Vb 2
\&        $p->current(shift || 0);
\&        $p->play;
.Ve
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
Here is a summurized synopsis of \fBTk::SlideShow\fR methods.  Remember
that it is an alpha stage release. I hope the \s-1API\s0 will not change, but
it is not garanteed (by me) up to now. So if you already use this
interface for building presentation, you'd better keep the file
\&\f(CW\*(C`SlideShow.pm\*(C'\fR used, not to far.
.Sh "Base Level"
.IX Subsection "Base Level"
.Vb 16
\&  use Tk::SlideShow;
\&  my $p = Tk::SlideShow->new;   # initialize canvas according 
\&                                # to the current screen
\&  $p->bg(?sub|color?);          # change background 
\&  my $d = $p->add(?'nom',sub);  # add a slide
\&  $d->html('..');               # add html documentation
\&  my ($mw,$c,$h,$w) = ($p->mw,$p->canvas,$p->h,$p->w);
\&                                # retrieve context variables 
\&  $p->current(?slideid);        # retrieve/set current slide
\&  $p->currentName;              # retrieve current Name of the slide
\&  $p->warp($spriteid,$tkevent,$slideid);
\&                        # jump on slideid in case of tkevent on spriteid
\&  $p->save;             # make the presentation save-able by pressing 's'
\&  $p->load(?file)       # load sprites locations from file or 
\&                        # default slide file
\&  $p->play;             # play the slides
.Ve
.Vb 16
\&  $p->a_top(sprideid,...);
\&  $p->a_left(spriteid,...);
\&  $p->a_bottom(spriteid,...);
\&  $p->a_right(spriteid,...);  
\&                        # make designated sprites arrive on the slide
\&                        # from top left bottom or right
\&                        # sequencialy in this order 
\&                        # on button3 click.       
\&  $p->l_top(sprideid,...);
\&  $p->l_left(spriteid,...);
\&  $p->l_bottom(spriteid,...);
\&  $p->l_right(spriteid,...);  
\&                        # make them leave the slide instead of arrive 
\&  $p->a_multipos(spriteid,nbposition);
\&                        # make the spriteid evolve on a button 3 click thru 
\&                        # up to nbposition
.Ve
.Vb 4
\&  $p->html('directory') # produces on complete html documentation
\&  $p->htmlheader(?header?);
\&  $p->htmlfooter(?footer?);
\&                        # get/set documentation header/footer
.Ve
.if n .Sh "\f(CW""Sprites""\fP"
.el .Sh "\f(CWSprites\fP"
.IX Subsection "Sprites"
.Vb 7
\&  $p->newSprite($id);    # create an empty sprite
\&  $p->Text($id,$texte,@texte_options);
\&                         # return a predefined Text sprite
\&  $p->Window($id,$widget,$canvas_widget_options);
\&                         # Predefined tk window Sprite
\&  $p->Image($filename);  # Predefined Image Sprite
\&  $p->Anim($filename);   # Predefined Animation GIF Sprite
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Olivier Bouteille (bouteille@dial.oleane.com)
.PP
Will you be kind enough to excuse my poor english, and send me
corrections.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fBPerl\fR(1). et \fBTk/perl\fR
