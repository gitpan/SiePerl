.\" Automatically generated by Pod::Man version 1.15
.\" Mon Apr 23 12:01:48 2001
.\"
.\" Standard preamble:
.\" ======================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R

.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used
.\" to do unbreakable dashes and therefore won't be available.  \*(C` and
.\" \*(C' expand to `' in nroff, nothing in troff, for use with C<>
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr
.\" for titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and
.\" index entries marked with X<> in POD.  Of course, you'll have to process
.\" the output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it
.\" makes way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.bd B 3
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ======================================================================
.\"
.IX Title "PARSER 1"
.TH PARSER 1 "perl v5.6.1" "2001-01-05" "User Contributed Perl Documentation"
.UC
.SH "NAME"
\&\s-1HTML:\s0:Mason::Parser \- Mason Component Parser
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    my $p = new HTML::Mason::Parser (...params...);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
A Parser object translates components into Perl subroutines. Parsers
are typically embedded within (and used by) Interp objects.
.SH "PARAMETERS FOR \fInew()\fP CONSTRUCTOR"
.IX Header "PARAMETERS FOR new() CONSTRUCTOR"
These parameters affect the way that components are translated into
Perl code. If you change a Parser's options, you must remove any
previously created object files for the changes to take effect.
See also Admin/Object files.
.Ip "allow_globals" 4
.IX Item "allow_globals"
List of variable names, complete with prefix (\f(CW\*(C`$@%\*(C'\fR), that you intend
to use as globals in components.  Normally global variables are
forbidden by \f(CW\*(C`strict\*(C'\fR, but any variable mentioned in this list is
granted a reprieve via a \*(L"use vars\*(R" statement. For example:
.Sp
.Vb 1
\&    allow_globals => [qw($DBH %session)]
.Ve
In a mod_perl environment, \f(CW\*(C`$r\*(C'\fR (the request object) is automatically
added to this list.
.Ip "default_escape_flags" 4
.IX Item "default_escape_flags"
Escape flags to apply to all <% %> expressions by default. The current
valid flags are
.Sp
.Vb 2
\&    h - escape for HTML ('<' => '&lt;', etc.)
\&    u - escape for URL (':' => '%3A', etc.)
.Ve
The developer can override default escape flags on a per-expression
basis; see Devel/escaping_expressions.
.Ip "ignore_warnings_expr" 4
.IX Item "ignore_warnings_expr"
Regular expression indicating which warnings to ignore when compiling
subroutines. Any warning that is not ignored will prevent the
component from being compiled and executed. For example:
.Sp
.Vb 2
\&    ignore_warnings_expr =>
\&        'Global symbol.*requires explicit package'
.Ve
If undef, all warnings are heeded; if '.', all warnings are ignored.
.Sp
By default, this is set to 'Subroutine .* redefined'.  This allows you
to declare global subroutines inside <%once> sections and not receive
an error when the component is reloaded.
.Ip "in_package" 4
.IX Item "in_package"
Indicates the name of the package you wish your components to run in.
This way different applications or virtual hosts can be run in
different name spaces.  Default is \f(CW\*(C`HTML::Mason::Commands\*(C'\fR.
.Ip "postamble" 4
.IX Item "postamble"
A piece of Perl code to insert at the end of every
compiled subroutine. Blank by default. See Parser/preamble.
.Ip "postprocess" 4
.IX Item "postprocess"
Sub reference that is called to postprocess the code and text portions
of a compiled component, just before it is assembled into its final
subroutine form.  The sub is called with two parameters, a scalar
reference to the script and a string containing either \*(L"perl\*(R" or
\&\*(L"alpha\*(R" depending on whether the string is code or text respectively.
The sub is expected to process the string in-place. It will be called
multiple times, once for each piece of code and text.
.Sp
This is the ideal place to translate accents into \s-1HTML\s0 entities.  It
could also be used to strip out comments that you have in your \s-1HTML\s0
files that you don't want the end user to see. See Parser/preprocess.
.Ip "preamble" 4
.IX Item "preamble"
A piece of Perl code to insert at the beginning of
every compiled subroutine. Blank by default, but ApacheHandler
adds the line
.Sp
.Vb 1
\&    use vars qw($r);
.Ve
to suppress strict warnings about uses of global \f(CW$r\fR (the Apache
request object). See Parser/postamble.
.Ip "preprocess" 4
.IX Item "preprocess"
Sub reference that is called to preprocess each component before Parser does
it's magic.  The sub is called with a single parameter, a scalar reference
to the script.  The sub is expected to process the script in-place.   This is
one way to extend the \s-1HTML:\s0:Mason syntax with new tags, etc. See Parser/postprocess.
.Ip "taint_check" 4
.IX Item "taint_check"
This flag allows Mason to work when taint checking is on
(e.g. PerlTaintCheck or \f(CW\*(C`\-T\*(C'\fR flag).  If true, Mason will pass all
component source and filenames through a dummy regular expression
match to untaint them. In the future this option may become more
sophisticated to allow stricter checks. Default is false.
.Ip "use_strict" 4
.IX Item "use_strict"
Indicates whether to use strict in compiled subroutines.
Default is true.
.SH "ACCESSOR METHODS"
.IX Header "ACCESSOR METHODS"
Most of the above properties have standard accessor methods of the
same name: no arguments retrieves the value, and one argument sets it.
For example:
.PP
.Vb 3
\&    my $parser = new HTML::Mason::Parser;
\&    my $strictmode = $parser->use_strict;
\&    $parser->use_strict(1);
.Ve
The only exception is Parser/allow_globals, which works a bit differently.
.SH "OTHER METHODS"
.IX Header "OTHER METHODS"
.Ip "allow_globals (varnames)" 4
.IX Item "allow_globals (varnames)"
Called with no arguments, this returns the value of allow_globals as a
list.  Called with one or more variable names, it appends the names to
the existing list, removing duplicates if any.
.Ip "make_component ([script=>..., script_file=>..., error=>...])" 4
.IX Item "make_component ([script=>..., script_file=>..., error=>...])"
This method compiles a component source script into an
Component object.  The source may be passed in as a string in
\&\fIscript\fR, or as a filename in \fIscript_file\fR.
.Sp
Returns the new Component object on success, or undef if an error
occurred. \fIerror\fR is an optional scalar reference filled with the
error message.
.Sp
Example of usage:
.Sp
.Vb 5
\&    # Make a component
\&    my $comp = $parser->make_component
\&        (script=>'<%perl>my $name = "World";</%perl>Hello <% $name %>!',
\&         error => \emy $error)
\&      or die "error while compiling component: $error";
.Ve
.Vb 2
\&    # Call it from inside another component
\&    $m->comp($comp);
.Ve
.Ip "make_dirs (comp_root=>..., data_dir=>..., [paths=>[...], verbose=>0|1, predicate=>sub {...}, dir_create_mode=>..., update_reload_file=>0|1])" 4
.IX Item "make_dirs (comp_root=>..., data_dir=>..., [paths=>[...], verbose=>0|1, predicate=>sub {...}, dir_create_mode=>..., update_reload_file=>0|1])"
make_dirs traverses a tree of components, compiles any out-of-date
components into object files, and reports errors.
.Sp
\&\fIcomp_root\fR and \fIdata_dir\fR contain the Mason component root and data
directory respectively. These are required.
.Sp
\&\fIpaths\fR is a reference to a list of component paths to make
recursively. By default, makes '/' (the entire component tree).
.Sp
\&\fIverbose\fR is a flag indicating whether to report components compiled
and directories created. True by default.
.Sp
\&\fIpredicate\fR is a subroutine that takes one argument, the component
source file, and returns true or false indicating whether or not to
try to compile it.  By default \fIpredicate\fR ignores all filenames
ending with \*(L"~\*(R".
.Sp
\&\fIdir_create_mode\fR contains the permissions mode for creating new
directories, by default 0775.
.Sp
\&\fIupdate_reload_file\fR is a flag indicating whether to update a reload
file in the data directory as components are recompiled. False by
default.
.Sp
Example of usage:
.Sp
.Vb 3
\&    #!/usr/bin/perl
\&    use HTML::Mason;
\&    use HTML::Mason::ApacheHandler;  # load explicitly to bring in special $m-> commands
.Ve
.Vb 4
\&    my $p = new HTML::Mason::Parser;
\&    $p->allow_globals(qw($r));       # allow Apache $r global
\&    $p->make_dirs (comp_root=>'/usr/home/swartz/web/comps',
\&                   data_dir=>'/usr/home/swartz/web/mason');
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Jonathan Swartz, swartz@pobox.com
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\s-1HTML:\s0:Mason,
\&\s-1HTML:\s0:Mason::Interp,
\&\s-1HTML:\s0:Mason::ApacheHandler,
\&\s-1HTML:\s0:Mason::Admin
