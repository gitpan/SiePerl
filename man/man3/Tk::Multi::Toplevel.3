.\" Automatically generated by Pod::Man version 1.15
.\" Fri Apr 20 15:51:08 2001
.\"
.\" Standard preamble:
.\" ======================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R

.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used
.\" to do unbreakable dashes and therefore won't be available.  \*(C` and
.\" \*(C' expand to `' in nroff, nothing in troff, for use with C<>
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr
.\" for titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and
.\" index entries marked with X<> in POD.  Of course, you'll have to process
.\" the output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it
.\" makes way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.bd B 3
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ======================================================================
.\"
.IX Title "Multi::Toplevel 3"
.TH Multi::Toplevel 3 "perl v5.6.1" "1999-05-31" "User Contributed Perl Documentation"
.UC
.SH "NAME"
Tk::Multi::Toplevel \- Toplevel MultiManager
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& use Multi::Toplevel ;
.Ve
.Vb 1
\& my $mw = MainWindow-> new ;
.Ve
.Vb 1
\& my $p = $mw->MultiTop();
.Ve
.Vb 4
\& # If Multi::Toplevel is the only Tk window of your application
\& $mw -> withdraw ; # hide the main window
\& # destroy the main window when close is called
\& $p -> OnDestroy(sub{$mw->destroy});
.Ve
.Vb 3
\& # add a 'bar' menu with a 'foo' button on the menu bar
\& $p->menuCommand(name => 'foo', menu => 'bar', 
\&                 sub => sub{warn "invoked  bar->foo\en";});
.Ve
.Vb 6
\& # add a menu button on the 'File' menu
\& $p->add(
\&         'command', 
\&         -label => 'baz', 
\&         command => sub {warn "invoked  File->baz\en";}
\&        );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This class is a the Tk::Multi::Manager manpage packed in a Toplevel window. It
features also :
.Ip "\(bu" 4
\&'File->show internal...' button to invoke an Object Scanner 
(See the Tk::ObjScanner manpage)
.Ip "\(bu" 4
A facility to manage user menus with sorted buttons
.Ip "\(bu" 4
A help facility based on the Tk::Pod manpage
.SH "Users menus"
.IX Header "Users menus"
By default the Multi::Toplevel widget comes with 3 menubuttons:
.Ip "\(bu" 4
\&'File' for the main widget commands
.Ip "\(bu" 4
\&'windows' to manage the Multi slaves widget
.Ip "\(bu" 4
\&'Help'
.PP
The user can also add its own menus and menu buttons to the main menubar. 
When needed the user can call the menuCommand method to add a new menu button
(and as new menu if necessary) . Then the user can remove the menu button 
with the menuRemove command.
.PP
For instance, if the user call :
.PP
.Vb 2
\& $widget->->menuCommand(name => 'foo', menu => 'example', 
\&   sub => \e&a_sub);
.Ve
The menubar will feature a new 'example' menu with a 'foo' button.
.PP
Then if the user call : 
.PP
.Vb 2
\& $widget->->menuCommand(name => 'bar', menu => 'example', 
\&   sub => \e&a_sub);
.Ve
The menubar will feature a new 'bar' button in the 'example' menu. Note that 
menu buttons are sorted alphabetically.
.PP
Then if the user call : 
.PP
.Vb 1
\& $widget->menuRemove(name => 'bar', menu => 'example');
.Ve
The bar button will be removed from the menu bar.
.SH "Constructor configuration options"
.IX Header "Constructor configuration options"
.Sh "manager"
.IX Subsection "manager"
Object reference that will be scanned by the ObjScanner. Usefull when you
want to debug the object that actually use the Multi::TopLevel. By default
the ObjScanner will scan the Multi::TopLevel object.
.Sh "podName"
.IX Subsection "podName"
This the name of the pod file that will be displayed with the 
\&'Help'\->'global' button. This should be set to the pod file name of the
class or the application using this widget. 
.PP
By default, the help button will display the pod file of
Multi::TopLevel.
.Sh "podSection"
.IX Subsection "podSection"
This the section of the pod file that will be displayed with the 
\&'Help'\->'global' button.
.PP
By default, the help button will display the '\s-1DESCRIPTION\s0' pod section.
.SH "Advertised widgets"
.IX Header "Advertised widgets"
.Ip "\(bu" 4
fileMenu: 'File' Tk::Menu (on the left of the menu bar)
.Ip "\(bu" 4
menubar : the Tk::Frame containing the menu buttons
.Ip "\(bu" 4
multiMgr: The Tk::Multi::Manager
.PP
Users menus are also advertised (See below)
.SH "delegated methods"
.IX Header "delegated methods"
.Ip "\(bu" 4
newSlave, hide, show, destroySlave : To the Tk::Multi::Manager 
.Ip "\(bu" 4
add, delete, insert : To the 'File' Tk::Menu
.SH "Methods"
.IX Header "Methods"
.Sh "\fImenuCommand()\fP"
.IX Subsection "menuCommand()"
Parameters are :
.Ip "\(bu" 4
name: button_name
.Ip "\(bu" 4
menu: menu_name 
.Ip "\(bu" 4
command: subref
.PP
Will add the 'button_name' button in the 'menu_name' menu to invoke the sub 
ref. If necessary, the 'menu_name' menu will be created.
.Sh "menuRemove ()"
.IX Subsection "menuRemove ()"
.Ip "\(bu" 4
name: button_name 
.Ip "\(bu" 4
menu: menu_name 
.PP
Will remove the 'button_name' button from the 'menu_name' menu.
If no buttons are left, the 'menu_name' menu will be removed from the menu
bar.
.Sh "showHelp (...)"
.IX Subsection "showHelp (...)"
Parameters are :
.Ip "\(bu" 4
pod: pod file name (optional, defaults to the file name passed to the
constructor or to 'Tk::Multi::Toplevel')
.Ip "\(bu" 4
section: pod_section (optional, defaults to the sectione name passed to the
constructor or to '\s-1DESCRIPTION\s0')
.PP
Will invoke the Tk::Pod documentation widget of the specified
pod file and pod section.
.SH "BUGS"
.IX Header "BUGS"
Users menu does not fold when you insert a lot of buttons.
.PP
Tk::Pod 0.10 does not display the specified section. Use a later version or
this patch (http://www.xray.mpe.mpg.de/mailing-lists/ptk/1998\-11/msg00033.html)
.SH "AUTHOR"
.IX Header "AUTHOR"
Dominique Dumont, Dominique_Dumont@grenoble.hp.com
.PP
Copyright (c) 1998\-1999 Dominique Dumont. All rights reserved.
This program is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIperl\fR\|(1), \fITk\fR\|(3), \fITk::Multi::Manager\fR\|(3), \fITk::Pod\fR\|(3), \fITk::ObjScanner\fR\|(3),
\&\fITk::mega\fR\|(3)
