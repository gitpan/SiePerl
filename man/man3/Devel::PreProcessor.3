.\" Automatically generated by Pod::Man version 1.15
.\" Mon Apr 23 10:41:43 2001
.\"
.\" Standard preamble:
.\" ======================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R

.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used
.\" to do unbreakable dashes and therefore won't be available.  \*(C` and
.\" \*(C' expand to `' in nroff, nothing in troff, for use with C<>
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr
.\" for titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and
.\" index entries marked with X<> in POD.  Of course, you'll have to process
.\" the output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it
.\" makes way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.bd B 3
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ======================================================================
.\"
.IX Title "Devel::PreProcessor 3"
.TH Devel::PreProcessor 3 "perl v5.6.1" "1999-02-21" "User Contributed Perl Documentation"
.UC
.SH "NAME"
Devel::PreProcessor \- Module inlining and other Perl source manipulations
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
From a command line,
.PP
.Vb 1
\&    sh> perl Devel/PreProcessor.pm -Flags sourcefile > targetfile
.Ve
Or in a Perl script,
.PP
.Vb 1
\&    use Devel::PreProcessor qw( Flags );
.Ve
.Vb 2
\&    select(OUTPUTFH);
\&    Devel::PreProcessor::parse_file( $source_pathname );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This package processes Perl source files and outputs a modified version
acording to several user-setable option flags, as detailed below.
.PP
Each of the flag names listed below can be used as above, with a hyphen on
the command line, or as one of the arguments in an import statement. Each
of these flags are mapped to the scalar package variable of the same name.
.Ip "Includes" 4
.IX Item "Includes"
If true, parse_file will attempt to replace \f(CW\*(C`require\*(C'\fR, \f(CW\*(C`use\*(C'\fR and \f(CW\*(C`no\*(C'\fR
statements with inline declarations containg the source of the relevant
library found in the current \f(CW@INC\fR. The resulting script should operate
identically and no longer be dependant on external libraries (but see
compatibility note below).
.Sp
If the corresponding file can not be located, the statements are left
unchanged in the source; numeric perl version requirements are handled
the same way.
.Sp
If a \f(CW\*(C`use libs ...\*(C'\fR statement is encountered in the source, the library
path arguments are evaluated and pushed onto \f(CW@INC\fR at run-time to enable
inclusion of libraries from these paths.
.Sp
Unless the file explicitly \f(CW\*(C`use\*(C'\fR's or \f(CW\*(C`require\*(C'\fR's AutoLoader,
information after \f(CW\*(C`_\|_END_\|_\*(C'\fR is not included in the resultant
file. Information after \f(CW\*(C`_\|_DATA_\|_\*(C'\fR is also discarded, except for the
first, outermost source file.
.Ip "ShowFileBoundaries" 4
.IX Item "ShowFileBoundaries"
If true, comment lines will be inserted delimiting the start and end of
each inlined file.
.Ip "StripPods" 4
.IX Item "StripPods"
If true, parse_file will not include \s-1POD\s0 from the source files. All
groups of lines resembling the following will be discarded:
.Sp
.Vb 3
\&    =(pod|head1|head2) 
\&    ...  
\&    =cut
.Ve
.Ip "StripBlankLines" 4
.IX Item "StripBlankLines"
If true, parse_file will skip lines that are empty, or that contain
only whitespace.
.Ip "StripComments" 4
.IX Item "StripComments"
If true, parse_file will not include full-line comments from the
source files. Only lines that start with a pound sign are discarded;
this behaviour might not match Perl's parsing rules in some cases,
such as multiline strings.
.Ip "Conditionals" 4
.IX Item "Conditionals"
If true, parse_file will utilize a simple conditional inclusion scheme,
as follows.
.Sp
.Vb 3
\&    #__CONDITIONAL__ if expr
\&    ...         
\&    #__CONDITIONAL__ endif
.Ve
The provided Perl expression is evaluated, and unless it is true,
everything up to the next endif declaration is replaced with empty
lines. In order to allow the default behavour to be provided when
running the raw files, comment out lines in non-default branches with
the following:
.Sp
.Vb 1
\&    #__CONDITIONAL__ ...
.Ve
Empty lines are used  in place of skipped blocks to make line numbers
come out evenly, but conditional use or require statements will throw
the count off, as we don't pad by the size of the file that would have
been in-lined.
.Sp
The conditional functionality can be combined with Perl's \f(CW\*(C`\-s\*(C'\fR switch,
which allows you to set flags on the command line, such as:
.Sp
.Vb 1
\&    perl -s Devel/PreProcessor.pm -Conditionals -Switch filter.test
.Ve
You can use any name for your switch, and the matching scalar variable
will be set true; the following code will only be used if you supply
the argument as shown below.
.Sp
.Vb 3
\&    #__CONDITIONAL__ if $Switch
\&    #__CONDITIONAL__   print "you hit the switch!\en";
\&    #__CONDITIONAL__ endif
.Ve
.SH "EXAMPLES"
.IX Header "EXAMPLES"
To inline all used modules:
.PP
.Vb 1
\&    perl -s Devel/PreProcessor.pm -Includes foo.pl > foo_complete.pl
.Ve
To count the lines of Perl source in a file, run the preprocessor from
a shell with the following options
.PP
.Vb 2
\&    perl -s Devel/PreProcessor.pm -StripComments -StripPods \e
\&    -StripBlankLines foo.pl | wc -l
.Ve
.SH "BUGS AND CAVEATS"
.IX Header "BUGS AND CAVEATS"
.Ip "Compatibility: Includes" 4
.IX Item "Compatibility: Includes"
Libraries inlined with Includes may not be appropriate on another system;
for example, if Config is inlined, the script may fail if run on a platform
other than that on which it was built. This problem can be minimized
by adjusting the search path to not include modules in the version- or
architecture-specific library trees, but you will then need to ensure
that those modules are available on the execution platform.
.Ip "Limitation: Pragmas" 4
.IX Item "Limitation: Pragmas"
While some pragmas are known to work, including use vars, problems may
pop up with others. In particular, use strict and no strict pragmas are
removed from the resulting source, because their scoping changes in a
single-file context, usually with fatal results.
.Ip "Bug: Multi-line use statements not handled" 4
.IX Item "Bug: Multi-line use statements not handled"
Should support newline in import blocks for multiline use statements.
.Ip "Limitation: Module _\|_DATA_\|_ contents lost" 4
.IX Item "Limitation: Module __DATA__ contents lost"
Few modules place anything other than \s-1POD\s0 in a _\|_DATA_\|_ section, much
less ever try to read from it, so this hasn't been a priority to fix.
.Ip "Limitation: binary files not included" 4
.IX Item "Limitation: binary files not included"
There's not much we can do about XSub/SO/PLL files.
.SH "PREREQUISITES AND INSTALLATION"
.IX Header "PREREQUISITES AND INSTALLATION"
This package should run on any standard Perl 5 installation.
.PP
You may retrieve this package from the below \s-1URL:\s0
  http://www.evoscript.com/dist/
.PP
To install this package, download and unpack the distribution archive,
then:
.if n .Ip "\(bu \f(CW""""perl Makefile.PL""""\fR" 4
.el .Ip "\(bu \f(CWperl Makefile.PL\fR" 4
.IX Item "perl Makefile.PL"
.PD 0
.if n .Ip "\(bu \f(CW""""make test""""\fR" 4
.el .Ip "\(bu \f(CWmake test\fR" 4
.IX Item "make test"
.if n .Ip "\(bu \f(CW""""make install""""\fR" 4
.el .Ip "\(bu \f(CWmake install\fR" 4
.IX Item "make install"
.PD
.SH "STATUS AND SUPPORT"
.IX Header "STATUS AND SUPPORT"
This release of Devel::PreProcessor is intended primarily for public
review and feedback, but is stable enough for production use. It has been
tested in several environments and no major problems have been discovered,
but it should be considered \*(L"beta\*(R" pending further feedback.
.PP
.Vb 4
\&  Name            DSLI  Description
\&  --------------  ----  ---------------------------------------------
\&  Devel::
\&  ::PreProcessor  bdpf  Module inlining and other Perl source manipulations
.Ve
Further information and support for this module is available at
<www.evoscript.com>.
.PP
Please report bugs or other problems to <bugs@evoscript.com>.
.SH "AUTHORS AND COPYRIGHT"
.IX Header "AUTHORS AND COPYRIGHT"
Copyright 1998, 1999 Evolution Online Systems, Inc. <www.evolution.com>
.PP
You may use this software for free under the terms of the Artistic License.
.PP
Contributors: M. Simon Cavalletto <simonm@evolution.com> and
Del Merritt <dmerritt@intranetics.com>, with Win32 debugging
assistance from Randy Roy.
.PP
Derived from filter.pl, as provided by ActiveWare
<www.activestate.com>
