.\" Automatically generated by Pod::Man version 1.15
.\" Mon Apr 23 12:26:09 2001
.\"
.\" Standard preamble:
.\" ======================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R

.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used
.\" to do unbreakable dashes and therefore won't be available.  \*(C` and
.\" \*(C' expand to `' in nroff, nothing in troff, for use with C<>
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr
.\" for titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and
.\" index entries marked with X<> in POD.  Of course, you'll have to process
.\" the output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it
.\" makes way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.bd B 3
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ======================================================================
.\"
.IX Title "Squeeze 3"
.TH Squeeze 3 "perl v5.6.1" "1998-12-04" "User Contributed Perl Documentation"
.UC
.SH "NAME"
Squeeze.pm \- Shorten text to minimum syllables by using hash table and
vowel deletion
.SH "REVISION"
.IX Header "REVISION"
$Id: Squeeze.pm,v 1.25 1998/12/04 10:00:08 jaalto Exp $
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&    use Squeeze.pm;         # imnport only function
\&    use Squeeze qw( :ALL ); # import all functions and variables
\&    use English;
.Ve
.Vb 4
\&    while (<>)
\&    {
\&        print SqueezeText $ARG;
\&    }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Squeeze English text to most compact format possibly so that it is barely
readable. You should convert all text to lowercase for maximum compression,
because optimizations have been designed mostly fr uncapitalised letters.
.Sp
\&\f(CW\*(C`Warning: Each line is processed multiple times, so prepare for slow
conversion time\*(C'\fR
.PP
You can use this module e.g. to preprocess text before it is sent to
electronic media that has some maximum text size limit. For example pagers
have an arbitrary text size limit, typically 200 characters, which you want
to fill as much as possible. Alternatively you may have \s-1GSM\s0 cellular phone
which is capable of receiving Short Messages (\s-1SMS\s0), whose message size
limit is 160 characters. For demonstration of this module's \fISqueezeText()\fR
function , the description text of this paragraph has been converted below.
See yourself if it's readable (Yes, it takes some time to get used to). The
compress ratio is typically 30\-40%
.PP
.Vb 9
\&    u _n use thi mod e.g. to prprce txt bfre i_s snt to
\&    elrnic mda has som max txt siz lim. f_xmple pag
\&    hv  abitry txt siz lim, tpcly 200 chr, W/ u wnt
\&    to fll as mch as psbleAlternatvly u may hv GSM cllar P8
\&    w_s cpble of rcivng Short msg (SMS), WS/ msg siz
\&    lim is 160 chr. 4 demonstrton of thi mods SquezText
\&    fnc ,  dsc txt of thi prgra has ben cnvd_ blow
\&    See uself if i_s redble (Yes, it tak som T to get usdto
\&    compr rat is tpcly 30-40
.Ve
And if \f(CW$SQZ_OPTIMIZE_LEVEL\fR is set to non-zero
.PP
.Vb 9
\&    u_nUseThiModE.g.ToPrprceTxtBfreI_sSntTo
\&    elrnicMdaHasSomMaxTxtSizLim.F_xmplePag
\&    hvAbitryTxtSizLim,Tpcly200Chr,W/UWnt
\&    toFllAsMchAsPsbleAlternatvlyUMayHvGSMCllarP8
\&    w_sCpbleOfRcivngShortMsg(SMS),WS/MsgSiz
\&    limIs160Chr.4DemonstrtonOfThiModsSquezText
\&    fnc,DscTxtOfThiPrgraHasBenCnvd_Blow
\&    SeeUselfIfI_sRedble(Yes,ItTakSomTToGetUsdto
\&    comprRatIsTpcly30-40
.Ve
The comparision of these two show
.PP
.Vb 3
\&    Original text   : 627 characters
\&    Level 0         : 433 characters    reduction 31 %
\&    Level 1         : 345 characters    reduction 45 %  (+14 improvement)
.Ve
There are few grammar rules which are used to shorten some English
tokens very much:
.PP
.Vb 1
\&    Word that has _ is usually a verb
.Ve
.Vb 2
\&    Word that has / is usually a substantive, noun,
\&                    pronomine or other non-verb
.Ve
For example, these tokens must be understood before text can be read. This
is not yet like Geek code, because you don't need external parser to
understand this, but just some common sense and time to adapt yourself to
this text. \fIFor a complete up to date list, you have to peek the source
code\fR
.PP
.Vb 1
\&    automatically => 'acly_'
.Ve
.Vb 5
\&    for           => 4
\&    for him       => 4h
\&    for her       => 4h
\&    for them      => 4t
\&    for those     => 4t
.Ve
.Vb 2
\&    can           => _n
\&    does          => _s
.Ve
.Vb 5
\&    it is         => i_s
\&    that is       => t_s
\&    which is      => w_s
\&    that are      => t_r
\&    which are     => w_r
.Ve
.Vb 3
\&    less          => -/
\&    more          => +/
\&    most          => ++
.Ve
.Vb 2
\&    however       => h/ver
\&    think         => thk_
.Ve
.Vb 1
\&    useful        => usful
.Ve
.Vb 6
\&    you           => u
\&    your          => u/
\&    you'd         => u/d
\&    you'll        => u/l
\&    they          => t/
\&    their         => t/r
.Ve
.Vb 6
\&    will          => /w
\&    would         => /d
\&    with          => w/
\&    without       => w/o
\&    which         => W/
\&    whose         => WS/
.Ve
Time is expressed with big letters
.PP
.Vb 7
\&    time          => T
\&    minute        => MIN
\&    second        => SEC
\&    hour          => HH
\&    day           => DD
\&    month         => MM
\&    year          => YY
.Ve
Other Big letter acronyms
.PP
.Vb 1
\&    phone         => P8
.Ve
.SH "EXAMPLES"
.IX Header "EXAMPLES"
To add new words e.g. to word conversion hash table, you'd define your
custom set and merge them to existing ones. Do similarly to
\&\f(CW\*(C`%SQZ_WXLATE_MULTI_HASH\*(C'\fR and \f(CW\*(C`$SQZ_ZAP_REGEXP\*(C'\fR and then start using the
conversion function.
.PP
.Vb 2
\&    use English;
\&    use Squeeze qw( :ALL );
.Ve
.Vb 7
\&    my %myExtraWordHash =
\&    (
\&          new-word1  => 'conversion1'
\&        , new-word2  => 'conversion2'
\&        , new-word3  => 'conversion3'
\&        , new-word4  => 'conversion4'
\&    );
.Ve
.Vb 2
\&    #   First take the existing tables and merge them with my
\&    #   translation table
.Ve
.Vb 6
\&    my %mySustomWordHash =
\&    (
\&          %SQZ_WXLATE_HASH
\&        , %SQZ_WXLATE_EXTRA_HASH
\&        , %myExtraWordHash
\&    );
.Ve
.Vb 1
\&    my $myXlat = 0;                             # state flag
.Ve
.Vb 7
\&    while (<>)
\&    {
\&        if ( $condition )
\&        {
\&            SqueezeHashSet \e%mySustomWordHash;  # Use MY conversions
\&            $myXlat = 1;
\&        }
.Ve
.Vb 5
\&        if ( $myXlat and $condition )
\&        {
\&            SqueezeHashSet "reset";             # Back to default table
\&            $myXlat = 0;
\&        }
.Ve
.Vb 2
\&        print SqueezeText $ARG;
\&    }
.Ve
Similarly you can redefine the multi word translate table by supplying
another hash reference in call to \fISqueezeHashSet()\fR. To kill more text
immediately in addtion to default, just concatenate the regexps to
\&\fI$SQZ_ZAP_REGEXP\fR
.SH "KNOWN BUGS"
.IX Header "KNOWN BUGS"
There may be lot of false conversions and if you think that some word
squeezing went too far, please 1) turn on the debug 2) send you example
text 3) debug log log to the maintainer. To see how the conversion goes
e.g. for word \fIMessages\fR:
.PP
.Vb 2
\&    use English;
\&    use Lingua::EN:Squeeze;
.Ve
.Vb 2
\&    #   activate debug when case-insensitive worj "Messages" is found from the
\&    #   line.
.Ve
.Vb 1
\&    SqueezeDebug( 1, '(?i)Messages' );
.Ve
.Vb 2
\&    $ARG = "This line has some Messages in it";
\&    print SqueezeText $ARG;
.Ve
.SH "EXPORTABLE VARIABLES"
.IX Header "EXPORTABLE VARIABLES"
The defaults may not conquer all possible text, so you may wish to
extend the hash tables and \fI$SQZ_ZAP_REGEXP\fR to cope with your typical text.
.Sh "$SQZ_ZAP_REGEXP"
.IX Subsection "$SQZ_ZAP_REGEXP"
Text to kill immediately, like \*(L"Hm, Hi, Hello...\*(R" You can only set this
once, because this regexp is compiled immediately when \f(CW\*(C`SqueezeText()\*(C'\fR is
caller for the first time.
.Sh "$SQZ_OPTIMIZE_LEVEL"
.IX Subsection "$SQZ_OPTIMIZE_LEVEL"
This controls how optimized the text will be. Curretly there is only
levels 0 (default) and level 1, which squeezes out all spaces. This
improves compression by average of 10%, but the text is more harder to
read. If space is tight, use this extended compression optimization.
.Sh "%SQZ_WXLATE_MULTI_HASH"
.IX Subsection "%SQZ_WXLATE_MULTI_HASH"
\&\fIMulti Word\fR conversion hash table:  \*(L"for you\*(R" => \*(L"4u\*(R" ...
.Sh "%SQZ_WXLATE_HASH"
.IX Subsection "%SQZ_WXLATE_HASH"
\&\fISingle Word\fR conversion hash table: word => conversion. This table is applied
after \f(CW\*(C`%SQZ_WXLATE_MULTI_HASH\*(C'\fR has been used.
.Sh "%SQZ_WXLATE_EXTRA_HASH"
.IX Subsection "%SQZ_WXLATE_EXTRA_HASH"
Aggressive \fISingle Word\fR conversions like: without => w/o. Applied last.
.SH "INTERFACE FUNCTIONS"
.IX Header "INTERFACE FUNCTIONS"
.Sh "\fISqueezeText\fP\|($)"
.IX Subsection "SqueezeText"
.Ip "Description" 4
.IX Item "Description"
Squeeze text by using vowel substitutions and deletions and hash tables
that guide text substitutions. The line is parsed multiple times and
this will take some time.
.Ip "arg1: \f(CW$text\fR" 4
.IX Item "arg1: $text"
String. Line of Text.
.Ip "Return values" 4
.IX Item "Return values"
String, squeezed text.
.Sh "\fInew()\fP"
.IX Subsection "new()"
.Ip "Description" 4
.IX Item "Description"
Return class object.
.Ip "Return values" 4
.IX Item "Return values"
object.
.Sh "SqueezeHashSet($;$)"
.IX Subsection "SqueezeHashSet($;$)"
.Ip "Description" 4
.IX Item "Description"
Set hash tables to use for converting text. The multiple word conversion
is done first and after that the single words conversions.
.Ip "arg1: \e%wordHashRef" 4
.IX Item "arg1: %wordHashRef"
Pointer to be used to convert single words.
If \*(L"reset\*(R", use default hash table.
.Ip "arg2: \e%multiHashRef [optional]" 4
.IX Item "arg2: %multiHashRef [optional]"
pointer to be used to convert multiple words.
If \*(L"reset\*(R", use default hash table.
.Ip "Return values" 4
.IX Item "Return values"
None.
.Sh "SqueezeControl(;$)"
.IX Subsection "SqueezeControl(;$)"
.Ip "Description" 4
.IX Item "Description"
Select level of text squeezing: noconv, enable, medium, maximum.
.Ip "arg1: \f(CW$state\fR" 4
.IX Item "arg1: $state"
String. If nothing, set maximum squeeze level (kinda: restore defualts).
.Sp
.Vb 4
\&    noconv      Turn off squeeze
\&    conv        Turn on squeeze
\&    med         Set squeezing level to medium
\&    max         Set squeezing level to maximum
.Ve
.Ip "Return values" 4
.IX Item "Return values"
None.
.Sh "SqueezeDebug(;$$)"
.IX Subsection "SqueezeDebug(;$$)"
.Ip "Description" 4
.IX Item "Description"
Activate or deactivate debug.
.Ip "arg1: \f(CW$state\fR [optional]" 4
.IX Item "arg1: $state [optional]"
If not given, turn debug off. If non-zero, turn debug on.
You must also supply \f(CW\*(C`regexp\*(C'\fR if you turn on debug, unless you have
given it previously.
.Ip "arg1: \f(CW$regexp\fR [optional]" 4
.IX Item "arg1: $regexp [optional]"
If given, use regexp to trigger debug output when debug is on.
.Ip "Return values" 4
.IX Item "Return values"
None.
.SH "AVAILABILITY"
.IX Header "AVAILABILITY"
Author can be reached at jari.aalto@poboxes.com HomePage via forwarding
service is at http://www.netforward.com/poboxes/?jari.aalto or
alternatively absolute url is at ftp://cs.uta.fi/pub/ssjaaa/ but this may
move without notice. Prefer keeping the forwarding service link in your
bookmark.
.PP
Latest version of this module can be found at \f(CW$CPAN\fR/modules/by-module/Lingua/
.SH "AUTHOR"
.IX Header "AUTHOR"
Copyright (C) 1998\-1999 Jari Aalto. All rights reserved. This program is
free software; you can redistribute it and/or modify it under the same
terms as Perl itself or in terms of Gnu General Public licence v2 or later.
