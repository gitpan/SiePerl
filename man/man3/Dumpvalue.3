.\" Automatically generated by Pod::Man version 1.15
.\" Fri Apr 20 13:06:48 2001
.\"
.\" Standard preamble:
.\" ======================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R

.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used
.\" to do unbreakable dashes and therefore won't be available.  \*(C` and
.\" \*(C' expand to `' in nroff, nothing in troff, for use with C<>
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr
.\" for titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and
.\" index entries marked with X<> in POD.  Of course, you'll have to process
.\" the output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it
.\" makes way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.bd B 3
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ======================================================================
.\"
.IX Title "Dumpvalue 3"
.TH Dumpvalue 3 "perl v5.6.1" "2001-02-23" "Perl Programmers Reference Guide"
.UC
.SH "NAME"
Dumpvalue \- provides screen dump of Perl data.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 5
\&  use Dumpvalue;
\&  my $dumper = new Dumpvalue;
\&  $dumper->set(globPrint => 1);
\&  $dumper->dumpValue(\e*::);
\&  $dumper->dumpvars('main');
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
.Sh "Creation"
.IX Subsection "Creation"
A new dumper is created by a call
.PP
.Vb 1
\&  $d = new Dumpvalue(option1 => value1, option2 => value2)
.Ve
Recognized options:
.if n .Ip "\f(CW""""arrayDepth""""\fR, \f(CW""""hashDepth""""\fR" 4
.el .Ip "\f(CWarrayDepth\fR, \f(CWhashDepth\fR" 4
.IX Item "arrayDepth, hashDepth"
Print only first N elements of arrays and hashes.  If false, prints all the
elements.
.if n .Ip "\f(CW""""compactDump""""\fR, \f(CW""""veryCompact""""\fR" 4
.el .Ip "\f(CWcompactDump\fR, \f(CWveryCompact\fR" 4
.IX Item "compactDump, veryCompact"
Change style of array and hash dump.  If true, short array
may be printed on one line.
.if n .Ip "\f(CW""""globPrint""""\fR" 4
.el .Ip "\f(CWglobPrint\fR" 4
.IX Item "globPrint"
Whether to print contents of globs.
.if n .Ip "\f(CW""""DumpDBFiles""""\fR" 4
.el .Ip "\f(CWDumpDBFiles\fR" 4
.IX Item "DumpDBFiles"
Dump arrays holding contents of debugged files.
.if n .Ip "\f(CW""""DumpPackages""""\fR" 4
.el .Ip "\f(CWDumpPackages\fR" 4
.IX Item "DumpPackages"
Dump symbol tables of packages.
.if n .Ip "\f(CW""""DumpReused""""\fR" 4
.el .Ip "\f(CWDumpReused\fR" 4
.IX Item "DumpReused"
Dump contents of \*(L"reused\*(R" addresses.
.if n .Ip "\f(CW""""tick""""\fR, \f(CW""""HighBit""""\fR, \f(CW""""printUndef""""\fR" 4
.el .Ip "\f(CWtick\fR, \f(CWHighBit\fR, \f(CWprintUndef\fR" 4
.IX Item "tick, HighBit, printUndef"
Change style of string dump.  Default value of \f(CW\*(C`tick\*(C'\fR is \f(CW\*(C`auto\*(C'\fR, one
can enable either double-quotish dump, or single-quotish by setting it
to \f(CW\*(C`"\*(C'\fR or \f(CW\*(C`'\*(C'\fR.  By default, characters with high bit set are printed
\&\fIas is\fR.
.if n .Ip "\f(CW""""UsageOnly""""\fR" 4
.el .Ip "\f(CWUsageOnly\fR" 4
.IX Item "UsageOnly"
\&\fIvery\fR rudimentally per-package memory usage dump.  If set,
\&\f(CW\*(C`dumpvars\*(C'\fR calculates total size of strings in variables in the package.
.Ip "unctrl" 4
.IX Item "unctrl"
Changes the style of printout of strings.  Possible values are
\&\f(CW\*(C`unctrl\*(C'\fR and \f(CW\*(C`quote\*(C'\fR.
.Ip "subdump" 4
.IX Item "subdump"
Whether to try to find the subroutine name given the reference.
.Ip "bareStringify" 4
.IX Item "bareStringify"
Whether to write the non-overloaded form of the stringify-overloaded objects.
.Ip "quoteHighBit" 4
.IX Item "quoteHighBit"
Whether to print chars with high bit set in binary or \*(L"as is\*(R".
.Ip "stopDbSignal" 4
.IX Item "stopDbSignal"
Whether to abort printing if debugger signal flag is raised.
.PP
Later in the life of the object the methods may be queries with \fIget()\fR
method and \fIset()\fR method (which accept multiple arguments).
.Sh "Methods"
.IX Subsection "Methods"
.Ip "dumpValue" 4
.IX Item "dumpValue"
.Vb 2
\&  $dumper->dumpValue($value);
\&  $dumper->dumpValue([$value1, $value2]);
.Ve
.Ip "dumpValues" 4
.IX Item "dumpValues"
.Vb 1
\&  $dumper->dumpValues($value1, $value2);
.Ve
.Ip "dumpvars" 4
.IX Item "dumpvars"
.Vb 2
\&  $dumper->dumpvars('my_package');
\&  $dumper->dumpvars('my_package', 'foo', '~bar$', '!......');
.Ve
The optional arguments are considered as literal strings unless they
start with \f(CW\*(C`~\*(C'\fR or \f(CW\*(C`!\*(C'\fR, in which case they are interpreted as regular
expressions (possibly negated).
.Sp
The second example prints entries with names \f(CW\*(C`foo\*(C'\fR, and also entries
with names which ends on \f(CW\*(C`bar\*(C'\fR, or are shorter than 5 chars.
.Ip "set_quote" 4
.IX Item "set_quote"
.Vb 1
\&  $d->set_quote('"');
.Ve
Sets \f(CW\*(C`tick\*(C'\fR and \f(CW\*(C`unctrl\*(C'\fR options to suitable values for printout with the
given quote char.  Possible values are \f(CW\*(C`auto\*(C'\fR, \f(CW\*(C`'\*(C'\fR and \f(CW\*(C`"\*(C'\fR.
.Ip "set_unctrl" 4
.IX Item "set_unctrl"
.Vb 1
\&  $d->set_unctrl('"');
.Ve
Sets \f(CW\*(C`unctrl\*(C'\fR option with checking for an invalid argument.
Possible values are \f(CW\*(C`unctrl\*(C'\fR and \f(CW\*(C`quote\*(C'\fR.
.Ip "compactDump" 4
.IX Item "compactDump"
.Vb 1
\&  $d->compactDump(1);
.Ve
Sets \f(CW\*(C`compactDump\*(C'\fR option.  If the value is 1, sets to a reasonable
big number.
.Ip "veryCompact" 4
.IX Item "veryCompact"
.Vb 1
\&  $d->veryCompact(1);
.Ve
Sets \f(CW\*(C`compactDump\*(C'\fR and \f(CW\*(C`veryCompact\*(C'\fR options simultaneously.
.Ip "set" 4
.IX Item "set"
.Vb 1
\&  $d->set(option1 => value1, option2 => value2);
.Ve
.Ip "get" 4
.IX Item "get"
.Vb 1
\&  @values = $d->get('option1', 'option2');
.Ve
