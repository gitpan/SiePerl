.\" Automatically generated by Pod::Man version 1.15
.\" Mon Apr 23 13:10:49 2001
.\"
.\" Standard preamble:
.\" ======================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R

.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used
.\" to do unbreakable dashes and therefore won't be available.  \*(C` and
.\" \*(C' expand to `' in nroff, nothing in troff, for use with C<>
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr
.\" for titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and
.\" index entries marked with X<> in POD.  Of course, you'll have to process
.\" the output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it
.\" makes way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.bd B 3
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ======================================================================
.\"
.IX Title "Rcs 3"
.TH Rcs 3 "perl v5.6.1" "1998-10-19" "User Contributed Perl Documentation"
.UC
.SH "NAME"
Rcs \- Perl Object Class for Revision Control System (\s-1RCS\s0).
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use Rcs;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This Perl module provides an object oriented interface to access 
\&\fBRevision Control System (\s-1RCS\s0)\fR utilities.  \s-1RCS\s0 must be installed on
the system prior to using this module.  This module should simplify
the creation of an \s-1RCS\s0 front-end.
.Sh "\s-1OBJECT\s0 \s-1CONSTRUCTOR\s0"
.IX Subsection "OBJECT CONSTRUCTOR"
The \fBnew\fR method may be used as either a class method or an object
method to create a new object.
.PP
.Vb 2
\&    # called as class method
\&    $obj = Rcs->new;
.Ve
.Vb 2
\&    # called as object method
\&    $newobj = $obj->new;
.Ve
.Sh "\s-1CLASS\s0 \s-1METHODS\s0"
.IX Subsection "CLASS METHODS"
Besides the object constructor, there are three class methods provided
which effect any newly created objects.
.PP
The \fBarcext\fR method sets the \s-1RCS\s0 archive extension, which is ',v' by
default.
.PP
.Vb 4
\&    # set/unset RCS archive extension
\&    Rcs->arcext('');            # set no archive extension
\&    Rcs->arcext(',v');          # set archive extension to ',v'
\&    $arc_ext = Rcs->arcext();   # get current archive extension
.Ve
The \fBbindir\fR method sets the directory path where the \s-1RCS\s0 executables
(i.e. rcs, ci, co) are located.  The default location is '/usr/local/bin'.
.PP
.Vb 2
\&    # set RCS bin directory
\&    Rcs->bindir('/usr/bin');
.Ve
.Vb 2
\&    # access RCS bin directory
\&    $bin_dir = Rcs->bindir;
.Ve
The \fBquiet\fR method sets/unsets the quiet mode for the \s-1RCS\s0 executables.
Quiet mode is set by default.
.PP
.Vb 3
\&    # set/unset RCS quiet mode
\&    Rcs->quiet(0);      # unset quiet mode
\&    Rcs->quiet(1);      # set quiet mode
.Ve
.Vb 2
\&    # access RCS quiet mode
\&    $quiet_mode = Rcs->quiet;
.Ve
These methods may also be called as object methods.
.PP
.Vb 3
\&    $obj->arcext('');
\&    $obj->bindir('/usr/bin');
\&    $obj->quiet(0);
.Ve
.Sh "\s-1OBJECT\s0 \s-1ATTRIBUTE\s0 \s-1METHODS\s0"
.IX Subsection "OBJECT ATTRIBUTE METHODS"
These methods set the attributes of the \s-1RCS\s0 object.
.PP
The \fBfile\fR method is used to set the name of the \s-1RCS\s0 working file.  The
filename must be set before invoking any access of modifier methods on the
object.
.PP
.Vb 1
\&    $obj->file('mr_anderson.pl');
.Ve
The \fBarcfile\fR method is used to set the name of the \s-1RCS\s0 archive file.
Using this method is optional, as the other methods will assume the archive
filename is the same as the working file unless specified otherwise.  The
\&\s-1RCS\s0 archive extension (default ',v') is automatically added to the filename.
.PP
.Vb 1
\&    $obj->arcfile('principle_mcvicker.pl');
.Ve
The \fBworkdir\fR methods set the path of the \s-1RCS\s0 working directory.  If not
specified, default path is '.' (current working directory).
.PP
.Vb 1
\&    $obj->workdir('/usr/local/source');
.Ve
The \fBrcsdir\fR methods set the path of the \s-1RCS\s0 archive directory.  If not
specified, default path is './RCS'.
.PP
.Vb 1
\&    $obj->rcsdir('/usr/local/archive');
.Ve
.Sh "\s-1RCS\s0 \s-1PARSE\s0 \s-1METHODS\s0"
.IX Subsection "RCS PARSE METHODS"
This class provides methods to directly parse the \s-1RCS\s0 archive file.
.PP
The \fBaccess\fR method returns a list of all user on the access list.
.PP
.Vb 1
\&    @access_list = $obj->access;
.Ve
The \fBauthor\fR method returns the author of the revision.  The head revision
is used if no revision argument is passed to method.
.PP
.Vb 2
\&    # returns the author of revision '1.3'
\&    $author = $obj->author('1.3');
.Ve
.Vb 2
\&    # returns the authos of the head revision
\&    $author = $obj->author;
.Ve
The \fBhead\fR method returns the head revision.
.PP
.Vb 1
\&    $head = $obj->head;
.Ve
The \fBlock\fR method returns the locker of the revision.  The method returns
null if the revision is unlocked.  The head revision is used if no revision
argument is passed to method.
.PP
.Vb 2
\&    # returns locker of revision '1.3'
\&    $locker = $obj->lock('1.3');
.Ve
.Vb 2
\&    # returns locker of head revision
\&    $locker = $obj->lock;
.Ve
The \fBrevisions\fR method returns a list of all revisions of archive file.
.PP
.Vb 1
\&    @revisions = $obj->revisions;
.Ve
The \fBstate\fR method returns the state of the revision. The head revision
is used if no revision argument is passed to method.
.PP
.Vb 2
\&    # returns state of revision '1.3'
\&    $state = $obj->state('1.3');
.Ve
.Vb 2
\&    # returns state of head revision
\&    $state = $obj->state;
.Ve
The \fBsymbol\fR method returns the \fIsymbol\fR\|(s) associated with a revision.
If called in list context, method returns all symbols associated with
revision.  If called in scalar context, method returns last symbol
assciated with a revision.  The head revision is used if no revision argument
is passed to method.
.PP
.Vb 2
\&    # list context, returns all symbols associated with revision 1.3
\&    @symbols = $obj->symbol('1.3');
.Ve
.Vb 2
\&    # list context, returns all symbols associated with head revision
\&    @symbols = $obj->symbol;
.Ve
.Vb 2
\&    # scalar context, returns last symbol associated with revision 1.3
\&    $symbol = $obj->symbol('1.3');
.Ve
.Vb 2
\&    # scalar context, returns last symbol associated with head revision
\&    $symbol = $obj->symbol;
.Ve
The \fBsymbols\fR method returns a hash, keyed by symbol, of all of the revisions
associated with the file.
.PP
.Vb 4
\&    %symbols = $obj->symbols;
\&    foreach $sym (keys %symbols) {
\&        $rev = $symbols{$sym};
\&    }
.Ve
The \fBrevdate\fR method returns the date of a revision.  The returned date format
is the same as the localtime format.  When called as a scalar, it returns the 
system date number.  If called is list context, the list
($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst) is returned.
.PP
.Vb 5
\&    # scalar mode
\&    $scalar_date = $obj->revdate;
\&    print "Scalar date number = $scalar_date\en";
\&    $date_str = localtime($scalar_date);
\&    print "Scalar date string = $date_str\en";
.Ve
.Vb 3
\&    # list mode
\&    @list_date = $obj->revdate;
\&    print "List date = @list_date\en";
.Ve
The \fBdates\fR method returns a hash of revision dates, keyed on revision.  The
hash values are system date numbers.  When called in scalar mode, the method
returns the most recent revision date.
.PP
.Vb 4
\&    # list mode
\&    %DatesHash = obj->dates;
\&    @dates_list = sort {$b<=>$a} values %DatesHash;
\&    $MostRecent = $dates_list[0];
.Ve
.Vb 5
\&    # scalar mode
\&    $most_recent = $obj->dates;
\&    print "Most recent date = $most_recent\en";
\&    $most_recent_str = localtime($most_recent);
\&    print "Most recent date string = $most_recent_str\en";
.Ve
The \fBsymrev\fR method returns the revision against which a specified symbol was
defined. If the symbol was not defined against any version of this file, 0 is
returned.
.PP
.Vb 2
\&    # gets revision that has 'MY_SYMBOL' defined against it
\&    $rev = $obj->symrev('MY_SYMBOL');
.Ve
The \fBdaterev\fR method returns revisions which were created before a specified
date.  Method may take one or six arguments.  If one arguments is passed, then
the argument is a date number.  If six arguments are passed, then they represent
a date string.
.PP
.Vb 3
\&    # one argument, date number
\&    # gets revisions created before Sun Sep  6 22:23:47 1998
\&    @revs = $obj->daterev(841436420);
.Ve
.Vb 3
\&    # six argument
\&    # gets revisions created before 25th June 1998 16:45:30
\&    @revs = $obj->daterev(1998, 6, 25, 16, 45, 30);
.Ve
The \fBcomments\fR method returns a hash of revision comments, keyed on revision.
A key value of 0 returns the description.
.PP
.Vb 3
\&    %comments = $obj->comments;
\&    $description = $comments{0};
\&    $comment_1_3 = $comments{'1.3'};
.Ve
.Sh "\s-1RCS\s0 \s-1SYSTEM\s0 \s-1METHODS\s0"
.IX Subsection "RCS SYSTEM METHODS"
These methods invoke the \s-1RCS\s0 system utilities.
.PP
The \fBci\fR method calls the \s-1RCS\s0 ci program.
.PP
.Vb 2
\&    # check in, and then check out in unlocked state
\&    $obj->ci('-u');
.Ve
The \fBco\fR method calls the \s-1RCS\s0 co program.
.PP
.Vb 2
\&    # check out in locked state
\&    $obj->co('-l');
.Ve
The \fBrcs\fR method calls the \s-1RCS\s0 rcs program.
.PP
.Vb 2
\&    # lock file
\&    $obj->rcs('-l');
.Ve
The \fBrcsdiff\fR method calls the \s-1RCS\s0 rcsdiff program.  When called in
list context, this method returns the outpout of the rcsdiff program.
When called in scalar context, this method returns the return status of
the rcsdiff program.  The return status is 0 for the same, 1 for some
differences, and 2 for error condition.
.PP
When called without parameters, rcsdiff does a diff between the current
working file, and the last revision checked in.
.PP
.Vb 2
\&    # call in list context
\&    @diff_output = $obj->rcsdiff;
.Ve
.Vb 5
\&    # call in scalar context
\&    $changed = $obj->rcsdiff;
\&    if ($changed) {
\&        print "Working file has changed\en";
\&    }
.Ve
Call rcsdiff with parameters to do a diff between any two revisions.
.PP
.Vb 1
\&    @diff_output = $obj->rcsdiff('-r1.2', '-r1.1');
.Ve
The \fBrlog\fR method calls the \s-1RCS\s0 rlog program.  This method returns the
output of the rlog program.
.PP
.Vb 2
\&    # get complete log output
\&    @rlog_complete = $obj->rlog;
.Ve
.Vb 3
\&    # called with '-h' switch outputs only header information
\&    @rlog_header = $obj->rlog('-h');
\&    print @rlog_header;
.Ve
The \fBrcsclean\fR method calls the \s-1RCS\s0 rcsclean program.
.PP
.Vb 2
\&    # remove working file
\&    $obj->rcsclean;
.Ve
.SH "EXAMPLES"
.IX Header "EXAMPLES"
.Sh "\s-1CREATE\s0 \s-1ACCESS\s0 \s-1LIST\s0"
.IX Subsection "CREATE ACCESS LIST"
Using method \fBrcs\fR with the \fB\-a\fR switch allows you to add users to
the access list of an \s-1RCS\s0 archive file.
.PP
.Vb 2
\&    use Rcs;
\&    $obj = Rcs->new;
.Ve
.Vb 3
\&    $obj->rcsdir("./project_tree/archive");
\&    $obj->workdir("./project_tree/src");
\&    $obj->file("cornholio.pl");
.Ve
Methos \fBrcs\fR invokes the \s-1RCS\s0 utility rcs with the same parameters.
.PP
.Vb 2
\&    @users = qw(beavis butthead);
\&    $obj->rcs("-a@users");
.Ve
Calling method \fBaccess\fR returns list of users on access list.
.PP
.Vb 3
\&    $filename = $obj->file;
\&    @access_list = $obj->access;
\&    print "Users @access_list are on the access list of $filename\en";
.Ve
.Sh "\s-1PARSE\s0 \s-1RCS\s0 \s-1ARCHIVE\s0 \s-1FILE\s0"
.IX Subsection "PARSE RCS ARCHIVE FILE"
Set class variables and create '\s-1RCS\s0' object.
Set bin directory where \s-1RCS\s0 programs (e.g. rcs, ci, co) reside.  The
default is '/usr/local/bin'.  This sets the bin directory for all objects.
.PP
.Vb 3
\&    use Rcs;
\&    Rcs->bindir('/usr/bin');
\&    $obj = Rcs->new;
.Ve
Set information regarding \s-1RCS\s0 object.  This information includes name of the
working file, directory of working file ('.' by default), and \s-1RCS\s0 archive
directory ('./RCS' by default).
.PP
.Vb 3
\&    $obj->rcsdir("./project_tree/archive");
\&    $obj->workdir("./project_tree/src");
\&    $obj->file("cornholio.pl");
.Ve
.Vb 5
\&    $head_rev = $obj->head;
\&    $locker = $obj->lock;
\&    $author = $obj->author;
\&    @access = $obj->access;
\&    @revisions = $obj->revisions;
.Ve
.Vb 1
\&    $filename = $obj->file;
.Ve
.Vb 6
\&    if ($locker) {
\&        print "Head revision $head_rev is locked by $locker\en";
\&    }
\&    else {
\&        print "Head revision $head_rev is unlocked\en";
\&    }
.Ve
.Vb 4
\&    if (@access) {
\&        print "\enThe following users are on the access list of file $filename\en";
\&        map { print "User: $_\en"} @access;
\&    }
.Ve
.Vb 4
\&    print "\enList of all revisions of $filename\en";
\&    foreach $rev (@revisions) {
\&        print "Revision: $rev\en";
\&    }
.Ve
.Sh "\s-1CHECK-IN\s0 \s-1FILE\s0"
.IX Subsection "CHECK-IN FILE"
Set class variables and create '\s-1RCS\s0' object.
Set bin directory where \s-1RCS\s0 programs (e.g. rcs, ci, co) reside.  The
default is '/usr/local/bin'.  This sets the bin directory for all objects.
.PP
.Vb 4
\&    use Rcs;
\&    Rcs->bindir('/usr/bin');
\&    Rcs->quiet(0);      # turn off quiet mode
\&    $obj = Rcs->new;
.Ve
Set information regarding \s-1RCS\s0 object.  This information includes name of
working file, directory of working file ('.' by default), and \s-1RCS\s0 archive
directory ('./RCS' by default).
.PP
.Vb 1
\&    $obj->file('cornholio.pl');
.Ve
.Vb 2
\&    # Set RCS archive directory, is './RCS' by default
\&    $obj->rcsdir("./project_tree/archive");
.Ve
.Vb 2
\&    # Set working directory, is '.' by default
\&    $obj->workdir("./project_tree/src");
.Ve
Check in file using \fB\-u\fR switch.  This will check in the file, and will then
check out the file in an unlocked state.  The \fB\-m\fR switch is used to set the
revision comment.
.PP
Command:
.PP
.Vb 1
\&    $obj->ci('-u', '-mRevision Comment');
.Ve
is equivalent to commands:
.PP
.Vb 2
\&    $obj->ci('-mRevision Comment');
\&    $obj->co;
.Ve
.Sh "\s-1CHECK-OUT\s0 \s-1FILE\s0"
.IX Subsection "CHECK-OUT FILE"
Set class variables and create '\s-1RCS\s0' object.
Set bin directory where \s-1RCS\s0 programs (e.g. rcs, ci, co) reside.  The
default is '/usr/local/bin'.  This sets the bin directory for all objects.
.PP
.Vb 4
\&    use Rcs;
\&    Rcs->bindir('/usr/bin');
\&    Rcs->quiet(0);      # turn off quiet mode
\&    $obj = Rcs->new;
.Ve
Set information regarding \s-1RCS\s0 object.  This information includes name of
working file, directory of working file ('.' by default), and \s-1RCS\s0 archive
directory ('./RCS' by default).
.PP
.Vb 1
\&    $obj->file('cornholio.pl');
.Ve
.Vb 2
\&    # Set RCS archive directory, is './RCS' by default
\&    $obj->rcsdir("./project_tree/archive");
.Ve
.Vb 2
\&    # Set working directory, is '.' by default
\&    $obj->workdir("./project_tree/src");
.Ve
Check out file read-only:
.PP
.Vb 1
\&    $obj->co;
.Ve
or check out and lock file:
.PP
.Vb 1
\&    $obj->co('-l');
.Ve
.Sh "\s-1RCSDIFF\s0"
.IX Subsection "RCSDIFF"
Method \fBrcsdiff\fR does an diff between revisions.
.PP
.Vb 2
\&    $obj = Rcs->new;
\&    $obj->bindir('/usr/bin');
.Ve
.Vb 3
\&    $obj->rcsdir("./project_tree/archive");
\&    $obj->workdir("./project_tree/src");
\&    $obj->file("cornholio.pl");
.Ve
.Vb 7
\&    print "Diff of current working file\en";
\&    if ($obj->rcsdiff) {       # scalar context
\&        print $obj->rcsdiff;   # list context
\&    }
\&    else {
\&       print "Versions are Equal\en";
\&    }
.Ve
.Vb 2
\&    print "\en\enDiff of revisions 1.2 and 1.1\en";
\&    print $obj->rcsdiff('-r1.2', '-r1.1');
.Ve
.Sh "\s-1RCSCLEAN\s0"
.IX Subsection "RCSCLEAN"
Method \fBrcsclean\fR will remove an unlocked working file.
.PP
.Vb 4
\&    use Rcs;
\&    Rcs->bindir('/usr/bin');
\&    Rcs->quiet(0);      # turn off quiet mode
\&    $obj = Rcs->new;
.Ve
.Vb 3
\&    $obj->rcsdir("./project_tree/archive");
\&    $obj->workdir("./project_tree/src");
\&    $obj->file("cornholio.pl");
.Ve
.Vb 1
\&    print "Quiet mode NOT set\en" unless Rcs->quiet;
.Ve
.Vb 1
\&    $obj->rcsclean;
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Craig Freter, <\fIcraig@freter.com\fR>
.SH "CONTRIBUTORS"
.IX Header "CONTRIBUTORS"
David Green, <\fIgreendjf@cvhp152.gpt.co.uk\fR>
.PP
Jamie O'Shaughnessy, <\fIjamie@thanatar.demon.co.uk\fR>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (C) 1997,1998 Craig Freter.  All rights reserved.
This program is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
