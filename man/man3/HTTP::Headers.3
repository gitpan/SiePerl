.\" Automatically generated by Pod::Man version 1.15
.\" Mon Apr 23 13:00:31 2001
.\"
.\" Standard preamble:
.\" ======================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R

.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used
.\" to do unbreakable dashes and therefore won't be available.  \*(C` and
.\" \*(C' expand to `' in nroff, nothing in troff, for use with C<>
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr
.\" for titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and
.\" index entries marked with X<> in POD.  Of course, you'll have to process
.\" the output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it
.\" makes way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.bd B 3
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ======================================================================
.\"
.IX Title "HTTP::Headers 3"
.TH HTTP::Headers 3 "libwww-perl-5.51" "1999-10-28" "User Contributed Perl Documentation"
.UC
.SH "NAME"
\&\s-1HTTP:\s0:Headers \- Class encapsulating \s-1HTTP\s0 Message headers
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\& require HTTP::Headers;
\& $h = new HTTP::Headers;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The \f(CW\*(C`HTTP::Headers\*(C'\fR class encapsulates HTTP-style message headers.
The headers consist of attribute-value pairs, which may be repeated,
and which are printed in a particular order.
.PP
Instances of this class are usually created as member variables of the
\&\f(CW\*(C`HTTP::Request\*(C'\fR and \f(CW\*(C`HTTP::Response\*(C'\fR classes, internal to the
library.
.PP
The following methods are available:
.Ip "$h = new \s-1HTTP:\s0:Headers" 4
.IX Item "$h = new HTTP::Headers"
Constructs a new \f(CW\*(C`HTTP::Headers\*(C'\fR object.  You might pass some initial
attribute-value pairs as parameters to the constructor.  \fIE.g.\fR:
.Sp
.Vb 4
\& $h = new HTTP::Headers
\&     Date         => 'Thu, 03 Feb 1994 00:00:00 GMT',
\&     Content_Type => 'text/html; version=3.2',
\&     Content_Base => 'http://www.sn.no/';
.Ve
.Ip "$h->header($field [=> \f(CW$value\fR],...)" 4
.IX Item "$h->header($field [=> $value],...)"
Get or set the value of a header.  The header field name is not case
sensitive.  To make the life easier for perl users who wants to avoid
quoting before the => operator, you can use '_' as a synonym for '\-'
in header names (this behaviour can be suppressed by setting
\&\f(CW$HTTP::Headers::TRANSLATE_UNDERSCORE\fR to a \s-1FALSE\s0 value).
.Sp
The \fIheader()\fR method accepts multiple ($field => \f(CW$value\fR) pairs, so you
can update several fields with a single invocation.
.Sp
The optional \f(CW$value\fR argument may be a scalar or a reference to a list
of scalars. If the \f(CW$value\fR argument is undefined or not given, then the
header is not modified.
.Sp
The old value of the last of the \f(CW$field\fR values is returned.
Multi-valued fields will be concatenated with \*(L",\*(R" as separator in
scalar context.
.Sp
.Vb 5
\& $header->header(MIME_Version => '1.0',
\&                 User_Agent   => 'My-Web-Client/0.01');
\& $header->header(Accept => "text/html, text/plain, image/*");
\& $header->header(Accept => [qw(text/html text/plain image/*)]);
\& @accepts = $header->header('Accept');
.Ve
.Ip "$h->scan(\e&doit)" 4
.IX Item "$h->scan(&doit)"
Apply a subroutine to each header in turn.  The callback routine is
called with two parameters; the name of the field and a single value.
If the header has more than one value, then the routine is called once
for each value.  The field name passed to the callback routine has
case as suggested by \s-1HTTP\s0 Spec, and the headers will be visited in the
recommended \*(L"Good Practice\*(R" order.
.Ip "$h->as_string([$endl])" 4
.IX Item "$h->as_string([$endl])"
Return the header fields as a formatted \s-1MIME\s0 header.  Since it
internally uses the \f(CW\*(C`scan()\*(C'\fR method to build the string, the result
will use case as suggested by \s-1HTTP\s0 Spec, and it will follow
recommended \*(L"Good Practice\*(R" of ordering the header fieds.  Long header
values are not folded. 
.Sp
The optional parameter specifies the line ending sequence to use.  The
default is \f(CW\*(C`"\en"\*(C'\fR.  Embedded \*(L"\en\*(R" characters in the header will be
substitued with this line ending sequence.
.Ip "$h->push_header($field, \f(CW$val\fR)" 4
.IX Item "$h->push_header($field, $val)"
Add a new field value of the specified header.  The header field name
is not case sensitive.  The field need not already have a
value. Previous values for the same field are retained.  The argument
may be a scalar or a reference to a list of scalars.
.Sp
.Vb 1
\& $header->push_header(Accept => 'image/jpeg');
.Ve
.Ip "$h->remove_header($field,...)" 4
.IX Item "$h->remove_header($field,...)"
This function removes the headers with the specified names.
.Ip "$h->clone" 4
.IX Item "$h->clone"
Returns a copy of this \s-1HTTP:\s0:Headers object.
.SH "CONVENIENCE METHODS"
.IX Header "CONVENIENCE METHODS"
The most frequently used headers can also be accessed through the
following convenience methods.  These methods can both be used to read
and to set the value of a header.  The header value is set if you pass
an argument to the method.  The old header value is always returned.
.PP
Methods that deal with dates/times always convert their value to system
time (seconds since Jan 1, 1970) and they also expect this kind of
value when the header value is set.
.Ip "$h->date" 4
.IX Item "$h->date"
This header represents the date and time at which the message was
originated. \fIE.g.\fR:
.Sp
.Vb 1
\&  $h->date(time);  # set current date
.Ve
.Ip "$h->expires" 4
.IX Item "$h->expires"
This header gives the date and time after which the entity should be
considered stale.
.Ip "$h->if_modified_since" 4
.IX Item "$h->if_modified_since"
.PD 0
.Ip "$h->if_unmodified_since" 4
.IX Item "$h->if_unmodified_since"
.PD
This header is used to make a request conditional.  If the requested
resource has (not) been modified since the time specified in this field,
then the server will return a \f(CW\*(C`"304 Not Modified"\*(C'\fR response instead of
the document itself.
.Ip "$h->last_modified" 4
.IX Item "$h->last_modified"
This header indicates the date and time at which the resource was last
modified. \fIE.g.\fR:
.Sp
.Vb 4
\&  # check if document is more than 1 hour old
\&  if ($h->last_modified < time - 60*60) {
\&        ...
\&  }
.Ve
.Ip "$h->content_type" 4
.IX Item "$h->content_type"
The Content-Type header field indicates the media type of the message
content. \fIE.g.\fR:
.Sp
.Vb 1
\&  $h->content_type('text/html');
.Ve
The value returned will be converted to lower case, and potential
parameters will be chopped off and returned as a separate value if in
an array context.  This makes it safe to do the following:
.Sp
.Vb 5
\&  if ($h->content_type eq 'text/html') {
\&     # we enter this place even if the real header value happens to
\&     # be 'TEXT/HTML; version=3.0'
\&     ...
\&  }
.Ve
.Ip "$h->content_encoding" 4
.IX Item "$h->content_encoding"
The Content-Encoding header field is used as a modifier to the
media type.  When present, its value indicates what additional
encoding mechanism has been applied to the resource.
.Ip "$h->content_length" 4
.IX Item "$h->content_length"
A decimal number indicating the size in bytes of the message content.
.Ip "$h->content_language" 4
.IX Item "$h->content_language"
The natural \fIlanguage\fR\|(s) of the intended audience for the message
content.  The value is one or more language tags as defined by \s-1RFC\s0
1766.  Eg. \*(L"no\*(R" for Norwegian and \*(L"en-US\*(R" for US-English.
.Ip "$h->title" 4
.IX Item "$h->title"
The title of the document.  In libwww-perl this header will be
initialized automatically from the <\s-1TITLE\s0>...</TITLE> element
of \s-1HTML\s0 documents.  \fIThis header is no longer part of the \s-1HTTP\s0
standard.\fR
.Ip "$h->user_agent" 4
.IX Item "$h->user_agent"
This header field is used in request messages and contains information
about the user agent originating the request.  \fIE.g.\fR:
.Sp
.Vb 1
\&  $h->user_agent('Mozilla/1.2');
.Ve
.Ip "$h->server" 4
.IX Item "$h->server"
The server header field contains information about the software being
used by the originating server program handling the request.
.Ip "$h->from" 4
.IX Item "$h->from"
This header should contain an Internet e-mail address for the human
user who controls the requesting user agent.  The address should be
machine-usable, as defined by \s-1RFC822\s0.  E.g.:
.Sp
.Vb 1
\&  $h->from('Gisle Aas <aas@sn.no>');
.Ve
.Ip "$h->referer" 4
.IX Item "$h->referer"
Used to specify the address (\s-1URI\s0) of the document from which the
requested resouce address was obtained.
.Ip "$h->www_authenticate" 4
.IX Item "$h->www_authenticate"
This header must be included as part of a \*(L"401 Unauthorized\*(R" response.
The field value consist of a challenge that indicates the
authentication scheme and parameters applicable to the requested \s-1URI\s0.
.Ip "$h->proxy_authenticate" 4
.IX Item "$h->proxy_authenticate"
This header must be included in a \*(L"407 Proxy Authentication Required\*(R"
response.
.Ip "$h->authorization" 4
.IX Item "$h->authorization"
.PD 0
.Ip "$h->proxy_authorization" 4
.IX Item "$h->proxy_authorization"
.PD
A user agent that wishes to authenticate itself with a server or a
proxy, may do so by including these headers.
.Ip "$h->authorization_basic" 4
.IX Item "$h->authorization_basic"
This method is used to get or set an authorization header that use the
\&\*(L"Basic Authentication Scheme\*(R".  In array context it will return two
values; the user name and the password.  In scalar context it will
return \fI\*(L"uname:password\*(R"\fR as a single string value.
.Sp
When used to set the header value, it expects two arguments.  \fIE.g.\fR:
.Sp
.Vb 1
\&  $h->authorization_basic($uname, $password);
.Ve
The method will croak if the \f(CW$uname\fR contains a colon ':'.
.Ip "$h->proxy_authorization_basic" 4
.IX Item "$h->proxy_authorization_basic"
Same as \fIauthorization_basic()\fR but will set the \*(L"Proxy-Authorization\*(R"
header instead.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright 1995\-1998 Gisle Aas.
.PP
This library is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
