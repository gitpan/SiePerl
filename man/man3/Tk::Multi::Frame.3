.\" Automatically generated by Pod::Man version 1.15
.\" Fri Apr 20 15:51:04 2001
.\"
.\" Standard preamble:
.\" ======================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R

.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used
.\" to do unbreakable dashes and therefore won't be available.  \*(C` and
.\" \*(C' expand to `' in nroff, nothing in troff, for use with C<>
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr
.\" for titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and
.\" index entries marked with X<> in POD.  Of course, you'll have to process
.\" the output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it
.\" makes way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.bd B 3
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ======================================================================
.\"
.IX Title "Multi::Frame 3"
.TH Multi::Frame 3 "perl v5.6.1" "1999-04-06" "User Contributed Perl Documentation"
.UC
.SH "NAME"
Tk::Multi::Frame \- Tk composite widget with a scroll window and more
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& use Tk::Multi::Manager;
.Ve
.Vb 1
\& use Tk::Multi::Frame ;
.Ve
.Vb 6
\& my $manager = yourWindow -> MultiManager 
\&  (
\&   menu => $menu_ref , # optionnal
\&   printSub => $sub_ref ,  # optionnal
\&   title => "windows" # optionnal
\&  ) -> pack ();
.Ve
.Vb 2
\& # Don't pack it, the manager will do it
\& my $w1 = $manager -> newSlave('type' => 'MultiFrame', 'title' => 'a_label');
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This composite widget features :
.Ip "\(bu" 4
a scrollable Frame
.Ip "\(bu" 4
A print button (if the printSub parameter was provided)
.Sp
(The shell print command may be modified by setting 
\&\f(CW$Tk::Multi::Frame::printCmd\fR to the appropriate shell command. By default, 
it is set to 'lp \-opostscript') 
.PP
This widget will forward all unrecognize commands to the Frame object.
.PP
Note that this widget should be created only by the Multi::Manager. 
.SH "WIDGET-SPECIFIC OPTIONS"
.IX Header "WIDGET-SPECIFIC OPTIONS"
.Sh "title"
.IX Subsection "title"
The frame title (See the Tk::TFrame manpage)
.Sh "menu_button"
.IX Subsection "menu_button"
The log window feature a set of menu items which must be added in a menu.
This menu ref must be passed with the menu_button prameter 
to the object during its instaciation
.Sh "printSub"
.IX Subsection "printSub"
By itself, a frame cannot be printed. So if the user wants to print
some informations related to what's packed inside the frame, he must
provide a sub ref which will return a string. This string will be
printed as is by the widget.
.SH "WIDGET-SPECIFIC METHODS"
.IX Header "WIDGET-SPECIFIC METHODS"
.Sh "print"
.IX Subsection "print"
Will raise a popup window with an Entry to modify the actual print command,
a print button, a default button (to restore the default print command),
and a cancel button.
.Sh "doPrint"
.IX Subsection "doPrint"
Print the label and the content of the text window. The print is invoked
by dumping the text content into a piped command.
.PP
You may want to set up a new command to print correctly on your machine.
You may do it by using the setPrintCmd method or by invoking the 
\&'print' method.
.Sh "setPrintCmd('print command')"
.IX Subsection "setPrintCmd('print command')"
Will set the \f(CW$printCmd\fR class variable to the passed string. You may use this
method to set the appropriate print command on your machine. Note that 
using this method will affect all other Tk::Multi::Frame object since the
modified variable is not an instance variable but a class variable.
.Sh "clear"
.IX Subsection "clear"
clear all items in the canvas.
.SH "Delegated methods"
.IX Header "Delegated methods"
By default all widget method are delegated to the TFrame widget. Excepted :
.Sh "command(\-label => 'some text', \-command => sub {...} )"
.IX Subsection "command(-label => 'some text', -command => sub {...} )"
Delegated to the menu entry managed by Multi::Manager. Will add a new command
to the aforementionned menu.
.SH "TO DO"
.IX Header "TO DO"
I'm not really satisfied with print management. May be one day, I'll write a 
print management composite widget which will look like Netscape's print 
window. But that's quite low on my priority list. Any volunteer ?
.PP
Dragging middle mouse button to scroll the canvas.
.PP
Defines ressources for the config options.
.SH "AUTHOR"
.IX Header "AUTHOR"
Dominique Dumont, Dominique_Dumont@grenoble.hp.com
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIperl\fR\|(1), \fITk\fR\|(3), \fITk::Multi\fR\|(3), \fITk::Multi::Manager\fR\|(3)
