.\" Automatically generated by Pod::Man version 1.15
.\" Mon Apr 23 14:08:19 2001
.\"
.\" Standard preamble:
.\" ======================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R

.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used
.\" to do unbreakable dashes and therefore won't be available.  \*(C` and
.\" \*(C' expand to `' in nroff, nothing in troff, for use with C<>
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr
.\" for titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and
.\" index entries marked with X<> in POD.  Of course, you'll have to process
.\" the output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it
.\" makes way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.bd B 3
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ======================================================================
.\"
.IX Title "XPath 3"
.TH XPath 3 "perl v5.6.1" "2001-03-16" "User Contributed Perl Documentation"
.UC
.SH "NAME"
\&\s-1XML:\s0:XPath \- a set of modules for parsing and evaluating XPath statements
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module aims to comply exactly to the XPath specification at
http://www.w3.org/TR/xpath and yet allow extensions to be added in the
form of functions. Modules such as \s-1XSLT\s0 and XPointer may need to do
this as they support functionality beyond XPath.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    use XML::XPath;
\&    use XML::XPath::XMLParser;
.Ve
.Vb 1
\&    my $xp = XML::XPath->new(filename => 'test.xhtml');
.Ve
.Vb 1
\&    my $nodeset = $xp->find('/html/body/p'); # find all paragraphs
.Ve
.Vb 5
\&    foreach my $node ($nodeset->get_nodelist) {
\&        print "FOUND\en\en", 
\&            XML::XPath::XMLParser::as_string($node),
\&            "\en\en";
\&    }
.Ve
.SH "DETAILS"
.IX Header "DETAILS"
There's an awful lot to all of this, so bear with it \- if you stick it
out it should be worth it. Please get a good understanding of XPath
by reading the spec before asking me questions. All of the classes
and parts herein are named to be synonimous with the names in the
specification, so consult that if you don't understand why I'm doing
something in the code.
.SH "API"
.IX Header "API"
The \s-1API\s0 of \s-1XML:\s0:XPath itself is extremely simple to allow you to get
going almost immediately. The deeper \s-1API\s0's are more complex, but you
shouldn't have to touch most of that.
.Sh "\fInew()\fP"
.IX Subsection "new()"
This constructor follows the often seen named parameter method call.
Parameters you can use are: filename, parser, xml, ioref and context.
The filename parameter specifies an \s-1XML\s0 file to parse. The xml
parameter specifies a string to parse, and the ioref parameter
specifies an ioref to parse. The context option allows you to 
specify a context node. The context node has to be in the format 
of a node as specified in the XML::XPath::XMLParser manpage. The 4 parameters
filename, xml, ioref and context are mutually exclusive \- you should
only specify one (if you specify anything other than context, the
context node is the root of your document).
The parser option allows you to pass in an already prepared 
\&\s-1XML:\s0:Parser object, to save you having to create more than one
in your application (if, for example, you're doing more than just XPath).
.PP
.Vb 1
\&    my $xp = XML::XPath->new( context => $node );
.Ve
It is very much recommended that you use only 1 XPath object throughout 
the life of your application. This is because the object (and it's sub-objects)
maintain certain bits of state information that will be useful (such
as XPath variables) to later calls to \fIfind()\fR. It's also a good idea because
you'll use less memory this way.
.Sh "\fInodeset\fP = find($path, [$context])"
.IX Subsection "nodeset = find($path, [$context])"
The find function takes an XPath expression (a string) and returns either an
\&\s-1XML:\s0:XPath::NodeSet object containing the nodes it found (or empty if
no nodes matched the path), or one of \s-1XML:\s0:XPath::Literal (a string),
\&\s-1XML:\s0:XPath::Number, or \s-1XML:\s0:XPath::Boolean. It should always return 
something \- and you can use \->\fIisa()\fR to find out what it returned. If you
need to check how many nodes it found you should check \f(CW$nodeset\fR->size.
See the XML::XPath::NodeSet manpage. An optional second parameter of a context
node allows you to use this method repeatedly, for example \s-1XSLT\s0 needs
to do this.
.Sh "findnodes($path, [$context])"
.IX Subsection "findnodes($path, [$context])"
Returns a list of nodes found by \f(CW$path\fR, optionally in context \f(CW$context\fR. 
In scalar context returns an \s-1XML:\s0:XPath::NodeSet object.
.Sh "findnodes_as_string($path, [$context])"
.IX Subsection "findnodes_as_string($path, [$context])"
Returns the nodes found reproduced as \s-1XML\s0. The result is not guaranteed
to be valid \s-1XML\s0 though.
.Sh "findvalue($path, [$context])"
.IX Subsection "findvalue($path, [$context])"
Returns either a \f(CW\*(C`XML::XPath::Literal\*(C'\fR, a \f(CW\*(C`XML::XPath::Boolean\*(C'\fR or a
\&\f(CW\*(C`XML::XPath::Number\*(C'\fR object. If the path returns a NodeSet,
\&\f(CW$nodeset\fR->to_literal is called automatically for you (and thus a
\&\f(CW\*(C`XML::XPath::Literal\*(C'\fR is returned). Note that
for each of the objects stringification is overloaded, so you can just
print the value found, or manipulate it in the ways you would a normal
perl value (e.g. using regular expressions).
.Sh "matches($node, \f(CW$path\fP, [$context])"
.IX Subsection "matches($node, $path, [$context])"
Returns true if the node matches the path (optionally in context \f(CW$context\fR).
.Sh "set_namespace($prefix, \f(CW$uri\fP)"
.IX Subsection "set_namespace($prefix, $uri)"
Sets the namespace prefix mapping to the uri.
.PP
Normally in \s-1XML:\s0:XPath the prefixes in XPath node tests take their
context from the current node. This means that foo:bar will always
match an element <foo:bar> regardless of the namespace that the prefix
foo is mapped to (which might even change within the document, resulting
in unexpected results). In order to make prefixes in XPath node tests
actually map to a real \s-1URI\s0, you need to enable that via a call
to the set_namespace method of your \s-1XML:\s0:XPath object.
.Sh "\fIclear_namespaces()\fP"
.IX Subsection "clear_namespaces()"
Clears all previously set namespace mappings.
.Sh "$XML::XPath::Namespaces"
.IX Subsection "$XML::XPath::Namespaces"
Set this to 0 if you \fIdon't\fR want namespace processing to occur. This
will make everything a little (tiny) bit faster, but you'll suffer for it,
probably.
.SH "Node Object Model"
.IX Header "Node Object Model"
See the XML::XPath::Node manpage, the XML::XPath::Node::Element manpage, 
the XML::XPath::Node::Text manpage, the XML::XPath::Node::Comment manpage,
the XML::XPath::Node::Attribute manpage, the XML::XPath::Node::Namespace manpage,
and the XML::XPath::Node::PI manpage.
.SH "On Garbage Collection"
.IX Header "On Garbage Collection"
XPath nodes work in a special way that allows circular references, and 
yet still lets Perl's reference counting garbage collector to clean up
the nodes after use. This should be totally transparent to the user,
with one caveat: \fBIf you free your tree before letting go of a sub-tree,
consider that playing with fire and you may get burned\fR. What does this
mean to the average user? Not much. Provided you don't free (or let go
out of scope) either the tree you passed to \s-1XML:\s0:XPath->new, or if you
didn't pass a tree, and passed a filename or IO-ref, then provided you
don't let the \s-1XML:\s0:XPath object go out of scope before you let results
of \fIfind()\fR and its friends go out of scope, then you'll be fine. Even if
you \fBdo\fR let the tree go out of scope before results, you'll probably
still be fine. The only case where you may get stung is when the last
part of your path/query is either an ancestor or parent axis. In that
case the worst that will happen is you'll end up with a circular reference
that won't get cleared until interpreter destruction time. You can get
around that by explicitly calling \f(CW$node\fR->\s-1DESTROY\s0 on each of your result
nodes, if you really need to do that.
.PP
Mail me direct if that's not clear. Note that it's not doom and gloom. It's
by no means perfect, but the worst that will happen is a long running process
could leak memory. Most long running processes will therefore be able to
explicitly be careful not to free the tree (or \s-1XML:\s0:XPath object) before
freeing results. AxKit, an application that uses \s-1XML:\s0:XPath, does this and
I didn't have to make any changes to the code \- it's already sensible
programming.
.PP
If you \fIreally\fR don't want all this to happen, then set the variable
\&\f(CW$XML::XPath::SafeMode\fR, and call \f(CW$xp\fR->\fIcleanup()\fR on the \s-1XML:\s0:XPath object
when you're finished, or \f(CW$tree\fR->\fIdispose()\fR if you have a tree instead.
.SH "Example"
.IX Header "Example"
Please see the test files in t/ for examples on how to use XPath.
.SH "Support/Author"
.IX Header "Support/Author"
This module is copyright 2000 AxKit.com Ltd. This is free
software, and as such comes with \s-1NO\s0 \s-1WARRANTY\s0. No dates are used in this
module. You may distribute this module under the terms of either the
Gnu \s-1GPL\s0,  or the Artistic License (the same terms as Perl itself).
.PP
For support, please subscribe to the Perl-XML mailing list at the \s-1URL\s0 
http://listserv.activestate.com/mailman/listinfo/perl-xml
.PP
Matt Sergeant, matt@sergeant.org
.SH "SEE ALSO"
.IX Header "SEE ALSO"
the XML::XPath::Literal manpage, the XML::XPath::Boolean manpage, the XML::XPath::Number manpage,
the XML::XPath::XMLParser manpage, the XML::XPath::NodeSet manpage, the XML::XPath::PerlSAX manpage,
the XML::XPath::Builder manpage.
