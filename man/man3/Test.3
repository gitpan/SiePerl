.\" Automatically generated by Pod::Man version 1.15
.\" Fri Apr 20 13:06:56 2001
.\"
.\" Standard preamble:
.\" ======================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R

.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used
.\" to do unbreakable dashes and therefore won't be available.  \*(C` and
.\" \*(C' expand to `' in nroff, nothing in troff, for use with C<>
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr
.\" for titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and
.\" index entries marked with X<> in POD.  Of course, you'll have to process
.\" the output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it
.\" makes way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.bd B 3
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ======================================================================
.\"
.IX Title "Test 3"
.TH Test 3 "perl v5.6.1" "2001-02-23" "Perl Programmers Reference Guide"
.UC
.SH "NAME"
.Vb 1
\&  Test - provides a simple framework for writing test scripts
.Ve
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&  use strict;
\&  use Test;
.Ve
.Vb 2
\&  # use a BEGIN block so we print our plan before MyModule is loaded
\&  BEGIN { plan tests => 14, todo => [3,4] }
.Ve
.Vb 2
\&  # load your module...
\&  use MyModule;
.Ve
.Vb 2
\&  ok(0); # failure
\&  ok(1); # success
.Ve
.Vb 2
\&  ok(0); # ok, expected failure (see todo list, above)
\&  ok(1); # surprise success!
.Ve
.Vb 4
\&  ok(0,1);             # failure: '0' ne '1'
\&  ok('broke','fixed'); # failure: 'broke' ne 'fixed'
\&  ok('fixed','fixed'); # success: 'fixed' eq 'fixed'
\&  ok('fixed',qr/x/);   # success: 'fixed' =~ qr/x/
.Ve
.Vb 3
\&  ok(sub { 1+1 }, 2);  # success: '2' eq '2'
\&  ok(sub { 1+1 }, 3);  # failure: '2' ne '3'
\&  ok(0, int(rand(2));  # (just kidding :-)
.Ve
.Vb 3
\&  my @list = (0,0);
\&  ok @list, 3, "\e@list=".join(',',@list);      #extra diagnostics
\&  ok 'segmentation fault', '/(?i)success/';    #regex match
.Ve
.Vb 1
\&  skip($feature_is_missing, ...);    #do platform specific test
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Test::Harness expects to see particular output when it
executes tests.  This module aims to make writing proper test scripts just
a little bit easier (and less error prone :\-).
.SH "TEST TYPES"
.IX Header "TEST TYPES"
.Ip "\(bu \s-1NORMAL\s0 \s-1TESTS\s0" 4
.IX Item "NORMAL TESTS"
These tests are expected to succeed.  If they don't something's
screwed up!
.Ip "\(bu \s-1SKIPPED\s0 \s-1TESTS\s0" 4
.IX Item "SKIPPED TESTS"
Skip is for tests that might or might not be possible to run depending
on the availability of platform specific features.  The first argument
should evaluate to true (think \*(L"yes, please skip\*(R") if the required
feature is not available.  After the first argument, skip works
exactly the same way as do normal tests.
.Ip "\(bu \s-1TODO\s0 \s-1TESTS\s0" 4
.IX Item "TODO TESTS"
\&\s-1TODO\s0 tests are designed for maintaining an \fBexecutable \s-1TODO\s0 list\fR.
These tests are expected \s-1NOT\s0 to succeed.  If a \s-1TODO\s0 test does succeed,
the feature in question should not be on the \s-1TODO\s0 list, now should it?
.Sp
Packages should \s-1NOT\s0 be released with succeeding \s-1TODO\s0 tests.  As soon
as a \s-1TODO\s0 test starts working, it should be promoted to a normal test
and the newly working feature should be documented in the release
notes or change log.
.SH "RETURN VALUE"
.IX Header "RETURN VALUE"
Both \f(CW\*(C`ok\*(C'\fR and \f(CW\*(C`skip\*(C'\fR return true if their test succeeds and false
otherwise in a scalar context.
.SH "ONFAIL"
.IX Header "ONFAIL"
.Vb 1
\&  BEGIN { plan test => 4, onfail => sub { warn "CALL 911!" } }
.Ve
While test failures should be enough, extra diagnostics can be
triggered at the end of a test run.  \f(CW\*(C`onfail\*(C'\fR is passed an array ref
of hash refs that describe each test failure.  Each hash will contain
at least the following fields: \f(CW\*(C`package\*(C'\fR, \f(CW\*(C`repetition\*(C'\fR, and
\&\f(CW\*(C`result\*(C'\fR.  (The file, line, and test number are not included because
their correspondence to a particular test is tenuous.)  If the test
had an expected value or a diagnostic string, these will also be
included.
.PP
The \fBoptional\fR \f(CW\*(C`onfail\*(C'\fR hook might be used simply to print out the
version of your package and/or how to report problems.  It might also
be used to generate extremely sophisticated diagnostics for a
particularly bizarre test failure.  However it's not a panacea.  Core
dumps or other unrecoverable errors prevent the \f(CW\*(C`onfail\*(C'\fR hook from
running.  (It is run inside an \f(CW\*(C`END\*(C'\fR block.)  Besides, \f(CW\*(C`onfail\*(C'\fR is
probably over-kill in most cases.  (Your test code should be simpler
than the code it is testing, yes?)
.SH "SEE ALSO"
.IX Header "SEE ALSO"
the Test::Harness manpage and, perhaps, test coverage analysis tools.
.SH "AUTHOR"
.IX Header "AUTHOR"
Copyright (c) 1998\-1999 Joshua Nathaniel Pritikin.  All rights reserved.
.PP
This package is free software and is provided \*(L"as is\*(R" without express
or implied warranty.  It may be used, redistributed and/or modified
under the terms of the Perl Artistic License (see
http://www.perl.com/perl/misc/Artistic.html)
