.\" Automatically generated by Pod::Man version 1.15
.\" Fri Apr 20 13:08:47 2001
.\"
.\" Standard preamble:
.\" ======================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R

.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used
.\" to do unbreakable dashes and therefore won't be available.  \*(C` and
.\" \*(C' expand to `' in nroff, nothing in troff, for use with C<>
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr
.\" for titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and
.\" index entries marked with X<> in POD.  Of course, you'll have to process
.\" the output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it
.\" makes way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.bd B 3
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ======================================================================
.\"
.IX Title "IO::Socket 3"
.TH IO::Socket 3 "perl v5.6.1" "2001-03-03" "Perl Programmers Reference Guide"
.UC
.SH "NAME"
\&\s-1IO:\s0:Socket \- Object interface to socket communications
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use IO::Socket;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\f(CW\*(C`IO::Socket\*(C'\fR provides an object interface to creating and using sockets. It
is built upon the the IO::Handle manpage interface and inherits all the methods defined
by the IO::Handle manpage.
.PP
\&\f(CW\*(C`IO::Socket\*(C'\fR only defines methods for those operations which are common to all
types of socket. Operations which are specified to a socket in a particular 
domain have methods defined in sub classes of \f(CW\*(C`IO::Socket\*(C'\fR
.PP
\&\f(CW\*(C`IO::Socket\*(C'\fR will export all functions (and constants) defined by the Socket manpage.
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
.RS 0
.RE
.Ip "new ( [\s-1ARGS\s0] )" 4
.IX Item "new ( [ARGS] )"
Creates an \f(CW\*(C`IO::Socket\*(C'\fR, which is a reference to a
newly created symbol (see the \f(CW\*(C`Symbol\*(C'\fR package). \f(CW\*(C`new\*(C'\fR
optionally takes arguments, these arguments are in key-value pairs.
\&\f(CW\*(C`new\*(C'\fR only looks for one key \f(CW\*(C`Domain\*(C'\fR which tells new which domain
the socket will be in. All other arguments will be passed to the
configuration method of the package for that domain, See below.
.Sp
.Vb 1
\& NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE
.Ve
As of \s-1VERSION\s0 1.18 all \s-1IO:\s0:Socket objects have autoflush turned on
by default. This was not the case with earlier releases.
.Sp
.Vb 1
\& NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE
.Ve
.RE
.RS 0
.SH "METHODS"
.IX Header "METHODS"
See the perlfunc manpage for complete descriptions of each of the following
supported \f(CW\*(C`IO::Socket\*(C'\fR methods, which are just front ends for the
corresponding built-in functions:
.PP
.Vb 10
\&    socket
\&    socketpair
\&    bind
\&    listen
\&    accept
\&    send
\&    recv
\&    peername (getpeername)
\&    sockname (getsockname)
\&    shutdown
.Ve
Some methods take slightly different arguments to those defined in the perlfunc manpage
in attempt to make the interface more flexible. These are
.RS 0
.RE
.Ip "accept([\s-1PKG\s0])" 4
.IX Item "accept([PKG])"
perform the system call \f(CW\*(C`accept\*(C'\fR on the socket and return a new object. The
new object will be created in the same class as the listen socket, unless
\&\f(CW\*(C`PKG\*(C'\fR is specified. This object can be used to communicate with the client
that was trying to connect. In a scalar context the new socket is returned,
or undef upon failure. In a list context a two-element array is returned
containing the new socket and the peer address; the list will
be empty upon failure.
.Ip "socketpair(\s-1DOMAIN\s0, \s-1TYPE\s0, \s-1PROTOCOL\s0)" 4
.IX Item "socketpair(DOMAIN, TYPE, PROTOCOL)"
Call \f(CW\*(C`socketpair\*(C'\fR and return a list of two sockets created, or an
empty list on failure.
.RE
.RS 0
.PP
Additional methods that are provided are:
.RS 0
.RE
.Ip "timeout([\s-1VAL\s0])" 4
.IX Item "timeout([VAL])"
Set or get the timeout value associated with this socket. If called without
any arguments then the current setting is returned. If called with an argument
the current setting is changed and the previous value returned.
.Ip "sockopt(\s-1OPT\s0 [, \s-1VAL\s0])" 4
.IX Item "sockopt(OPT [, VAL])"
Unified method to both set and get options in the \s-1SOL_SOCKET\s0 level. If called
with one argument then getsockopt is called, otherwise setsockopt is called.
.Ip "sockdomain" 4
.IX Item "sockdomain"
Returns the numerical number for the socket domain type. For example, for
a \s-1AF_INET\s0 socket the value of &AF_INET will be returned.
.Ip "socktype" 4
.IX Item "socktype"
Returns the numerical number for the socket type. For example, for
a \s-1SOCK_STREAM\s0 socket the value of &SOCK_STREAM will be returned.
.Ip "protocol" 4
.IX Item "protocol"
Returns the numerical number for the protocol being used on the socket, if
known. If the protocol is unknown, as with an \s-1AF_UNIX\s0 socket, zero
is returned.
.Ip "connected" 4
.IX Item "connected"
If the socket is in a connected state the the peer address is returned.
If the socket is not in a connected state then undef will be returned.
.RE
.RS 0
.SH "SEE ALSO"
.IX Header "SEE ALSO"
the Socket manpage, the IO::Handle manpage, the IO::Socket::INET manpage, the IO::Socket::UNIX manpage
.SH "AUTHOR"
.IX Header "AUTHOR"
Graham Barr. Currently maintained by the Perl Porters.  Please report all
bugs to <perl5\-porters@perl.org>.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 1997\-8 Graham Barr <gbarr@pobox.com>. All rights reserved.
This program is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
