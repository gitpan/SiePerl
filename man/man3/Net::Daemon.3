.\" Automatically generated by Pod::Man version 1.15
.\" Mon Apr 23 12:53:07 2001
.\"
.\" Standard preamble:
.\" ======================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R

.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used
.\" to do unbreakable dashes and therefore won't be available.  \*(C` and
.\" \*(C' expand to `' in nroff, nothing in troff, for use with C<>
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr
.\" for titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and
.\" index entries marked with X<> in POD.  Of course, you'll have to process
.\" the output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it
.\" makes way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.bd B 3
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ======================================================================
.\"
.IX Title "Net::Daemon 3"
.TH Net::Daemon 3 "perl v5.6.1" "2000-12-22" "User Contributed Perl Documentation"
.UC
.SH "NAME"
Net::Daemon \- Perl extension for portable daemons
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 4
\&  # Create a subclass of Net::Daemon
\&  require Net::Daemon;
\&  package MyDaemon;
\&  @MyDaemon::ISA = qw(Net::Daemon);
.Ve
.Vb 4
\&  sub Run ($) {
\&    # This function does the real work; it is invoked whenever a
\&    # new connection is made.
\&  }
.Ve
.SH "WARNING"
.IX Header "WARNING"
\&\s-1THIS\s0 \s-1IS\s0 \s-1ALPHA\s0 \s-1SOFTWARE\s0. It is *only* 'Alpha' because the interface (\s-1API\s0)
is not finalised. The Alpha status does not reflect code quality or
stability.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Net::Daemon is an abstract base class for implementing portable server
applications in a very simple way. The module is designed for Perl 5.005
and threads, but can work with \fIfork()\fR and Perl 5.004.
.PP
The Net::Daemon class offers methods for the most common tasks a daemon
needs: Starting up, logging, accepting clients, authorization, restricting
its own environment for security and doing the true work. You only have to
override those methods that aren't appropriate for you, but typically
inheriting will safe you a lot of work anyways.
.Sh "Constructors"
.IX Subsection "Constructors"
.Vb 1
\&  $server = Net::Daemon->new($attr, $options);
.Ve
.Vb 1
\&  $connection = $server->Clone($socket);
.Ve
Two constructors are available: The \fBnew\fR method is called upon startup
and creates an object that will basically act as an anchor over the
complete program. It supports command line parsing via the Getopt::Long (3) entry elsewhere in this document.
.PP
Arguments of \fBnew\fR are \fI$attr\fR, an hash ref of attributes (see below)
and \fI$options\fR an array ref of options, typically command line arguments
(for example \fB\e@ARGV\fR) that will be passed to \fBGetopt::Long::GetOptions\fR.
.PP
The second constructor is \fBClone\fR: It is called whenever a client
connects. It receives the main server object as input and returns a
new object. This new object will be passed to the methods that finally
do the true work of communicating with the client. Communication occurs
over the socket \fB$socket\fR, \fBClone\fR's argument.
.PP
Possible object attributes and the corresponding command line
arguments are:
.Ip "\fIcatchint\fR (\fB\*(--nocatchint\fR)" 4
.IX Item "catchint (nocatchint)"
On some systems, in particular Solaris, the functions \fIaccept()\fR,
\&\fIread()\fR and so on are not safe against interrupts by signals. For
example, if the user raises a \s-1USR1\s0 signal (as typically used to
reread config files), then the function returns an error \s-1EINTR\s0.
If the \fIcatchint\fR option is on (by default it is, use
\&\fB\*(--nocatchint\fR to turn this off), then the package will ignore
\&\s-1EINTR\s0 errors whereever possible.
.Ip "\fIchroot\fR (\fB\*(--chroot=dir\fR)" 4
.IX Item "chroot (chroot=dir)"
(\s-1UNIX\s0 only)  After doing a \fIbind()\fR, change root directory to the given
directory by doing a \fIchroot()\fR. This is usefull for security operations,
but it restricts programming a lot. For example, you typically have to
load external Perl extensions before doing a \fIchroot()\fR, or you need to
create hard links to Unix sockets. This is typically done in the config
file, see the \-\-configfile option. See also the \-\-group and \-\-user
options.
.Sp
If you don't know \fIchroot()\fR, think of an \s-1FTP\s0 server where you can see a
certain directory tree only after logging in.
.Ip "\fIclients\fR" 4
.IX Item "clients"
An array ref with a list of clients. Clients are hash refs, the attributes
\&\fIaccept\fR (0 for denying access and 1 for permitting) and \fImask\fR, a Perl
regular expression for the clients \s-1IP\s0 number or its host name. See
the section on "Access control" below.
.Ip "\fIconfigfile\fR (\fB\*(--configfile=file\fR)" 4
.IX Item "configfile (configfile=file)"
Net::Daemon supports the use of config files. These files are assumed
to contain a single hash ref that overrides the arguments of the new
method. However, command line arguments in turn take precedence over
the config file. See the the section on "Config File" section below for details
on the config file.
.Ip "\fIdebug\fR (\fB\*(--debug\fR)" 4
.IX Item "debug (debug)"
Turn debugging mode on. Mainly this asserts that logging messages of
level \*(L"debug\*(R" are created.
.Ip "\fIfacility\fR (\fB\*(--facility=mode\fR)" 4
.IX Item "facility (facility=mode)"
(\s-1UNIX\s0 only) Facility to use for the Sys::Syslog (3) entry elsewhere in this document. The default is
\&\fBdaemon\fR.
.Ip "\fIgroup\fR (\fB\*(--group=gid\fR)" 4
.IX Item "group (group=gid)"
After doing a \fIbind()\fR, change the real and effective \s-1GID\s0 to the given.
This is usefull, if you want your server to bind to a privileged port
(<1024), but don't want the server to execute as root. See also
the \-\-user option.
.Sp
\&\s-1GID\s0's can be passed as group names or numeric values.
.Ip "\fIlocaladdr\fR (\fB\*(--localaddr=ip\fR)" 4
.IX Item "localaddr (localaddr=ip)"
By default a daemon is listening to any \s-1IP\s0 number that a machine
has. This attribute allows to restrict the server to the given
\&\s-1IP\s0 number.
.Ip "\fIlocalpath\fR (\fB\*(--localpath=path\fR)" 4
.IX Item "localpath (localpath=path)"
If you want to restrict your server to local services only, you'll
prefer using Unix sockets, if available. In that case you can use
this option for setting the path of the Unix socket being created.
This option implies \fB\*(--proto=unix\fR.
.Ip "\fIlocalport\fR (\fB\*(--localport=port\fR)" 4
.IX Item "localport (localport=port)"
This attribute sets the port on which the daemon is listening. It
must be given somehow, as there's no default.
.Ip "\fIlogfile\fR (\fB\*(--logfile=file\fR)" 4
.IX Item "logfile (logfile=file)"
By default logging messages will be written to the syslog (Unix) or
to the event log (Windows \s-1NT\s0). On other operating systems you need to
specify a log file. The special value \*(L"\s-1STDERR\s0\*(R" forces logging to
stderr.
.Ip "\fIloop-child\fR (\fB\*(--loop-child\fR)" 4
.IX Item "loop-child (loop-child)"
This option forces creation of a new child for loops. (See the
\&\fIloop-timeout\fR option.) By default the loops are serialized.
.Ip "\fIloop-timeout\fR (\fB\*(--loop-timeout=secs\fR)" 4
.IX Item "loop-timeout (loop-timeout=secs)"
Some servers need to take an action from time to time. For example the
Net::Daemon::Spooler attempts to empty its spooling queue every 5
minutes. If this option is set to a positive value (zero being the
default), then the server will call its Loop method every \*(L"loop-timeout\*(R"
seconds.
.Sp
Don't trust too much on the precision of the interval: It depends on
a number of factors, in particular the execution time of the \fILoop()\fR
method. The loop is implemented by using the \fIselect\fR function. If
you need an exact interval, you should better try to use the \fIalarm()\fR
function and a signal handler. (And don't forget to look at the
\&\fIcatchint\fR option!)
.Sp
It is recommended to use the \fIloop-child\fR option in conjunction with
\&\fIloop-timeout\fR.
.Ip "\fImode\fR (\fB\*(--mode=modename\fR)" 4
.IX Item "mode (mode=modename)"
The Net::Daemon server can run in three different modes, depending on
the environment.
.Sp
If you are running Perl 5.005 and did compile it for threads, then
the server will create a new thread for each connection. The thread
will execute the server's \fIRun()\fR method and then terminate. This mode
is the default, you can force it with \*(L"\-\-mode=threads\*(R".
.Sp
If threads are not available, but you have a working \fIfork()\fR, then the
server will behave similar by creating a new process for each connection.
This mode will be used automatically in the absence of threads or if
you use the \*(L"\-\-mode=fork\*(R" option.
.Sp
Finally there's a single-connection mode: If the server has accepted a
connection, he will enter the \fIRun()\fR method. No other connections are
accepted until the \fIRun()\fR method returns. This operation mode is usefull
if you have neither threads nor \fIfork()\fR, for example on the Macintosh.
For debugging purposes you can force this mode with \*(L"\-\-mode=single\*(R".
.Ip "\fIoptions\fR" 4
.IX Item "options"
Array ref of Command line options that have been passed to the server object
via the \fBnew\fR method.
.Ip "\fIparent\fR" 4
.IX Item "parent"
When creating an object with \fBClone\fR the original object becomes
the parent of the new object. Objects created with \fBnew\fR usually
don't have a parent, thus this attribute is not set.
.Ip "\fIpidfile\fR (\fB\*(--pidfile=file\fR)" 4
.IX Item "pidfile (pidfile=file)"
(\s-1UNIX\s0 only) If this option is present, a \s-1PID\s0 file will be created at the
given location.
.Ip "\fIproto\fR (\fB\*(--proto=proto\fR)" 4
.IX Item "proto (proto=proto)"
The transport layer to use, by default \fItcp\fR or \fIunix\fR for a Unix
socket. It is not yet possible to combine both.
.Ip "\fIsocket\fR" 4
.IX Item "socket"
The socket that is connected to the client; passed as \fB$client\fR argument
to the \fBClone\fR method. If the server object was created with \fBnew\fR,
this attribute can be undef, as long as the \fBBind\fR method isn't called.
Sockets are assumed to be \s-1IO:\s0:Socket objects.
.Ip "\fIuser\fR (\fB\*(--user=uid\fR)" 4
.IX Item "user (user=uid)"
After doing a \fIbind()\fR, change the real and effective \s-1UID\s0 to the given.
This is usefull, if you want your server to bind to a privileged port
(<1024), but don't want the server to execute as root. See also
the \-\-group and the \-\-chroot options.
.Sp
\&\s-1UID\s0's can be passed as group names or numeric values.
.Ip "\fIversion\fR (\fB\*(--version\fR)" 4
.IX Item "version (version)"
Supresses startup of the server; instead the version string will
be printed and the program exits immediately.
.PP
Note that most of these attributes (facility, mode, localaddr, localport,
pidfile, version) are meaningfull only at startup. If you set them later,
they will be simply ignored. As almost all attributes have appropriate
defaults, you will typically use the \fBlocalport\fR attribute only.
.Sh "Command Line Parsing"
.IX Subsection "Command Line Parsing"
.Vb 1
\&  my $optionsAvailable = Net::Daemon->Options();
.Ve
.Vb 1
\&  print Net::Daemon->Version(), "\en";
.Ve
.Vb 1
\&  Net::Daemon->Usage();
.Ve
The \fBOptions\fR method returns a hash ref of possible command line options.
The keys are option names, the values are again hash refs with the
following keys:
.Ip "template" 4
.IX Item "template"
An option template that can be passed to \fBGetopt::Long::GetOptions\fR.
.Ip "description" 4
.IX Item "description"
A description of this option, as used in \fBUsage\fR
.PP
The \fBUsage\fR method prints a list of all possible options and returns.
It uses the \fBVersion\fR method for printing program name and version.
.Sh "Config File"
.IX Subsection "Config File"
If the config file option is set in the command line options or in the
in the \*(L"new\*(R" args, then the method
.PP
.Vb 1
\&  $server->ReadConfigFile($file, $options, $args)
.Ve
is invoked. By default the config file is expected to contain Perl source
that returns a hash ref of options. These options override the \*(L"new\*(R"
args and will in turn be overwritten by the command line options, as
present in the \f(CW$options\fR hash ref.
.PP
A typical config file might look as follows, we use the \s-1DBI:\s0:ProxyServer
as an example:
.PP
.Vb 4
\&    # Load external modules; this is not required unless you use
\&    # the chroot() option.
\&    #require DBD::mysql;
\&    #require DBD::CSV;
.Ve
.Vb 8
\&    {
\&        # 'chroot' => '/var/dbiproxy',
\&        'facility' => 'daemon',
\&        'pidfile' => '/var/dbiproxy/dbiproxy.pid',
\&        'user' => 'nobody',
\&        'group' => 'nobody',
\&        'localport' => '1003',
\&        'mode' => 'fork'
.Ve
.Vb 19
\&        # Access control
\&        'clients' => [
\&            # Accept the local
\&            {
\&                'mask' => '^192\e.168\e.1\e.\ed+$',
\&                'accept' => 1
\&            },
\&            # Accept myhost.company.com
\&            {
\&                'mask' => '^myhost\e.company\e.com$',
\&                'accept' => 1
\&            }
\&            # Deny everything else
\&            {
\&                'mask' => '.*',
\&                'accept' => 0
\&            }
\&        ]
\&    }
.Ve
.Sh "Access control"
.IX Subsection "Access control"
The Net::Daemon package supports a host based access control scheme. By
default access is open for anyone. However, if you create an attribute
\&\f(CW$self\fR->{'clients'}, typically in the config file, then access control
is disabled by default. For any connection the client list is processed:
The clients attribute is an array ref to a list of hash refs. Any of the
hash refs may contain arbitrary attributes, including the following:
.Ip "mask" 8
.IX Item "mask"
A Perl regular expression that has to match the clients \s-1IP\s0 number or
its host name. The list is processed from the left to the right, whenever
a 'mask' attribute matches, then the related hash ref is choosen as
client and processing the client list stops.
.Ip "accept" 8
.IX Item "accept"
This may be set to true or false (default when omitting the attribute),
the former means accepting the client.
.Sh "Event logging"
.IX Subsection "Event logging"
.Vb 4
\&  $server->Log($level, $format, @args);
\&  $server->Debug($format, @args);
\&  $server->Error($format, @args);
\&  $server->Fatal($format, @args);
.Ve
The \fBLog\fR method is an interface to the Sys::Syslog (3) entry elsewhere in this document or
the Win32::EventLog (3) entry elsewhere in this document. It's arguments are \fI$level\fR, a syslog
level like \fBdebug\fR, \fBnotice\fR or \fBerr\fR, a format string in the
style of printf and the format strings arguments.
.PP
The \fBDebug\fR and \fBError\fR methods are shorthands for calling
\&\fBLog\fR with a level of debug and err, respectively. The \fBFatal\fR
method is like \fBError\fR, except it additionally throws the given
message as exception.
.PP
See \fINet::Daemon::Log\fR\|(3) for details.
.Sh "Flow of control"
.IX Subsection "Flow of control"
.Vb 7
\&  $server->Bind();
\&  # The following inside Bind():
\&  if ($connection->Accept()) {
\&      $connection->Run();
\&  } else {
\&      $connection->Log('err', 'Connection refused');
\&  }
.Ve
The \fBBind\fR method is called by the application when the server should
start. Typically this can be done right after creating the server object
\&\fB$server\fR. \fBBind\fR usually never returns, except in case of errors.
.PP
When a client connects, the server uses \fBClone\fR to derive a connection
object \fB$connection\fR from the server object. A new thread or process
is created that uses the connection object to call your classes
\&\fBAccept\fR method. This method is intended for host authorization and
should return either \s-1FALSE\s0 (refuse the client) or \s-1TRUE\s0 (accept the client).
.PP
If the client is accepted, the \fBRun\fR method is called which does the
true work. The connection is closed when \fBRun\fR returns and the corresponding
thread or process exits.
.Sh "Error Handling"
.IX Subsection "Error Handling"
All methods are supposed to throw Perl exceptions in case of errors.
.SH "MULTITHREADING CONSIDERATIONS"
.IX Header "MULTITHREADING CONSIDERATIONS"
All methods are working with lexically scoped data and handle data
only, the exception being the OpenLog method which is invoked before
threading starts. Thus you are safe as long as you don't share
handles between threads. I strongly recommend that your application
behaves similar.
.SH "EXAMPLE"
.IX Header "EXAMPLE"
As an example we'll write a simple calculator server. After connecting
to this server you may type expressions, one per line. The server
evaluates the expressions and prints the result. (Note this is an example,
in real life we'd never implement such a security hole. :\-)
.PP
For the purpose of example we add a command line option \fI\*(--base\fR that
takes 'hex', 'oct' or 'dec' as values: The servers output will use the
given base.
.PP
.Vb 6
\&  # -*- perl -*-
\&  #
\&  # Calculator server
\&  #
\&  require 5.004;
\&  use strict;
.Ve
.Vb 1
\&  require Net::Daemon;
.Ve
.Vb 1
\&  package Calculator;
.Ve
.Vb 3
\&  use vars qw($VERSION @ISA);
\&  $VERSION = '0.01';
\&  @ISA = qw(Net::Daemon); # to inherit from Net::Daemon
.Ve
.Vb 1
\&  sub Version ($) { 'Calculator Example Server, 0.01'; }
.Ve
.Vb 10
\&  # Add a command line option "--base"
\&  sub Options ($) {
\&      my($self) = @_;
\&      my($options) = $self->SUPER::Options();
\&      $options->{'base'} = { 'template' => 'base=s',
\&                             'description' => '--base                  '
\&                                    . 'dec (default), hex or oct'
\&                              };
\&      $options;
\&  }
.Ve
.Vb 18
\&  # Treat command line option in the constructor
\&  sub new ($$;$) {
\&      my($class, $attr, $args) = @_;
\&      my($self) = $class->SUPER::new($attr, $args);
\&      if ($self->{'parent'}) {
\&          # Called via Clone()
\&          $self->{'base'} = $self->{'parent'}->{'base'};
\&      } else {
\&          # Initial call
\&          if ($self->{'options'}  &&  $self->{'options'}->{'base'}) {
\&              $self->{'base'} = $self->{'options'}->{'base'}
\&          }
\&      }
\&      if (!$self->{'base'}) {
\&          $self->{'base'} = 'dec';
\&      }
\&      $self;
\&  }
.Ve
.Vb 31
\&  sub Run ($) {
\&      my($self) = @_;
\&      my($line, $sock);
\&      $sock = $self->{'socket'};
\&      while (1) {
\&          if (!defined($line = $sock->getline())) {
\&              if ($sock->error()) {
\&                  $self->Error("Client connection error %s",
\&                               $sock->error());
\&              }
\&              $sock->close();
\&              return;
\&          }
\&          $line =~ s/\es+$//; # Remove CRLF
\&          my($result) = eval $line;
\&          my($rc);
\&          if ($self->{'base'} eq 'hex') {
\&              $rc = printf $sock ("%x\en", $result);
\&          } elsif ($self->{'base'} eq 'oct') {
\&              $rc = printf $sock ("%o\en", $result);
\&          } else {
\&              $rc = printf $sock ("%d\en", $result);
\&          }
\&          if (!$rc) {
\&              $self->Error("Client connection error %s",
\&                           $sock->error());
\&              $sock->close();
\&              return;
\&          }
\&      }
\&  }
.Ve
.Vb 1
\&  package main;
.Ve
.Vb 3
\&  my $server = Calculator->new({'pidfile' => 'none',
\&                                'localport' => 2000}, \e@ARGV);
\&  $server->Bind();
.Ve
.SH "KNOWN PROBLEMS"
.IX Header "KNOWN PROBLEMS"
Most, or even any, known problems are related to the Sys::Syslog module
which is by default used for logging events under Unix. I'll quote some
examples:
.Ip "Usage: Sys::Syslog::_PATH_LOG at ..." 4
.IX Item "Usage: Sys::Syslog::_PATH_LOG at ..."
This problem is treated in perl bug 20000712.003. A workaround is
changing line 277 of Syslog.pm to
.Sp
.Vb 1
\&  my $syslog = &_PATH_LOG() || croak "_PATH_LOG not found in syslog.ph";
.Ve
.SH "AUTHOR AND COPYRIGHT"
.IX Header "AUTHOR AND COPYRIGHT"
.Vb 4
\&  Net::Daemon is Copyright (C) 1998, Jochen Wiedmann
\&                                     Am Eisteich 9
\&                                     72555 Metzingen
\&                                     Germany
.Ve
.Vb 2
\&                                     Phone: +49 7123 14887
\&                                     Email: joe@ispsoft.de
.Ve
.Vb 1
\&  All rights reserved.
.Ve
.Vb 3
\&  You may distribute this package under the terms of either the GNU
\&  General Public License or the Artistic License, as specified in the
\&  Perl README file.
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIRPC::pServer\fR\|(3), \fINetserver::Generic\fR\|(3), \fINet::Daemon::Log\fR\|(3),
\&\fINet::Daemon::Test\fR\|(3)
