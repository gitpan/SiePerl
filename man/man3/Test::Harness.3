.\" Automatically generated by Pod::Man version 1.15
.\" Fri Apr 20 13:09:24 2001
.\"
.\" Standard preamble:
.\" ======================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R

.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used
.\" to do unbreakable dashes and therefore won't be available.  \*(C` and
.\" \*(C' expand to `' in nroff, nothing in troff, for use with C<>
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr
.\" for titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and
.\" index entries marked with X<> in POD.  Of course, you'll have to process
.\" the output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it
.\" makes way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.bd B 3
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ======================================================================
.\"
.IX Title "Test::Harness 3"
.TH Test::Harness 3 "perl v5.6.1" "2001-02-23" "Perl Programmers Reference Guide"
.UC
.SH "NAME"
Test::Harness \- run perl standard test scripts with statistics
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
use Test::Harness;
.PP
runtests(@tests);
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
(By using the the Test manpage module, you can write test scripts without
knowing the exact output this module expects.  However, if you need to
know the specifics, read on!)
.PP
Perl test scripts print to standard output \f(CW\*(C`"ok N"\*(C'\fR for each single
test, where \f(CW\*(C`N\*(C'\fR is an increasing sequence of integers. The first line
output by a standard test script is \f(CW\*(C`"1..M"\*(C'\fR with \f(CW\*(C`M\*(C'\fR being the
number of tests that should be run within the test
script. Test::Harness::runtests(@tests) runs all the testscripts
named as arguments and checks standard output for the expected
\&\f(CW\*(C`"ok N"\*(C'\fR strings.
.PP
After all tests have been performed, \fIruntests()\fR prints some
performance statistics that are computed by the Benchmark module.
.Sh "The test script output"
.IX Subsection "The test script output"
Any output from the testscript to standard error is ignored and
bypassed, thus will be seen by the user. Lines written to standard
output containing \f(CW\*(C`/^(not\es+)?ok\eb/\*(C'\fR are interpreted as feedback for
\&\fIruntests()\fR.  All other lines are discarded.
.PP
It is tolerated if the test numbers after \f(CW\*(C`ok\*(C'\fR are omitted. In this
case Test::Harness maintains temporarily its own counter until the
script supplies test numbers again. So the following test script
.PP
.Vb 8
\&    print <<END;
\&    1..6
\&    not ok
\&    ok
\&    not ok
\&    ok
\&    ok
\&    END
.Ve
will generate 
.PP
.Vb 2
\&    FAILED tests 1, 3, 6
\&    Failed 3/6 tests, 50.00% okay
.Ve
The global variable \f(CW$Test::Harness::verbose\fR is exportable and can be
used to let \fIruntests()\fR display the standard output of the script
without altering the behavior otherwise.
.PP
The global variable \f(CW$Test::Harness::switches\fR is exportable and can be
used to set perl command line options used for running the test
\&\fIscript\fR\|(s). The default value is \f(CW\*(C`\-w\*(C'\fR.
.PP
If the standard output line contains substring \f(CW\*(C` # Skip\*(C'\fR (with
variations in spacing and case) after \f(CW\*(C`ok\*(C'\fR or \f(CW\*(C`ok NUMBER\*(C'\fR, it is
counted as a skipped test.  If the whole testscript succeeds, the
count of skipped tests is included in the generated output.
.PP
\&\f(CW\*(C`Test::Harness\*(C'\fR reports the text after \f(CW\*(C` # Skip(whatever)\*(C'\fR as a
reason for skipping.  Similarly, one can include a similar explanation
in a \f(CW\*(C`1..0\*(C'\fR line emitted if the test is skipped completely:
.PP
.Vb 1
\&  1..0 # Skipped: no leverage found
.Ve
.SH "EXPORT"
.IX Header "EXPORT"
\&\f(CW\*(C`&runtests\*(C'\fR is exported by Test::Harness per default.
.SH "DIAGNOSTICS"
.IX Header "DIAGNOSTICS"
.if n .Ip "\f(CW""""All tests successful.\enFiles=%d,  Tests=%d, %s""""\fR" 4
.el .Ip "\f(CWAll tests successful.\enFiles=%d,  Tests=%d, %s\fR" 4
.IX Item "All tests successful.nFiles=%d,  Tests=%d, %s"
If all tests are successful some statistics about the performance are
printed.
.if n .Ip "\f(CW""""FAILED tests %s\en\etFailed %d/%d tests, %.2f%% okay.""""\fR" 4
.el .Ip "\f(CWFAILED tests %s\en\etFailed %d/%d tests, %.2f%% okay.\fR" 4
.IX Item "FAILED tests %sntFailed %d/%d tests, %.2f%% okay."
For any single script that has failing subtests statistics like the
above are printed.
.if n .Ip "\f(CW""""Test returned status %d (wstat %d)""""\fR" 4
.el .Ip "\f(CWTest returned status %d (wstat %d)\fR" 4
.IX Item "Test returned status %d (wstat %d)"
Scripts that return a non-zero exit status, both \f(CW\*(C`$? >> 8\*(C'\fR and \f(CW\*(C`$?\*(C'\fR are
printed in a message similar to the above.
.if n .Ip "\f(CW""""Failed 1 test, %.2f%% okay. %s""""\fR" 4
.el .Ip "\f(CWFailed 1 test, %.2f%% okay. %s\fR" 4
.IX Item "Failed 1 test, %.2f%% okay. %s"
.PD 0
.if n .Ip "\f(CW""""Failed %d/%d tests, %.2f%% okay. %s""""\fR" 4
.el .Ip "\f(CWFailed %d/%d tests, %.2f%% okay. %s\fR" 4
.IX Item "Failed %d/%d tests, %.2f%% okay. %s"
.PD
If not all tests were successful, the script dies with one of the
above messages.
.SH "ENVIRONMENT"
.IX Header "ENVIRONMENT"
Setting \f(CW\*(C`HARNESS_IGNORE_EXITCODE\*(C'\fR makes harness ignore the exit status
of child processes.
.PP
Setting \f(CW\*(C`HARNESS_NOTTY\*(C'\fR to a true value forces it to behave as though
\&\s-1STDOUT\s0 were not a console.  You may need to set this if you don't want
harness to output more frequent progress messages using carriage returns.
Some consoles may not handle carriage returns properly (which results
in a somewhat messy output).
.PP
Setting \f(CW\*(C`HARNESS_COMPILE_TEST\*(C'\fR to a true value will make harness attempt
to compile the test using \f(CW\*(C`perlcc\*(C'\fR before running it.
.PP
If \f(CW\*(C`HARNESS_FILELEAK_IN_DIR\*(C'\fR is set to the name of a directory, harness
will check after each test whether new files appeared in that directory,
and report them as
.PP
.Vb 1
\&  LEAKED FILES: scr.tmp 0 my.db
.Ve
If relative, directory name is with respect to the current directory at
the moment \fIruntests()\fR was called.  Putting absolute path into 
\&\f(CW\*(C`HARNESS_FILELEAK_IN_DIR\*(C'\fR may give more predicatable results.
.PP
The value of \f(CW\*(C`HARNESS_PERL_SWITCHES\*(C'\fR will be prepended to the
switches used to invoke perl on each test.  For example, setting
\&\f(CW\*(C`HARNESS_PERL_SWITCHES\*(C'\fR to \*(L"\-W\*(R" will run all tests with all
warnings enabled.
.PP
If \f(CW\*(C`HARNESS_COLUMNS\*(C'\fR is set, then this value will be used for the
width of the terminal. If it is not set then it will default to
\&\f(CW\*(C`COLUMNS\*(C'\fR. If this is not set, it will default to 80. Note that users
of Bourne-sh based shells will need to \f(CW\*(C`export COLUMNS\*(C'\fR for this
module to use that variable.
.PP
Harness sets \f(CW\*(C`HARNESS_ACTIVE\*(C'\fR before executing the individual tests.
This allows the tests to determine if they are being executed through the
harness or by any other means.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
the Test manpage for writing test scripts and also the Benchmark manpage for the
underlying timing routines.
.SH "AUTHORS"
.IX Header "AUTHORS"
Either Tim Bunce or Andreas Koenig, we don't know. What we know for
sure is, that it was inspired by Larry Wall's \s-1TEST\s0 script that came
with perl distributions for ages. Numerous anonymous contributors
exist. Current maintainer is Andreas Koenig.
.SH "BUGS"
.IX Header "BUGS"
Test::Harness uses $^X to determine the perl binary to run the tests
with. Test scripts running via the shebang (\f(CW\*(C`#!\*(C'\fR) line may not be
portable because $^X is not consistent for shebang scripts across
platforms. This is no problem when Test::Harness is run with an
absolute path to the perl binary or when $^X can be found in the path.
