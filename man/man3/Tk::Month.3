.\" Automatically generated by Pod::Man version 1.15
.\" Fri Apr 20 15:43:50 2001
.\"
.\" Standard preamble:
.\" ======================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R

.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used
.\" to do unbreakable dashes and therefore won't be available.  \*(C` and
.\" \*(C' expand to `' in nroff, nothing in troff, for use with C<>
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr
.\" for titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and
.\" index entries marked with X<> in POD.  Of course, you'll have to process
.\" the output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it
.\" makes way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.bd B 3
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ======================================================================
.\"
.IX Title "Month 3"
.TH Month 3 "perl v5.6.1" "2000-05-24" "User Contributed Perl Documentation"
.UC
.SH "NAME"
Tk::Month \- Calendar widget which shows one month at a time.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&  use Tk;
\&  use Tk::Month;
.Ve
.Vb 11
\&  $m = $parent->Tk::Month(
\&                -month          => 'July',
\&                -year           => '1997',
\&                -title          => '%b %y',
\&                -command        => \e&press,
\&                -printformat    => '%e',
\&                -navigation     => [0|1],
\&                -includeall     => [0|1],
\&                -showall        => [0|1],
\&                -first          => [0|1|2|3|4|5|6],
\&        )->pack();
.Ve
.Vb 10
\&  $m->configure(
\&                -month          => 'July',
\&                -year           => '1997',
\&                -command        => \e&press,
\&                -printformat    => '%e %B %Y %A',
\&                -navigation     => [0|1],
\&                -includeall     => [0|1],
\&                -showall        => [0|1],
\&                -first          => [0|1|2|3|4|5|6],
\&  );
.Ve
.Vb 5
\&  $m->separator();
\&  $m->command(
\&                -label          => 'Label',
\&                -command        => \e&callback,
\&  );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Tk::Month is a general purpose calendar widget
which shows one month at a time and allowes
user defined button actions.
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
.Sh "$m->\fIseparator()\fP;"
.IX Subsection "$m->separator();"
.Vb 1
\&        Adds a separator to the title menu.
.Ve
.Sh "$m->command(...);"
.IX Subsection "$m->command(...);"
.Vb 3
\&        Adds an entry to the title menu. This can be used to add 
\&        extra functionality, such as closing the calendar widget or
\&        printing a month.
.Ve
.SH "OPTIONS"
.IX Header "OPTIONS"
.Sh "\-month => 'month'"
.IX Subsection "-month => 'month'"
.Vb 1
\&        Sets the required month. The default is the current month.
.Ve
.Sh "\-year => 'year'"
.IX Subsection "-year => 'year'"
.Vb 1
\&        Sets the required year. The default is the current year.
.Ve
.Sh "\-title => 'strftime format'"
.IX Subsection "-title => 'strftime format'"
.Vb 2
\&        Sets the format for the widget title.
\&        The default is '%B %Y'.
.Ve
.Sh "\-command => \e&press"
.IX Subsection "-command => &press"
.Vb 6
\&        Set the command to execute when a button is pressed.
\&        This function must accept a string
\&        (the title of the Month widget)
\&        and an array of arrays of dates.
\&        Each date is of the format specified by the -printformat option.
\&        The default is to print out the list on standard output.
.Ve
.if n .Sh "\-printformat	=> ""strftime format"""
.el .Sh "\-printformat	=> ``strftime format''"
.IX Subsection "-printformat	=> "strftime format"
.Vb 3
\&        Set the default format for dates when they are passed in an
\&        array of arrays to the -command function.
\&        The default is '%e %B %Y'.
.Ve
.Sh "\s-1DISCONTINUED\s0 \-printcommand	=> \e&print"
.IX Subsection "DISCONTINUED -printcommand	=> &print"
.Vb 1
\&        Add an entry to the title menu using the 'command' function.
.Ve
.Sh "\s-1DISCONTINUTED\s0 \-close		=> \f(CW$widget\fP,"
.IX Subsection "DISCONTINUTED -close		=> $widget,"
.Vb 1
\&        Add an entry to the title menu using the 'command' function.
.Ve
.Sh "\-showall		=> [0|1]"
.IX Subsection "-showall		=> [0|1]"
.Vb 2
\&        Causes the dates on buttons not actually in the month to be
\&        dsiplay. The default is to not show these dates.
.Ve
.Sh "\-includeall	=> [0|1]"
.IX Subsection "-includeall	=> [0|1]"
.Vb 2
\&        Causes the side buttons to include all the non-month dates.
\&        The defaults is to include all the dates.
.Ve
.Sh "\-first	=> [0|1|2|3|4|5|6]"
.IX Subsection "-first	=> [0|1|2|3|4|5|6]"
.Vb 2
\&        Sets the first day of the week.
\&        The default is 0 (i.e. Sunday).
.Ve
.Sh "\-navigation	=> [0|1],"
.IX Subsection "-navigation	=> [0|1],"
.Vb 2
\&        Sets whether the navigation buttons and menu are included.
\&        The default is to show the naviagation aids.
.Ve
