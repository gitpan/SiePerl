.\" Automatically generated by Pod::Man version 1.15
.\" Fri Apr 20 13:11:21 2001
.\"
.\" Standard preamble:
.\" ======================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R

.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used
.\" to do unbreakable dashes and therefore won't be available.  \*(C` and
.\" \*(C' expand to `' in nroff, nothing in troff, for use with C<>
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr
.\" for titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and
.\" index entries marked with X<> in POD.  Of course, you'll have to process
.\" the output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it
.\" makes way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.bd B 3
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ======================================================================
.\"
.IX Title "CGI::Fast 3"
.TH CGI::Fast 3 "perl v5.6.1" "2001-03-03" "Perl Programmers Reference Guide"
.UC
.SH "NAME"
\&\s-1CGI:\s0:Fast \- \s-1CGI\s0 Interface for Fast \s-1CGI\s0
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 12
\&    use CGI::Fast qw(:standard);
\&    $COUNTER = 0;
\&    while (new CGI::Fast) {
\&        print header;
\&        print start_html("Fast CGI Rocks");
\&        print
\&            h1("Fast CGI Rocks"),
\&            "Invocation number ",b($COUNTER++),
\&            " PID ",b($$),".",
\&            hr;
\&        print end_html;
\&    }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\s-1CGI:\s0:Fast is a subclass of the \s-1CGI\s0 object created by
\&\s-1CGI\s0.pm.  It is specialized to work well with the Open Market
FastCGI standard, which greatly speeds up \s-1CGI\s0 scripts by
turning them into persistently running server processes.  Scripts
that perform time-consuming initialization processes, such as
loading large modules or opening persistent database connections,
will see large performance improvements.
.SH "OTHER PIECES OF THE PUZZLE"
.IX Header "OTHER PIECES OF THE PUZZLE"
In order to use \s-1CGI:\s0:Fast you'll need a FastCGI-enabled Web
server.  Open Market's server is FastCGI-savvy.  There are also
freely redistributable FastCGI modules for \s-1NCSA\s0 httpd 1.5 and Apache.
FastCGI-enabling modules for Microsoft Internet Information Server and
Netscape Communications Server have been announced.
.PP
In addition, you'll need a version of the Perl interpreter that has
been linked with the FastCGI I/O library.  Precompiled binaries are
available for several platforms, including \s-1DEC\s0 Alpha, \s-1HP-UX\s0 and 
SPARC/Solaris, or you can rebuild Perl from source with patches
provided in the FastCGI developer's kit.  The FastCGI Perl interpreter
can be used in place of your normal Perl without ill consequences.
.PP
You can find FastCGI modules for Apache and \s-1NCSA\s0 httpd, precompiled
Perl interpreters, and the FastCGI developer's kit all at \s-1URL:\s0
.PP
.Vb 1
\&  http://www.fastcgi.com/
.Ve
.SH "WRITING FASTCGI PERL SCRIPTS"
.IX Header "WRITING FASTCGI PERL SCRIPTS"
FastCGI scripts are persistent: one or more copies of the script 
are started up when the server initializes, and stay around until
the server exits or they die a natural death.  After performing
whatever one-time initialization it needs, the script enters a 
loop waiting for incoming connections, processing the request, and
waiting some more.
.PP
A typical FastCGI script will look like this:
.PP
.Vb 6
\&    #!/usr/local/bin/perl    # must be a FastCGI version of perl!
\&    use CGI::Fast;
\&    &do_some_initialization();
\&    while ($q = new CGI::Fast) {
\&        &process_request($q);
\&    }
.Ve
Each time there's a new request, \s-1CGI:\s0:Fast returns a
\&\s-1CGI\s0 object to your loop.  The rest of the time your script
waits in the call to \fInew()\fR.  When the server requests that
your script be terminated, \fInew()\fR will return undef.  You can
of course exit earlier if you choose.  A new version of the
script will be respawned to take its place (this may be
necessary in order to avoid Perl memory leaks in long-running
scripts).
.PP
\&\s-1CGI\s0.pm's default \s-1CGI\s0 object mode also works.  Just modify the loop
this way:
.PP
.Vb 3
\&    while (new CGI::Fast) {
\&        &process_request;
\&    }
.Ve
Calls to \fIheader()\fR, \fIstart_form()\fR, etc. will all operate on the
current request.
.SH "INSTALLING FASTCGI SCRIPTS"
.IX Header "INSTALLING FASTCGI SCRIPTS"
See the FastCGI developer's kit documentation for full details.  On
the Apache server, the following line must be added to srm.conf:
.PP
.Vb 1
\&    AddType application/x-httpd-fcgi .fcgi
.Ve
FastCGI scripts must end in the extension .fcgi.  For each script you
install, you must add something like the following to srm.conf:
.PP
.Vb 1
\&   AppClass /usr/etc/httpd/fcgi-bin/file_upload.fcgi -processes 2
.Ve
This instructs Apache to launch two copies of file_upload.fcgi at 
startup time.
.SH "USING FASTCGI SCRIPTS AS CGI SCRIPTS"
.IX Header "USING FASTCGI SCRIPTS AS CGI SCRIPTS"
Any script that works correctly as a FastCGI script will also work
correctly when installed as a vanilla \s-1CGI\s0 script.  However it will
not see any performance benefit.
.SH "CAVEATS"
.IX Header "CAVEATS"
I haven't tested this very much.
.SH "AUTHOR INFORMATION"
.IX Header "AUTHOR INFORMATION"
Copyright 1996\-1998, Lincoln D. Stein.  All rights reserved.  
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
.PP
Address bug reports and comments to: lstein@cshl.org
.SH "BUGS"
.IX Header "BUGS"
This section intentionally left blank.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
the CGI::Carp manpage, the CGI manpage
