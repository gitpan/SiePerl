.\" Automatically generated by Pod::Man version 1.15
.\" Fri Apr 20 15:50:56 2001
.\"
.\" Standard preamble:
.\" ======================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R

.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used
.\" to do unbreakable dashes and therefore won't be available.  \*(C` and
.\" \*(C' expand to `' in nroff, nothing in troff, for use with C<>
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr
.\" for titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and
.\" index entries marked with X<> in POD.  Of course, you'll have to process
.\" the output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it
.\" makes way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.bd B 3
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ======================================================================
.\"
.IX Title "Multi::Manager 3"
.TH Multi::Manager 3 "perl v5.6.1" "1999-04-02" "User Contributed Perl Documentation"
.UC
.SH "NAME"
Tk::Multi::Manager \- Tk composite widget managing Tk::Multi slaves
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\& use Tk::Multi::Manager ;
\& use Tk::Multi::Text ; # if you use MultiText as a slave
.Ve
.Vb 6
\& my $manager = yourWindow -> MultiManager 
\&  (
\&   menu => $menu_ref , # optionnal
\&   title => "windows", # optionnal
\&   help => "Explain what your set of widget do" #optionnal
\&  ) -> pack ();
.Ve
.Vb 7
\& # Don't pack it, the managet will do it
\& my $w1 = $manager -> newSlave
\&  (
\&   'type' => 'MultiText', 
\&   'title' => 'a_label',
\&   help => "Explain what your slave widget does" #optionnal
\&  );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The manager is a composite widget made of a menu cascade of check buttons 
and slaves which can be Tk::Multi::Text.
.PP
The user can add windows to the manager. Each window visibility is
controled by a check button in the menu cascade.  The check button
actually tells the packer to forget the window. note that the window
object is not destroyed.
.PP
The main menu bar will feature a 'Help' menu on the right. If the main
help which explain the purpose of the Multi::Manager and its slaves is
provided when creating the widget, the Help sub-menu will feature a
\&'global' label.
.PP
Each slave widget which is created with a help will have its own label
in the help menu.
.SH "Multi widgets"
.IX Header "Multi widgets"
This package features the following Multi widgets:
.Ip "\(bu" 4
the Tk::Multi::Text manpage
.Ip "\(bu" 4
the Tk::Multi::Canvas manpage
.SH "Constructor configuration options"
.IX Header "Constructor configuration options"
.Sh "menu"
.IX Subsection "menu"
The widget may use a 'menu' argument which will be used to create a
menu item and releveant sub-menus to control the sub-window.  If not
provided, the widget will create a its own menu.
.Sh "title"
.IX Subsection "title"
The optionnal title argument contains the title of the menu created by
the manager.
.Sh "help"
.IX Subsection "help"
The argument may be a string or a sub reference.
.PP
When the help menu is invoked, either the help string will be
displayed in a the Tk::Dialog manpage box or the sub will be run. In this case it
is the user's responsability to provide a readable help from the sub.
.SH "Methods"
.IX Header "Methods"
.Sh "newSlave(...) ;"
.IX Subsection "newSlave(...) ;"
Create a new slave to manager. Returns the slave widget object. Parameters
are:
.Ip "\(bu" 4
type: specifies the kind of Multi widget (e.g. MultiText).
.Ip "\(bu" 4
title: specifies the title of the widget (mandatory).
.Ip "\(bu" 4
before: specify that you want this new slave to be packed before
(well, above) another widget. This parameter will be set to the 'title' of 
this other widget.
.Ip "\(bu" 4
side: when set to 'top', the widget will be packed on top of the others.
(default to 'bottom').
.Ip "\(bu" 4
hidden: specifies whether the widget is to be packed right now or not
(default 0)
.Ip "\(bu" 4
destroyable: a 'destroy' button is created if this parameter is
defined (default no).  Returns the slave widget reference.
.Ip "\(bu" 4
help: This argument may be specified like the help parameter defined
above for the constructor.
.Sh "getSlave('name of the slave');"
.IX Subsection "getSlave('name of the slave');"
Return the slave widget or undef.
.Sh "hide('name of the slave');"
.IX Subsection "hide('name of the slave');"
Hide the slave.
.Sh "show('name of the slave');"
.IX Subsection "show('name of the slave');"
Show the slave.
.Sh "destroySlave( 'name of the slave') ;"
.IX Subsection "destroySlave( 'name of the slave') ;"
Destroy the slave
.SH "AUTHOR"
.IX Header "AUTHOR"
Dominique Dumont, Dominique_Dumont@grenoble.hp.com
.PP
Copyright (c) 1997\-1999 Dominique Dumont. All rights reserved.
This program is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIperl\fR\|(1), \fITk\fR\|(3), \fITk::Multi::Text\fR\|(3), \fITk::Multi::Canvas\fR\|(3)
