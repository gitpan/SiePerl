.\" Automatically generated by Pod::Man version 1.15
.\" Mon Apr 23 10:24:49 2001
.\"
.\" Standard preamble:
.\" ======================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R

.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used
.\" to do unbreakable dashes and therefore won't be available.  \*(C` and
.\" \*(C' expand to `' in nroff, nothing in troff, for use with C<>
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr
.\" for titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and
.\" index entries marked with X<> in POD.  Of course, you'll have to process
.\" the output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it
.\" makes way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.bd B 3
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ======================================================================
.\"
.IX Title "DumpXML 3"
.TH DumpXML 3 "perl v5.6.1" "2000-09-19" "User Contributed Perl Documentation"
.UC
.SH "NAME"
Data::DumpXML \- Dump arbitrary data structures as \s-1XML\s0
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\& use Data::DumpXML qw(dump_xml);
\& $xml = dump_xml(@list)
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module provide a single function called \fIdump_xml()\fR that takes a
list of something as argument and produce a string as result.
.PP
The string returned is an \s-1XML\s0 document that represents any perl data
structure passed in.  The following \s-1DTD\s0 is used:
.PP
.Vb 2
\&  <!DOCTYPE data [
\&   <!ENTITY % scalar "undef | str | ref | alias">
.Ve
.Vb 10
\&   <!ELEMENT data (%scalar;)*>
\&   <!ELEMENT undef EMPTY>
\&   <!ELEMENT str (#PCDATA)>
\&   <!ELEMENT ref (%scalar; | array | hash | glob | code)>
\&   <!ELEMENT alias EMPTY>
\&   <!ELEMENT array (%scalar;)*>
\&   <!ELEMENT hash  (key, (%scalar;))*>
\&   <!ELEMENT key (#PCDATA)>
\&   <!ELEMENT glob EMPTY>
\&   <!ELEMENT code EMPTY>
.Ve
.Vb 3
\&   <!ENTITY % stdattlist 'id       ID             #IMPLIED
\&                          class    CDATA          #IMPLIED'>
\&   <!ENTITY % encoding   'encoding (plain|base64) "plain"'>
.Ve
.Vb 7
\&   <!ATTLIST undef %stdattlist;>
\&   <!ATTLIST ref %stdattlist;>
\&   <!ATTLIST undef %stdattlist;>
\&   <!ATTLIST array %stdattlist;>
\&   <!ATTLIST hash %stdattlist;>
\&   <!ATTLIST glob %stdattlist;>
\&   <!ATTLIST code %stdattlist;>
.Ve
.Vb 2
\&   <!ATTLIST str %stdattlist; %encoding;>
\&   <!ATTLIST key %encoding;>
.Ve
.Vb 2
\&   <!ATTLIST alias ref IDREF #IMPLIED>
\&  ]>
.Ve
As an example of the \s-1XML\s0 documents producted; the following call:
.PP
.Vb 4
\&  $a = bless [1,2], "Foo";
\&  $a->[2] = \e$a;
\&  $b = $a;
\&  dump_xml($a, $b);
.Ve
will produce:
.PP
.Vb 10
\&  <?xml version="1.0" encoding="US-ASCII"?>
\&  <data>
\&   <ref id="r1">
\&    <array class="Foo" id="r2">
\&     <str>1</str>
\&     <str>2</str>
\&     <ref>
\&      <alias ref="r1"/></ref></array></ref>
\&   <ref>
\&    <alias ref="r2"/></ref></data>
.Ve
If \fIdump_xml()\fR is called in void context, then the dump will be printed
on \s-1STDERR\s0 instead of being returned.  For compatibility with
\&\f(CW\*(C`Data::Dump\*(C'\fR there is also an alias for \fIdump_xml()\fR simply called
\&\fIdump()\fR.
.PP
You can set the variable \f(CW$Data::DumpXML::INDENT\fR to control indenting
before calling \fIdump_xml()\fR.  To suppress indenting set it as "".
.PP
The \f(CW\*(C`Data::DumpXML::Parser\*(C'\fR is a class that can restore
datastructures dumped by \fIdump_xml()\fR.
.SH "BUGS"
.IX Header "BUGS"
Class names with 8\-bit characters will be dumped as Latin-1, but
converted to \s-1UTF-8\s0 when restored by the Data::DumpXML::Parser.
.PP
The content of globs and subroutines are not dumped.  They are
restored as the strings; \*(L"** glob **\*(R" and \*(L"** code **\*(R".
.PP
\&\s-1LVALUE\s0 and \s-1IO\s0 objects are not dumped at all.  They will simply
disappear from the restored data structure.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
the Data::DumpXML::Parser manpage, the XML::Parser manpage, the XML::Dumper manpage, the Data::Dump manpage
.SH "AUTHORS"
.IX Header "AUTHORS"
The \f(CW\*(C`Data::DumpXML\*(C'\fR module is written by Gisle Aas <gisle@aas.no>,
based on \f(CW\*(C`Data::Dump\*(C'\fR.
.PP
The \f(CW\*(C`Data::Dump\*(C'\fR module was written by Gisle Aas, based on
\&\f(CW\*(C`Data::Dumper\*(C'\fR by Gurusamy Sarathy <gsar@umich.edu>.
.PP
.Vb 2
\& Copyright 1998-2000 Gisle Aas.
\& Copyright 1996-1998 Gurusamy Sarathy.
.Ve
This library is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
