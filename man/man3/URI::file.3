.\" Automatically generated by Pod::Man version 1.15
.\" Fri Apr 20 15:34:29 2001
.\"
.\" Standard preamble:
.\" ======================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R

.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used
.\" to do unbreakable dashes and therefore won't be available.  \*(C` and
.\" \*(C' expand to `' in nroff, nothing in troff, for use with C<>
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr
.\" for titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and
.\" index entries marked with X<> in POD.  Of course, you'll have to process
.\" the output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it
.\" makes way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.bd B 3
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ======================================================================
.\"
.IX Title "URI::file 3"
.TH URI::file 3 "perl v5.6.1" "2000-04-07" "User Contributed Perl Documentation"
.UC
.SH "NAME"
\&\s-1URI:\s0:file \- \s-1URI\s0 that map to local file names
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& use URI::file;
.Ve
.Vb 2
\& $u1 = URI->new("file:/foo/bar");
\& $u2 = URI->new("foo/bar", "file");
.Ve
.Vb 2
\& $u3 = URI::file->new($path);
\& $u4 = URI::file->new("c:\e\ewindows\e\e", "win32");
.Ve
.Vb 2
\& $u1->file;
\& $u1->file("mac");
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The \f(CW\*(C`URI::file\*(C'\fR class supports \f(CW\*(C`URI\*(C'\fR objects belonging to the \fIfile\fR
\&\s-1URI\s0 scheme.  This scheme allows us to map the conventional file names
found on various computer systems to the \s-1URI\s0 name space.  An old
specification of the \fIfile\fR \s-1URI\s0 scheme is found in \s-1RFC\s0 1738.  Some
older background information is also in \s-1RFC\s0 1630. There are no newer
specifications as far as I know.
.PP
If you want simply to construct \fIfile\fR \s-1URI\s0 objects from \s-1URI\s0 strings,
use the normal \f(CW\*(C`URI\*(C'\fR constructor.  If you want to construct \fIfile\fR
\&\s-1URI\s0 objects from the actual file names used by various systems, then
use one of the following \f(CW\*(C`URI::file\*(C'\fR constructors:
.Ip "$u = \s-1URI:\s0:file->new( \f(CW$filename\fR, [$os] )" 4
.IX Item "$u = URI::file->new( $filename, [$os] )"
Maps a file name to the \fIfile:\fR \s-1URI\s0 name space, creates an \s-1URI\s0 object
and returns it.  The \f(CW$filename\fR is interpreted as one belonging to the
indicated operating system ($os), which defaults to the value of the
$^O variable.  The \f(CW$filename\fR can be either absolute or relative, and
the corresponding type of \s-1URI\s0 object for \f(CW$os\fR is returned.
.Ip "$u = \s-1URI:\s0:file->new_abs( \f(CW$filename\fR, [$os] )" 4
.IX Item "$u = URI::file->new_abs( $filename, [$os] )"
Same as \s-1URI:\s0:file->new, but will make sure that the \s-1URI\s0 returned
represents an absolute file name.  If the \f(CW$filename\fR argument is
relative, then the name is resolved relative to the current directory,
i.e. this constructor is really the same as:
.Sp
.Vb 1
\&  URI::file->new($filename)->abs(URI::file->cwd);
.Ve
.Ip "$u = \s-1URI:\s0:file->cwd" 4
.IX Item "$u = URI::file->cwd"
Returns a \fIfile\fR \s-1URI\s0 that represents the current working directory.
See the Cwd manpage.
.PP
The following methods are supported for \fIfile\fR \s-1URI\s0 (in addition to
the common and generic methods described in the URI manpage):
.Ip "$u->file( [$os] )" 4
.IX Item "$u->file( [$os] )"
This method return a file name.  It maps from the \s-1URI\s0 name space
to the file name space of the indicated operating system.
.Sp
It might return \f(CW\*(C`undef\*(C'\fR if the name can not be represented in the
indicated file system.
.Ip "$u->dir( [$os] )" 4
.IX Item "$u->dir( [$os] )"
Some systems use a different form for names of directories than for plain
files.  Use this method if you know you want to use the name for
a directory.
.PP
The \f(CW\*(C`URI::file\*(C'\fR module can be used to map generic file names to names
suitable for the current system.  As such, it can work as a nice
replacement for the \f(CW\*(C`File::Spec\*(C'\fR module.  For instance the following
code will translate the Unix style file name \fIFoo/Bar.pm\fR to a name
suitable for the local system.
.PP
.Vb 4
\&  $file = URI::file->new("Foo/Bar.pm", "unix")->file;
\&  die "Can't map filename Foo/Bar.pm for $^O" unless defined $file;
\&  open(FILE, $file) || die "Can't open '$file': $!";
\&  # do something with FILE
.Ve
.SH "MAPPING NOTES"
.IX Header "MAPPING NOTES"
Most computer systems today have hierarchically organized file systems.
Mapping the names used in these systems to the generic \s-1URI\s0 syntax
allows us to work with relative file URIs that behave as they should
when resolved using the generic algorithm for URIs (specified in \s-1RFC\s0
2396).  Mapping a file name to the generic \s-1URI\s0 syntax involves mapping
the path separator character to \*(L"/\*(R" and encoding of any reserved
characters that appear in the path segments of the file names.  If
path segments consisting of the strings \*(L".\*(R" or \*(L"..\*(R" have a
different meaning than what is specified for generic URIs, then these
must be encoded as well.
.PP
If the file system has device, volume or drive specifications as
the root of the name space, then it makes sense to map them to the
authority field of the generic \s-1URI\s0 syntax.  This makes sure that
relative \s-1URI\s0 can not be resolved \*(L"above\*(R" them , i.e. generally how
relative file names work in those systems.
.PP
Another common use of the authority field is to encode the host that
this file name is valid on.  The host name \*(L"localhost\*(R" is special and
generally have the same meaning as an missing or empty authority
field.  This use will be in conflict with using it as a device
specification, but can often be resolved for device specifications
having characters not legal in plain host names.
.PP
File name to \s-1URI\s0 mapping in normally not one-to-one.  There are
usually many \s-1URI\s0 that map to the same file name.  For instance an
authority of \*(L"localhost\*(R" maps the same as a \s-1URI\s0 with a missing or empty
authority.
.PP
Example 1: The Mac use \*(L":\*(R" as path separator, but not in the same way
as generic \s-1URI\s0. \*(L":foo\*(R" is a relative name.  \*(L"foo:bar\*(R" is an absolute
name.  Also path segments can contain the \*(L"/\*(R" character as well as be
literal \*(L".\*(R" or \*(L"..\*(R".  It means that we will map like this:
.PP
.Vb 12
\&  Mac                   URI
\&  ----------            -------------------
\&  :foo:bar     <==>     foo/bar
\&  :            <==>     ./
\&  ::foo:bar    <==>     ../foo/bar
\&  :::          <==>     ../../
\&  foo:bar      <==>     file:/foo/bar
\&  foo:bar:     <==>     file:/foo/bar/
\&  ..           <==>     %2E%2E
\&  <undef>      <==      /
\&  foo/         <==      file:/foo%2F
\&  ./foo.txt    <==      file:/.%2Ffoo.txt
.Ve
Note that if you want a relative \s-1URL\s0, you *must* begin the path with a :.  Any
path that begins with [^:] will be treated as absolute.
.PP
Example 2: The Unix file system is easy to map as it use the same path
separator as URIs, have a single root, and segments of \*(L".\*(R" and \*(L"..\*(R"
have the same meaning.  URIs that have the character \*(L"\e0\*(R" or \*(L"/\*(R" as
part of any path segment can not be turned into valid Unix file names.
.PP
.Vb 8
\&  Unix                  URI
\&  ----------            ------------------
\&  foo/bar      <==>     foo/bar
\&  /foo/bar     <==>     file:/foo/bar
\&  /foo/bar     <==      file://localhost/foo/bar
\&  file:         ==>     ./file:
\&  <undef>      <==      file:/fo%00/bar
\&  /            <==>     file:/
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
the URI manpage, the File::Spec manpage, the perlport manpage
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright 1995\-1998 Gisle Aas.
.PP
This library is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
