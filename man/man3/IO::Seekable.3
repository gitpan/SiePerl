.\" Automatically generated by Pod::Man version 1.15
.\" Fri Apr 20 13:08:51 2001
.\"
.\" Standard preamble:
.\" ======================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R

.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used
.\" to do unbreakable dashes and therefore won't be available.  \*(C` and
.\" \*(C' expand to `' in nroff, nothing in troff, for use with C<>
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr
.\" for titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and
.\" index entries marked with X<> in POD.  Of course, you'll have to process
.\" the output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it
.\" makes way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.bd B 3
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ======================================================================
.\"
.IX Title "IO::Seekable 3"
.TH IO::Seekable 3 "perl v5.6.1" "2001-03-03" "Perl Programmers Reference Guide"
.UC
.SH "NAME"
\&\s-1IO:\s0:Seekable \- supply seek based methods for I/O objects
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&    use IO::Seekable;
\&    package IO::Something;
\&    @ISA = qw(IO::Seekable);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\f(CW\*(C`IO::Seekable\*(C'\fR does not have a constructor of its own as it is intended to
be inherited by other \f(CW\*(C`IO::Handle\*(C'\fR based objects. It provides methods
which allow seeking of the file descriptors.
.RS 0
.RE
.Ip "$io->getpos" 4
.IX Item "$io->getpos"
Returns an opaque value that represents the current position of the
\&\s-1IO:\s0:File, or \f(CW\*(C`undef\*(C'\fR if this is not possible (eg an unseekable stream such
as a terminal, pipe or socket). If the \fIfgetpos()\fR function is available in
your C library it is used to implements getpos, else perl emulates getpos
using C's \fIftell()\fR function.
.Ip "$io->setpos" 4
.IX Item "$io->setpos"
Uses the value of a previous getpos call to return to a previously visited
position. Returns \*(L"0 but true\*(R" on success, \f(CW\*(C`undef\*(C'\fR on failure.
.RE
.RS 0
.PP
See the perlfunc manpage for complete descriptions of each of the following
supported \f(CW\*(C`IO::Seekable\*(C'\fR methods, which are just front ends for the
corresponding built-in functions:
.RS 0
.RE
.Ip "$io->setpos ( \s-1POS\s0, \s-1WHENCE\s0 )" 4
.IX Item "$io->setpos ( POS, WHENCE )"
Seek the \s-1IO:\s0:File to position \s-1POS\s0, relative to \s-1WHENCE:\s0
.RS 4
.Ip "WHENCE=0 (\s-1SEEK_SET\s0)" 8
.IX Item "WHENCE=0 (SEEK_SET)"
\&\s-1POS\s0 is absolute position. (Seek relative to the start of the file)
.Ip "WHENCE=1 (\s-1SEEK_CUR\s0)" 8
.IX Item "WHENCE=1 (SEEK_CUR)"
\&\s-1POS\s0 is an offset from the current position. (Seek relative to current)
.Ip "WHENCE=1 (\s-1SEEK_END\s0)" 8
.IX Item "WHENCE=1 (SEEK_END)"
\&\s-1POS\s0 is an offset from the end of the file. (Seek relative to end)
.RE
.RS 4
.Sp
The SEEK_* constants can be imported from the \f(CW\*(C`Fcntl\*(C'\fR module if you
don't wish to use the numbers \f(CW\*(C`0\*(C'\fR \f(CW\*(C`1\*(C'\fR or \f(CW\*(C`2\*(C'\fR in your code.
.Sp
Returns \f(CW\*(C`1\*(C'\fR upon success, \f(CW\*(C`0\*(C'\fR otherwise.
.RE
.Ip "$io->sysseek( \s-1POS\s0, \s-1WHENCE\s0 )" 4
.IX Item "$io->sysseek( POS, WHENCE )"
Similar to \f(CW$io\fR->seek, but sets the \s-1IO:\s0:File's position using the system
call \fIlseek\fR\|(2) directly, so will confuse most perl \s-1IO\s0 operators except
sysread and syswrite (see the perlfunc manpage for full details)
.Sp
Returns the new position, or \f(CW\*(C`undef\*(C'\fR on failure.  A position
of zero is returned as the string \f(CW\*(C`"0 but true"\*(C'\fR
.Ip "$io->tell" 4
.IX Item "$io->tell"
Returns the \s-1IO:\s0:File's current position, or \-1 on error.
.RE
.RS 0
.SH "SEE ALSO"
.IX Header "SEE ALSO"
the perlfunc manpage, 
the I/O Operators entry in the perlop manpage,
the IO::Handle manpage
the IO::File manpage
.SH "HISTORY"
.IX Header "HISTORY"
Derived from FileHandle.pm by Graham Barr <gbarr@pobox.com>
