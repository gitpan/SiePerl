.\" Automatically generated by Pod::Man version 1.15
.\" Mon Apr 23 13:13:52 2001
.\"
.\" Standard preamble:
.\" ======================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R

.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used
.\" to do unbreakable dashes and therefore won't be available.  \*(C` and
.\" \*(C' expand to `' in nroff, nothing in troff, for use with C<>
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr
.\" for titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and
.\" index entries marked with X<> in POD.  Of course, you'll have to process
.\" the output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it
.\" makes way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.bd B 3
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ======================================================================
.\"
.IX Title "Document 3"
.TH Document 3 "perl v5.6.1" "2000-01-14" "User Contributed Perl Documentation"
.UC
.SH "NAME"
\&\s-1RTF:\s0:Document \- Perl extension for generating Rich Text (\s-1RTF\s0) Files 
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\s-1RTF:\s0:Document is a module for generating Rich Text Format (\s-1RTF\s0) documents
that can be used by most text converters and word processors.
.PP
For a listing of properties, consult the \f(CW%DOCINFO\fR and \f(CW%PROPERTIES\fR hashes
in the source code.
.SH "REQUIRED MODULES"
.IX Header "REQUIRED MODULES"
.Vb 3
\&    Carp
\&    POSIX
\&    Convert::Units::Type 0.33
.Ve
.SH "EXAMPLE"
.IX Header "EXAMPLE"
.Vb 1
\&    use RTF::Document;
.Ve
.Vb 1
\&    # Document properties
.Ve
.Vb 6
\&    $rtf = new RTF::Document(
\&      {
\&        doc_page_width => '8.5in',
\&        doc_page_height => '11in'
\&      }
\&    );
.Ve
.Vb 1
\&    # Font definitions
.Ve
.Vb 8
\&    $fAvantGarde = $rtf->add_font ("AvantGarde", 
\&       { family=>swiss,
\&         default=>1
\&       } );
\&    $fCourier = $rtf->add_font ("Courier",
\&      { family=>monospace, pitch=>fixed, 
\&        alternates=>["Courier New", "American Typewriter"] 
\&      } );
.Ve
.Vb 1
\&    # Color definitions
.Ve
.Vb 3
\&    $cRed   = $rtf->add_color ( { red=>255 } );
\&    $cGreen = $rtf->add_color ( { green=>128 } );
\&    $cCustm = $rtf->add_color ( { red=>0x66, blue=>0x33, green=>0x33 } );
.Ve
.Vb 2
\&    $cBlack = $rtf->add_color ( { name=>'black' } );
\&    $cWhite = $rtf->add_color ( { gray=>'100%' } );
.Ve
.Vb 1
\&    $cNavy = $rtf->add_color ( { blue=>'100%', gray=>'50%' } );
.Ve
.Vb 1
\&    # style definitions
.Ve
.Vb 5
\&    $sNormal = $rtf->add_style( "Normal",
\&      { font=>$fAvantGarde, font_size=>'12pt',
\&        color_foreground=>$cBlack },
\&      { type=>paragraph, default=>1 }
\&    );
.Ve
.Vb 4
\&    $sGreen = $rtf->add_style( "Green",
\&      { color_foreground=>$cGreen },
\&      { type=>character, additive=>1 }
\&    );
.Ve
.Vb 1
\&    # Mix any combo of properties and text...
.Ve
.Vb 2
\&    $rtf->add_text( $rtf->root(),
\&       "Default text\en\en",
.Ve
.Vb 2
\&       { bold=>1, underline=>continuous },
\&       "Bold/Underlined Text\en\en",
.Ve
.Vb 3
\&       { font_size=>'20pt', font=>$fCourier,
\&         color_foreground=>$cRed },
\&       "Bigger, Red and Monospaced.\en\en",
.Ve
.Vb 2
\&       { style_default=>paragraph },
\&       { style_default=>character },
.Ve
.Vb 3
\&       "This is ",
\&       [ { style=>$sGreen }, "green" ],
\&       " styled.\en\en"
.Ve
.Vb 1
\&    );
.Ve
.Vb 4
\&    open FILE, ">MyFile.rtf";
\&    binmode FILE;
\&    print FILE $rtf->rtf();
\&    close FILE;
.Ve
.SH "DOCUMENT STRUCTURE"
.IX Header "DOCUMENT STRUCTURE"
For purposes of using this module, a Rich Text (\s-1RTF\s0) Document can be subdivided into
\&\fIgroups\fR. Groups can be considered containers for \fItext\fR and \fIcontrols\fR (controlling
document and text properties).
.PP
For all intents and purposes, a group limits the scope of controls. So if we set
the \*(L"bold\*(R" character property within a group, the text will be bold only within
that group (until it is turned off within that group).
.PP
When generating a \s-1RTF\s0 document using this module, we are only concerned with the
\&\fIroot\fR group (also called the \*(L"Document Area\*(R"). (The \*(L"Header\*(R" groups are taken
care of automatically by this module.)
.PP
The Document Area is subdivided into \fIsections\fR. Each section is subdivided into
\&\fIparagraphs\fR.
.SH "METHODS"
.IX Header "METHODS"
Some of the methods are documented below. (Methods not documented here may
be changed in future versions.)
.Sh "new"
.IX Subsection "new"
.Vb 1
\&    $rtf = new RTF::Document( \e%DocumentProperties );
.Ve
Creates a new \s-1RTF\s0 document object.
.Sh "root"
.IX Subsection "root"
.Vb 1
\&    $gRoot = $rtf->root();
.Ve
Returns the \*(L"root\*(R" group in the \s-1RTF\s0 document.
.Sh "new_group"
.IX Subsection "new_group"
.Vb 1
\&    $gMyGroup = $rtf->new_group();
.Ve
Creates a new group (not inside of the \s-1RTF\s0 document).
.Sh "add_group"
.IX Subsection "add_group"
.Vb 2
\&    $gChildOfRoot = $rtf->add_group();
\&    $gChildOfChild = $rtf->add_group( $gChild );
.Ve
Adds a child group to the specfied group. If no group is specified, the \*(L"root\*(R"
group is assumed.
.PP
.Vb 1
\&    $rtf->add_group( $rtf->root(), $gMyGroup );
.Ve
Adds a group to the specified parent group (in this case, the root group).
.Sh "add_raw"
.IX Subsection "add_raw"
.Vb 1
\&    $rtf->add_raw( $group, '\epar', "Some Text" );
.Ve
Adds raw controls and text to the group. This method is intended for internal
use only.
.Sh "add_text"
.IX Subsection "add_text"
.Vb 1
\&    $rtf->add_text( $group, "Some text ", { bold=>1 }, "more text" );
.Ve
Adds text and controls to a group. Text is escaped.
.Sh "add_font"
.IX Subsection "add_font"
.Sh "add_color"
.IX Subsection "add_color"
.Sh "add_style"
.IX Subsection "add_style"
.SH "PROPERTIES"
.IX Header "PROPERTIES"
.Sh "Document Properties"
.IX Subsection "Document Properties"
.Sh "Section Properties"
.IX Subsection "Section Properties"
.Sh "Paragraph Properties"
.IX Subsection "Paragraph Properties"
.Sh "Character Properties"
.IX Subsection "Character Properties"
.SH "KNOWN ISSUES"
.IX Header "KNOWN ISSUES"
This module should be considered in the \*(L"alpha\*(R" stage. Use at your own risk.
.PP
There are no default document or style properties produced by this module,
with the exception of the character set. If you want to make sure that a
\&\fIspecific\fR font, color, or style is used, you must specify it. Otherwise
you rely on the assumptions of whatever \s-1RTF\s0 reader someone is using.
.PP
This module does not insert newlines anywhere in the text, even though some
\&\s-1RTF\s0 writers break lines before they exceed 225 characters.  This may or may
not be an issue with some reader software.
.PP
Unknown font or style properties will generally be ignored without warning.
.PP
This module supports some newer \s-1RTF\s0 controls (used in Word 95/Word 97) that
may are not understood by older \s-1RTF\s0 readers.
.PP
Once a Font, Color or Style is added, it cannot be changed. No checking
for redundant entries is done.
.PP
Generally, it is not possible to reference a not-yet-created Style with the
next or basedon attributes. However, you can use the constances \*(L"last\*(R",
\&\*(L"self\*(R" or \*(L"next\*(R" to reference the last style added, the current style
being added, or the next style that will be added, respectively.
.PP
Specifying properties in a particular order within a group does not
guarantee that they will be emitted in that order. If order matters,
specify them separetly. For instance,
.PP
.Vb 1
\&    $rtf->add_text($rtf->root, { style_default=>character, bold=>1 } );
.Ve
should be (if you want to ensure character styles are reset before setting
bold text):
.PP
.Vb 1
\&    $rtf->add_text($rtf->root, { style_default=>character }, { bold=>1 } );
.Ve
Also note that duplicate properties within the same group won't work. i.e.,
If you want to set \*(L"style_default\*(R" for both paragraphs and characters, you
must do so in separate groups.
.PP
This isn't so much as a bug as the way Perl handles hashes.
.Sh "Unimplemented Features"
.IX Subsection "Unimplemented Features"
A rather large number of features and control words are not handled in this
version. Among the major features:
.Ip "Annotations and Comments" 4
.IX Item "Annotations and Comments"
.PD 0
.Ip "Bookmarks" 4
.IX Item "Bookmarks"
.Ip "Bullets and Paragraph Numbering" 4
.IX Item "Bullets and Paragraph Numbering"
.PD
Some support has been added. The backwards-compatability controls for numbered
paragraphs used by older readers has not been added because it is not properly
handled by newer readers.
.Ip "Character Sets and Internationalization" 4
.IX Item "Character Sets and Internationalization"
Non-\*(L"\s-1ANSI\s0\*(R" character sets (i.e., Macintosh) and Unicode character
sets are not supported (at least not intentionally). There is no
support for Asian character sets in this version of the module.
.Sp
Unicode character escapes are not implemented.
.Sp
Language codes (defining a default language, or a language for a
group of characters) are not implemented.
.Sp
Bi-directional and text-flow controls are not implemented.
.Ip "Embedded Images and \s-1OLE\s0 Objects" 4
.IX Item "Embedded Images and OLE Objects"
.PD 0
.Ip "File Tables" 4
.IX Item "File Tables"
.Ip "Footnotes and Endnotes" 4
.IX Item "Footnotes and Endnotes"
.Ip "Forms" 4
.IX Item "Forms"
.Ip "Headers and Footers" 4
.IX Item "Headers and Footers"
.Ip "Hyphenation Control" 4
.IX Item "Hyphenation Control"
.PD
Some minimal controls have been added.
.Ip "Lists and List Tables" 4
.IX Item "Lists and List Tables"
Not implemented: List Tables are really a kind of style sheet for lists.
Priority will be given to support generic bullets and paragraph numbering.
.Ip "Page Numbering" 4
.IX Item "Page Numbering"
Minimal definition, untested.
.Ip "Printer Bin Controls" 4
.IX Item "Printer Bin Controls"
.PD 0
.Ip "Revision Tables" 4
.IX Item "Revision Tables"
.Ip "Special Characters and Document Variables" 4
.IX Item "Special Characters and Document Variables"
.PD
Most special characters not not implemented, with the exception of tabs. Double
newline characters are converted to a new paragraph control, and single newlines
are converted to a new line control.
.Ip "Tabs" 4
.IX Item "Tabs"
.PD 0
.Ip "Tables and Frames" 4
.IX Item "Tables and Frames"
.PD
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Microsoft Technical Support and Application Note, \*(L"Rich Text Format (\s-1RTF\s0)
Specification and Sample Reader Program\*(R", Version 1.5.
.PP
\&\fIConvert::Units::Type\fR.
.SH "AUTHOR"
.IX Header "AUTHOR"
Robert Rothenberg <wlkngowl@unix.asb.com>
.SH "LICENSE"
.IX Header "LICENSE"
Copyright (c) 1999\-2000 Robert Rothenberg. All rights reserved.
This program is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
