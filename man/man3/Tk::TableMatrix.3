.\" Automatically generated by Pod::Man version 1.15
.\" Mon Apr 23 07:59:19 2001
.\"
.\" Standard preamble:
.\" ======================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R

.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used
.\" to do unbreakable dashes and therefore won't be available.  \*(C` and
.\" \*(C' expand to `' in nroff, nothing in troff, for use with C<>
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr
.\" for titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and
.\" index entries marked with X<> in POD.  Of course, you'll have to process
.\" the output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it
.\" makes way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.bd B 3
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ======================================================================
.\"
.IX Title "TABLEMATRIX 1"
.TH TABLEMATRIX 1 "perl v5.6.1" "2000-08-23" "User Contributed Perl Documentation"
.UC
.SH "NAME"
TableMatrix \- Create and manipulate tables  
.SH "Synopsis"
.IX Header "Synopsis"
\&\fI$table\fR = \fI$parent\fR->\fBTableMatrix\fR(?\fIoptions\fR?);
.SH "STANDARD OPTIONS"
.IX Header "STANDARD OPTIONS"
\&\fB\-anchor  \-background  \-cursor 
   \-exportselection  \-font  \-foreground    \-highlightbackground  \-highlightcolor 
 \-highlightthickness    \-insertbackground  \-insertborderwidth  \-insertofftime 
   \-insertontime  \-insertwidth  \-invertselected  \-padx    \-pady  \-relief  \-takefocus 
 \-xscrollcommand    \-yscrollcommand\fR
.SH "Widget-specific Options"
.IX Header "Widget-specific Options"
.Ip "Switch: \fB\-autoclear\fR" 1
.IX Item "Switch: -autoclear"
.PD 0
.Ip "Name: \fBautoClear\fR" 1
.IX Item "Name: autoClear"
.Ip "Class: \fBAutoClear\fR" 1
.IX Item "Class: AutoClear"
.PD
A boolean value which specifies whether the first keypress in a cell will 
delete whatever text was previously there.  Defaults to 0.
.Ip "Switch:  \fB\-bordercursor\fR" 1
.IX Item "Switch:  -bordercursor"
.PD 0
.Ip "Name: \fBborderCursor\fR" 1
.IX Item "Name: borderCursor"
.Ip "Class: \fBCursor\fR" 1
.IX Item "Class: Cursor"
.PD
Specifies the name of the cursor to show when over borders, a visual 
indication that interactive resizing is allowed (it is thus affect by 
the value of \-resizeborders).  Defaults to \fIcrosshair \fR.  
.Ip "Switch: \fB\-borderwidth or \-bd\fR" 1
.IX Item "Switch: -borderwidth or -bd"
.PD 0
.Ip "Name: \fBborderWidth\fR" 1
.IX Item "Name: borderWidth"
.Ip "Class: \fBBorderWidth\fR" 1
.IX Item "Class: BorderWidth"
.PD
Specifies a non-negative value indicating the width of the 3\-D border to 
draw on interior table cells (if such a border is being drawn; the \fBrelief 
\&\fR option typically determines this).  This can be overridden by the a tag's 
borderwidth option.  It can also be affected by the defined \fB\-drawmode\fR for 
the table.  The value may have any of the forms acceptable to \fBTk_GetPixels\fR. 
.Ip "Switch: \fB\-browsecommand or \-browsecmd\fR" 1
.IX Item "Switch: -browsecommand or -browsecmd"
.PD 0
.Ip "Name: \fBbrowseCommand\fR" 1
.IX Item "Name: browseCommand"
.Ip "Class: \fBBrowseCommand\fR" 1
.IX Item "Class: BrowseCommand"
.PD
Specifies a command (callback) which will be evaluated 
anytime the active cell changes. The Previous Index and the Current index is passed to this
command as arguments.
.Ip "Switch: \fB\-cache\fR" 1
.IX Item "Switch: -cache"
.PD 0
.Ip "Name: \fBcache\fR" 1
.IX Item "Name: cache"
.Ip "Class: \fBCache\fR" 1
.IX Item "Class: Cache"
.PD
A boolean value that specifies whether an 
internal cache of the table contents should be kept.  This greatly enhances 
speed performance when used with \fB\-command \fR but uses extra memory.  Can maintain 
state when both \fB\-command \fR and \fB\-variable \fR are empty.  The cache is automatically 
flushed whenever the value of \fB\-cache \fR or \fB\-variable \fR changes, otherwise you 
have to explicitly \fBflush \fR it.  Defaults to false.
.Ip "Switch: \fB\-colorigin\fR" 1
.IX Item "Switch: -colorigin"
.PD 0
.Ip "Name: \fBcolOrigin\fR" 1
.IX Item "Name: colOrigin"
.Ip "Class: \fBOrigin\fR" 1
.IX Item "Class: Origin"
.PD
Specifies what column 
index to interpret as the leftmost column in the table. This value is used 
for user indices in the table.  Defaults to 0.  
.Ip "Switch: \fB\-cols\fR" 1
.IX Item "Switch: -cols"
.PD 0
.Ip "Name: \fBcols\fR" 1
.IX Item "Name: cols"
.Ip "Class: \fBCols\fR" 1
.IX Item "Class: Cols"
.PD
Number of cols in the table.  Defaults 
to 10.  
.Ip "Switch: \fB\-colseparator\fR" 1
.IX Item "Switch: -colseparator"
.PD 0
.Ip "Name: \fBcolSeparator\fR" 1
.IX Item "Name: colSeparator"
.Ip "Class: \fBSeparator\fR" 1
.IX Item "Class: Separator"
.PD
Specifies a separator character that will be interpreted 
as the column separator when cutting or pasting data in a table.  By default, 
columns are separated as elements of a tcl list.  
.Ip "Switch: \fB\-colstretchmode\fR" 1
.IX Item "Switch: -colstretchmode"
.PD 0
.Ip "Name: \fBcolStretchMode\fR" 1
.IX Item "Name: colStretchMode"
.Ip "Class: \fBStretchMode\fR" 1
.IX Item "Class: StretchMode"
.PD
Specifies one 
of the following stretch modes for columns to fill extra allocated window 
space:  
.Ip "\fBnone \fR" 2
.IX Item "none "
Columns will not stretch to fill the assigned window space. 
If the columns are too narrow, there will be a blank space at the right 
of the table.  This is the default. 
.Ip "\fBunset \fR" 2
.IX Item "unset "
Only columns that do not have 
a specific width set will be stretched.
.Ip "\fBall \fR" 2
.IX Item "all "
All columns will be stretched 
by the same number of pixels to fill the window space allocated to the 
table.  This mode can interfere with interactive border resizing which 
tries to force column width. 
.Ip "\fBlast \fR" 2
.IX Item "last "
The last column will be stretched  
to fill the window space allocated to the table. 
.Ip "\fBfill \fR" 2
.IX Item "fill "
(only valid for 
\&\fB\-rowstretch \fR currently)  
.Sp
The table will get more or less columns according 
to the window space allocated to the table.  This mode has numerous quirks 
and may disappear in the future.
.Ip "Switch: \fB\-coltagcommand\fR" 1
.IX Item "Switch: -coltagcommand"
.PD 0
.Ip "Name: \fBcolTagCommand\fR" 1
.IX Item "Name: colTagCommand"
.Ip "Class: \fBTagCommand\fR" 1
.IX Item "Class: TagCommand"
.PD
Provides the name of a 
procedure that will be evaluated by the widget to determine the tag to 
be used for a given column.  When displaying a cell, the table widget will 
first check to see if a tag has been defined using the \fBtag col \fR widget 
method.  If no tag is found, it will evaluate the named procedure passing 
the column number in question as the sole argument.  The procedure is expected 
to return the name of a tag to use, or a null string. Errors occuring during 
the evaluation of the procedure, or the return of an invalid tag name 
are silently ignored.
.Sp
The Current column number is passed as an argument to the col command.
.Ip "Switch: \fB\-colwidth\fR" 1
.IX Item "Switch: -colwidth"
.PD 0
.Ip "Name: \fBcolWidth\fR" 1
.IX Item "Name: colWidth"
.Ip "Class: \fBColWidth\fR" 1
.IX Item "Class: ColWidth"
.PD
Default column width, interpreted as characters 
in the default font when the number is positive, or pixels if it is negative. 
Defaults to 10.
.Ip "Switch: \fB\-command\fR" 1
.IX Item "Switch: -command"
.PD 0
.Ip "Name: \fBcommand\fR" 1
.IX Item "Name: command"
.Ip "Class: \fBCommand\fR" 1
.IX Item "Class: Command"
.PD
Specified a command to use as a procedural interface to 
cell values. If \fB\-usecommand \fR is true, this command will be used instead 
of any reference to the \fB\-variable \fR array.  When retrieving cell values, 
the return value of the command is used as the value for the cell. 
.Sp
Args passed to this callback: The Set Flag (=1 if setting, else retrieving), the current row, 
the current col, the cell value (if setting).
.Ip "Switch: \fB\-drawmode\fR" 1
.IX Item "Switch: -drawmode"
.PD 0
.Ip "Name: \fBdrawMode\fR" 1
.IX Item "Name: drawMode"
.Ip "Class: \fBDrawMode\fR" 1
.IX Item "Class: DrawMode"
.PD
Sets 
the table drawing mode to one of the following options:
.Ip "\fBslow \fR" 2
.IX Item "slow "
The table 
is drawn to an offscreen pixmap using the Tk bordering functions (double-buffering). 
This means there will be no flashing, but this mode is slow for larger 
tables.
.Ip "\fBcompatible \fR" 2
.IX Item "compatible "
The table is drawn directly to the screen using the 
Tk border functions. It is faster, but the screen may flash on update.  
This is the default. 
.Ip "\fBfast \fR" 2
.IX Item "fast "
The table is drawn directly to the screen and 
the borders are done with fast X calls, so they are always one pixel wide 
only.  As a side effect, it restricts \fB\-borderwidth \fR to a range of 0 or 1. 
This mode provides best performance for large tables, but can flash on 
redraw and is not 100% Tk compatible on the border mode. 
.Ip "\fBsingle \fR" 2
.IX Item "single "
The table 
is drawn to the screen as in fast mode, but only single pixel lines are 
drawn (not square borders).   
.Ip "Switch: \fB\-flashmode\fR" 1
.IX Item "Switch: -flashmode"
.PD 0
.Ip "Name: \fBflashMode\fR" 1
.IX Item "Name: flashMode"
.Ip "Class: \fBFlashMode\fR" 1
.IX Item "Class: FlashMode"
.PD
A boolean value which specifies whether 
cells should flash when their value changes.  The table tag \fBflash \fR will 
be applied to these cells for the duration specified by \fB\-flashtime \fR.  Defaults 
to 0.
.Ip "Switch: \fB\-flashtime\fR" 1
.IX Item "Switch: -flashtime"
.PD 0
.Ip "Name: \fBflashTime\fR" 1
.IX Item "Name: flashTime"
.Ip "Class: \fBFlashTime\fR" 1
.IX Item "Class: FlashTime"
.PD
The amount of time, in 1/4 second increments, for which a cell 
should flash when its value has changed.  \fB\-flashmode \fR must be on.  Defaults 
to 2. 
.Ip "Switch: \fB\-height\fR" 1
.IX Item "Switch: -height"
.PD 0
.Ip "Name: \fBheight\fR" 1
.IX Item "Name: height"
.Ip "Class: \fBHeight\fR" 1
.IX Item "Class: Height"
.PD
Specifies the desired height for the window, in rows. If zero or less, 
then the desired height for the window is made just large enough to hold 
all the rows in the table.  The height can be further limited by \fB\-maxheight 
\&\fR.  
.Ip "Switch: \fB\-invertselected\fR" 1
.IX Item "Switch: -invertselected"
.PD 0
.Ip "Name: \fBinvertSelected\fR" 1
.IX Item "Name: invertSelected"
.Ip "Class: \fBInvertSelected\fR" 1
.IX Item "Class: InvertSelected"
.PD
Specifies whether the foreground and background 
of an item should simply have their values swapped instead of merging 
the \fIsel \fR tag options when the cell is selected.  Defaults to 0 (merge). 
.Ip "Switch: \fB\-maxheight\fR" 1
.IX Item "Switch: -maxheight"
.PD 0
.Ip "Name: \fBmaxHeight\fR" 1
.IX Item "Name: maxHeight"
.Ip "Class: \fBMaxHeight\fR" 1
.IX Item "Class: MaxHeight"
.PD
The max height in pixels that the window will request.  Defaults 
to 600.  
.Ip "Switch: \fB\-maxwidth\fR" 1
.IX Item "Switch: -maxwidth"
.PD 0
.Ip "Name: \fBmaxWidth\fR" 1
.IX Item "Name: maxWidth"
.Ip "Class: \fBMaxWidth\fR" 1
.IX Item "Class: MaxWidth"
.PD
The max width in pixels that the window will request.  Defaults 
to 800.  
.Ip "Switch: \fB\-multiline\fR" 1
.IX Item "Switch: -multiline"
.PD 0
.Ip "Name: \fBmultiline\fR" 1
.IX Item "Name: multiline"
.Ip "Class: \fBMultiline\fR" 1
.IX Item "Class: Multiline"
.PD
Specifies the default setting for the multiline tag 
option.  Defaults to 1.  
.Ip "Switch: \fB\-resizeborders\fR" 1
.IX Item "Switch: -resizeborders"
.PD 0
.Ip "Name: \fBresizeBorders\fR" 1
.IX Item "Name: resizeBorders"
.Ip "Class: \fBResizeBorders\fR" 1
.IX Item "Class: ResizeBorders"
.PD
Specifies what kind of interactive 
border resizing to allow, must be one of row, col, both (default) or none. 
.Ip "Switch: \fB\-rowheight\fR" 1
.IX Item "Switch: -rowheight"
.PD 0
.Ip "Name: \fBrowHeight\fR" 1
.IX Item "Name: rowHeight"
.Ip "Class:" 1
.IX Item "Class:"
.PD
\&\fBRowHeight\fR  Default row height, interpreted as lines in the default font 
when the number is positive, or pixels if it is negative.  Defaults to 
1.  
.Ip "Switch: \fB\-roworigin\fR" 1
.IX Item "Switch: -roworigin"
.PD 0
.Ip "Name: \fBrowOrigin\fR" 1
.IX Item "Name: rowOrigin"
.Ip "Class: \fBOrigin\fR" 1
.IX Item "Class: Origin"
.PD
Specifies what row index to interpret as the topmost row in the 
table. This value is used for user indices in the table.  Defaults to 0. 
.Ip "Switch: \fB\-rows\fR" 1
.IX Item "Switch: -rows"
.PD 0
.Ip "Name: \fBrows\fR" 1
.IX Item "Name: rows"
.Ip "Class: \fBRows\fR" 1
.IX Item "Class: Rows"
.PD
Number 
of rows in the table.  Defaults to 10.  
.Ip "Switch: \fB\-rowseparator\fR" 1
.IX Item "Switch: -rowseparator"
.PD 0
.Ip "Name: \fBrowSeparator\fR" 1
.IX Item "Name: rowSeparator"
.Ip "Class: \fBSeparator\fR" 1
.IX Item "Class: Separator"
.PD
Specifies a separator character 
that will be interpreted as the row separator when cutting or pasting 
data in a table.  By default, rows are separated as tcl lists.
.Ip "Switch: \fB\-rowstretchmode\fR" 1
.IX Item "Switch: -rowstretchmode"
.PD 0
.Ip "Name: \fBrowStretchMode\fR" 1
.IX Item "Name: rowStretchMode"
.Ip "Class: \fBStretchMode\fR" 1
.IX Item "Class: StretchMode"
.PD
Specifies the stretch modes for rows to fill extra allocated window space. 
See \fB\-colstretchmode \fR for valid options.  
.Ip "Switch: \fB\-rowtagcommand\fR" 1
.IX Item "Switch: -rowtagcommand"
.PD 0
.Ip "Name: \fBrowTagCommand\fR" 1
.IX Item "Name: rowTagCommand"
.Ip "Class: \fBTagCommand\fR" 1
.IX Item "Class: TagCommand"
.PD
Provides the 
name of a procedure that can evaluated by the widget to determine the 
tag to be used for a given row.  The procedure must be defined by the user 
to accept a single argument (the row number), and return a tag name or 
null string.  This operates in a similar manner as \fB\-coltagcommand \fR, except 
that it applies to row tags. 
.Sp
The Current row number is passed as an argument to the row command.
.Ip "Switch: \fB\-selectioncommand or \-selcmd\fR" 1
.IX Item "Switch: -selectioncommand or -selcmd"
.PD 0
.Ip "Name: \fBselectionCommand\fR" 1
.IX Item "Name: selectionCommand"
.Ip "Class: \fBSelectionCommand\fR" 1
.IX Item "Class: SelectionCommand"
.PD
Specifies 
a command (callback) to evaluate when the selection is retrieved from a table via 
the selection mechanism (ie: evaluating "\fBselection get \fR"). The return value 
from this command will become the string passed on by the selection mechanism. 
The following arguments are passed to this callback: The number of rows in the 
selection, number of columns in the selection, the selection string, the number
of cell in the selection.
.Ip "Switch: \fB\-selectmode\fR" 1
.IX Item "Switch: -selectmode"
.PD 0
.Ip "Name: \fBselectMode\fR" 1
.IX Item "Name: selectMode"
.Ip "Class: \fBSelectMode\fR" 1
.IX Item "Class: SelectMode"
.PD
Specifies one of several styles for manipulating the 
selection.  The value of the option may be arbitrary, but the default bindings 
expect it to be either \fBsingle \fR, \fBbrowse \fR, \fBmultiple \fR, or \fBextended \fR; the 
default value is \fBbrowse \fR.  These styles are like those for the Tk listbox, 
except expanded for 2 dimensions.  
.Ip "Switch: \fB\-selecttitle\fR" 1
.IX Item "Switch: -selecttitle"
.PD 0
.Ip "Name: \fBselectTitles\fR" 1
.IX Item "Name: selectTitles"
.Ip "Class: \fBSelectTitles\fR" 1
.IX Item "Class: SelectTitles"
.PD
Specifies whether title 
cells should be allowed in the selection. Defaults to 0 (disallowed).  
.Ip "Switch: \fB\-selecttype\fR" 1
.IX Item "Switch: -selecttype"
.PD 0
.Ip "Name: \fBselectType\fR" 1
.IX Item "Name: selectType"
.Ip "Class: \fBSelectType\fR" 1
.IX Item "Class: SelectType"
.PD
Specifies one of several types of selection for the table.  The value 
of the option may be one of \fBrow \fR, \fBcol \fR, \fBcell \fR, or \fBboth \fR (meaning \fBrow && 
col \fR); the default value is \fBcell \fR.  These types define whether an entire 
row/col is affected when a cell's selection is changed (set or clear).  
.Ip "Switch: \fB\-sparsearray\fR" 1
.IX Item "Switch: -sparsearray"
.PD 0
.Ip "Name: \fBsparseArray\fR" 1
.IX Item "Name: sparseArray"
.Ip "Class: \fBSparseArray\fR" 1
.IX Item "Class: SparseArray"
.PD
A boolean value that specifies whether an associated Tcl 
array should be kept as a sparse array (1, the default) or as a full array 
(0).  If true, then cell values that are empty will be deleted from the 
array (taking less memory).  If false, then all values in the array will 
be maintained.  
.Ip "Switch: \fB\-state\fR" 1
.IX Item "Switch: -state"
.PD 0
.Ip "Name: \fBstate\fR" 1
.IX Item "Name: state"
.Ip "Class: \fBState\fR" 1
.IX Item "Class: State"
.PD
Specifies one of two states for the entry:  \fBnormal \fR or \fBdisabled\fR.
If the table is disabled then the value may not be changed using widget 
commands and no insertion cursor will be displayed, even if the input 
focus is in the widget.  Also, all insert or delete methods will be ignored. 
Defaults to \fBnormal \fR.  
.Ip "Switch: \fB\-titlecols\fR" 1
.IX Item "Switch: -titlecols"
.PD 0
.Ip "Name: \fBtitleCols\fR" 1
.IX Item "Name: titleCols"
.Ip "Class: \fBTitleCols\fR" 1
.IX Item "Class: TitleCols"
.PD
Number of columns to use as a title area.  Defaults 
to 0.  
.Ip "Switch: \fB\-titlerows\fR" 1
.IX Item "Switch: -titlerows"
.PD 0
.Ip "Name: \fBtitleRows\fR" 1
.IX Item "Name: titleRows"
.Ip "Class: \fBTitleRows\fR" 1
.IX Item "Class: TitleRows"
.PD
Number of rows to use as a title area.  Defaults to 0. 
.Ip "Switch: \fB\-usecommand\fR" 1
.IX Item "Switch: -usecommand"
.PD 0
.Ip "Name: \fBuseCommand\fR" 1
.IX Item "Name: useCommand"
.Ip "Class: \fBUseCommand\fR" 1
.IX Item "Class: UseCommand"
.PD
A boolean value which specifies whether to use the \fBcommand \fR option. This 
value sets itself to zero if \fBcommand \fR is used and returns an error. Defaults 
to 1 (will use \fBcommand \fR if specified).  
.Ip "Switch: \fB\-validate\fR" 1
.IX Item "Switch: -validate"
.PD 0
.Ip "Name: \fBvalidate\fR" 1
.IX Item "Name: validate"
.Ip "Class: \fBValidate\fR" 1
.IX Item "Class: Validate"
.PD
A boolean specifying whether 
validation should occur for the active buffer. Defaults to 0.  
.Ip "Switch: \fB\-validatecommand or \-vcmd\fR" 1
.IX Item "Switch: -validatecommand or -vcmd"
.PD 0
.Ip "Name: \fBvalidateCommand\fR" 1
.IX Item "Name: validateCommand"
.Ip "Class: \fBValidateCommand\fR" 1
.IX Item "Class: ValidateCommand"
.PD
Specifies a command (callback) to execute when the active 
cell is edited.  This command is expected to return a 1 or 0.  If it 
returns 1, then it is assumed the new value is \s-1OK\s0, otherwise the new 
value is rejected (the edition will not take place).  Errors in this command 
are handled in the background. The following arguments are supplied to the callback:
row, col, oldContents of cell, potential new contents of cell, Current Index in the cell.
.Ip "Switch: \fB\-variable\fR" 1
.IX Item "Switch: -variable"
.PD 0
.Ip "Name: \fBvariable\fR" 1
.IX Item "Name: variable"
.Ip "Class: \fBVariable\fR" 1
.IX Item "Class: Variable"
.PD
Global Tcl array variable to attach 
to the table's C array.  It will be created if it doesn't already exist or 
is a simple variable.  Keys used by the table in the array are of the form 
\&\fIrow \fR,\fIcol \fR for cells and the special key \fIactive \fR which contains the value 
of the active cell buffer.  The Tcl array is managed as a sparse array 
(the table doesn't require all valid indices have values).  No stored value 
for an index is equivalent to the empty string, and clearing a cell will 
remove that index from the Tcl array, unless the \fB\-sparsearray \fR options 
is set to 0.  
.Ip "Switch: \fB\-width\fR" 1
.IX Item "Switch: -width"
.PD 0
.Ip "Name: \fBwidth\fR" 1
.IX Item "Name: width"
.Ip "Class: \fBWidth\fR" 1
.IX Item "Class: Width"
.PD
Specifies the desired width for the window, in columns. If zero 
or less, then the desired width for the window is made just large enough 
to hold all the columns in the table.  The width can be further limited 
by \fB\-maxwidth \fR.  
.Ip "Switch: \fB\-wrap\fR" 1
.IX Item "Switch: -wrap"
.PD 0
.Ip "Name: \fBwrap\fR" 1
.IX Item "Name: wrap"
.Ip "Class: \fBWrap\fR" 1
.IX Item "Class: Wrap"
.PD
Specifies the default wrap value for tags.  Defaults to 0.  
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The \fBTableMatrix \fR command creates a 2\-dimensional grid of cells.  The table can 
use a Tcl array variable or Tcl command for data storage and retrieval. 
The widget has an active cell, the contents of which can be edited (when 
the state is normal).  The widget supports a default style for the cells 
and also multiple \fItags \fR, which can be used to change the style of a row, 
column or cell (see \s-1TAGS\s0 for details).  A cell \fIflash \fR can be set up so 
that changed cells will change color for a specified amount of time (\*(L"blink\*(R"). 
 Cells can have embedded images or windows, as described in the Tags manpage and the Embedded Windows entry elsewhere in this document respectively. 
.PP
One or more cells may be selected as described below. 
 If a table is exporting its selection (see \fB\-exportselection \fR option), 
then it will observe the standard X11 protocols for handling the selection. 
 See the the Selection entry elsewhere in this document for details. It is not necessary for all the cells to 
be displayed in the table window at once; commands described below may 
be used to change the view in the window. Tables allow scrolling in both 
directions using the standard \fB\-xscrollcommand \fR and \fB\-yscrollcommand \fR options. 
 They also support scanning, as described below. 
.PP
In order to obtain good 
performance, the table widget supports multiple drawing modes, two of 
which are fully Tk compatible.  
.SH "Indices"
.IX Header "Indices"
Many of the widget commands for tables take one or 
more indices as arguments. An index specifies a particular cell of the 
table, in any of the following ways: 
.Ip "\fInumber,number \fR" 1
.IX Item "number,number "
Specifies the cell 
as a numerical index of row,col which corresponds to the index of the 
associated Tcl array, where \fB\-roworigin,\-colorigin \fR corresponds to the first 
cell in the table (0,0 by default). 
.Ip "\fBactive \fR" 1
.IX Item "active "
Indicates the cell that has 
the location cursor. It is specified with the \fBactivate \fR widget command. 
.Ip "\fBanchor \fR" 1
.IX Item "anchor "
Indicates the anchor point for the selection, which is set with 
the \fBselection anchor \fR widget command. 
.Ip "\fBbottomright \fR" 1
.IX Item "bottomright "
Indicates the bottom-rightmost 
cell visible in the table. 
.Ip "\fBend \fR" 1
.IX Item "end "
Indicates the bottom right cell of the 
table. 
.Ip "\fBorigin \fR" 1
.IX Item "origin "
Indicates the top-leftmost editable cell of the table, not 
necessarily in the display.  This takes into account the user specified 
origin and title area. 
.Ip "\fBtopleft \fR" 1
.IX Item "topleft "
Indicates the top-leftmost editable cell 
visible in the table (this excludes title cells). 
.Ip "\fB@x,y\fR" 1
.IX Item "@x,y"
Indicates the 
cell that covers the point in the table window specified by \fIx \fR and \fIy \fR 
(in pixel coordinates).  If no cell covers that point, then the closest 
cell to that point is used. In the widget command descriptions below, arguments 
named \fIindex \fR, \fIfirst \fR, and \fIlast \fR always contain text indices in one of 
the above forms.  
.SH "Tags"
.IX Header "Tags"
A tag is a textual string that is associated with 
zero or more rows, columns or cells in a table.  Tags may contain arbitrary 
characters, but it is probably best to avoid using names which look like 
indices.  There may be any number of tags associated with rows, columns 
or cells in a table.  There are several permanent tags in each table that 
can be configured by the user and will determine the attributes for special 
cells:  
.Ip "\fBactive \fR" 1
.IX Item "active "
This tag is given to the \fIactive \fR cell 
.Ip "\fBflash \fR" 1
.IX Item "flash "
If flash 
mode is on, this tag is given to any recently edited cells. 
.Ip "\fBsel \fR" 1
.IX Item "sel "
This 
tag is given to any selected cells. 
.Ip "\fBtitle \fR" 1
.IX Item "title "
This tag is given to any cells 
in the title rows and columns.  This tag has \fB\-state \fR \fIdisabled \fR by default. 
.PP
Tags control the way cells are displayed on the screen.  Where appropriate, 
the default for displaying cells is determined by the options for the 
table widget.  However, display options may be associated with individual 
tags using the the tagConfigure manpage method.  If a cell has been 
tagged, then the display options associated with the tag override the 
default display style.  The following options are currently supported for 
tags:  
.Ip "\fB\-anchor\fR \fIanchor\fR" 1
.IX Item "-anchor anchor"
Anchor for item in the cell space. 
.Ip "\fB\-background \fR or \fB\-bg \fR \fIcolor \fR" 1
.IX Item "-background  or -bg  color "
Background color of the cell. 
.Ip "\fB\-borderwidth \fR or \fB\-bd \fR \fIpixels \fR" 1
.IX Item "-borderwidth  or -bd  pixels "
Borderwidth of the cell. 
.Ip "\fB\-font\fR \fIfontName \fR" 1
.IX Item "-font fontName "
Font for text in the cell. 
.Ip "\fB\-foreground\fR or \fB\-fg \fR \fIcolor \fR" 1
.IX Item "-foreground or -fg  color "
Foreground color of the cell. 
.Ip "\fB\-justify\fR \fIjustify \fR" 1
.IX Item "-justify justify "
How to 
justify multi-line text in a cell. It must be one of \fBleft \fR, \fBright \fR, or \fBcenter\fR. 
.Ip "\fB\-image\fR \fIimageName \fR" 1
.IX Item "-image imageName "
An image to display in the cell instead of text. 
.Ip "\fB\-multiline\fR \fIboolean \fR" 1
.IX Item "-multiline boolean "
Whether to display text with newlines on multiple lines. 
.Ip "\fB\-relief\fR" 1
.IX Item "-relief"
The relief for the cell. 
.Ip "\fB\-showtext\fR \fIboolean\fR" 1
.IX Item "-showtext boolean"
Whether to show the 
text over an image.  This does not currently work on Windows or Mac for 
all cases due to the lack of clipping support in Tk's X emulation (patch 
submitted). 
.Ip "\fB\-state\fR \fIstate\fR" 1
.IX Item "-state state"
The state of the cell, to allow for certain cells 
to be disabled. This prevents the cell from being edited by the \fIinsert 
\&\fR or \fIdelete \fR methods, but a direct \fIset \fR will not be prevented. 
.Ip "\fB\-wrap\fR \fIboolean\fR" 1
.IX Item "-wrap boolean"
Whether characters should wrap in a cell that is not wide enough.
.PP
A priority order is defined among tags, and this order is used in implementing 
some of the tag-related functions described below.  When a cell is displayed, 
its properties are determined by the tags which are assigned to it.  Including 
the special tags, this order is \fBflash \fR, \fBactive \fR, \fBsel \fR, \fBtitle \fR, \fBcelltag 
\&\fR, \fBrowtag \fR, \fBcoltag \fR, default.
.PP
If a cell has several tags associated with 
it, and if their display options conflict, then the options of the highest 
priority tag are used.  If a particular display option hasn't been specified 
for a particular tag, or if it is specified as an empty string, then that 
option will never be used; the next-highest-priority tag's option will used 
instead.  If no tag specifies a particular display option, then the default 
style for the widget will be used.
.PP
Images are used for display purposes 
only.  Editing in that cell will still be enabled and any querying of the 
cell will show the text value of the cell, regardless of the value of 
\&\fB\-showtext \fR.  
.SH "Embedded Windows"
.IX Header "Embedded Windows"
There may be any number of embedded windows 
in a table widget (one per cell), and any widget may be used as an embedded 
window (subject to the usual rules for geometry management, which require 
the table window to be the parent of the embedded window or a descendant 
of its parent).  The embedded window's position on the screen will be updated 
as the table is modified or scrolled, and it will be mapped and unmapped 
as it moves into and out of the visible area of the table widget.  Each 
embedded window occupies one cell's worth of space in the table widget, 
and it is referred to by the index of the cell in the table.  Windows associated 
with the table widget are destroyed when the table widget is destroyed. 
.PP
Windows are used for display purposes only.  A value still exists for that 
cell, but will not be shown unless the window is deleted in some way.  
If the window is destroyed or lost by the table widget to another geometry 
manager, then any data associated with it is lost (the cell it occupied 
will no longer appear in \fBwindow names \fR).
.PP
When an embedded window is added 
to a table widget with the window configure widget command, several configuration 
options may be associated with it.  These options may be modified with 
later calls to the window configure widget command.  The following options 
are currently supported:  
.Ip "\fB\-create\fR \fIcallback\fR" 1
.IX Item "-create callback"
\&\s-1NOT\s0 \s-1CURRENTLY\s0 \s-1SUPPORTED\s0.  Specifies 
a Tcl script that may be evaluated to create the window for the annotation. 
 If no \-window option has been specified for this cell then this script 
will be evaluated when the cell is about to be displayed on the screen. 
 Script must create a window for the cell and return the name of that 
window as its result. If the cell's window should ever be deleted, the script 
will be evaluated again the next time the cell is displayed. 
.Ip "\fB\-background\fR or \fB\-bg\fR \fIcolor\fR" 1
.IX Item "-background or -bg color"
Background color of the cell.  If not specified, it uses 
the table's default background. 
.Ip "\fB\-padx\fR \fIpixels \fR" 1
.IX Item "-padx pixels "
As defined in the Tk options 
man page. 
.Ip "\fB\-pady\fR \fIpixels\fR" 1
.IX Item "-pady pixels"
As defined in the Tk options man page. 
.Ip "\fB\-relief\fR \fIrelief\fR" 1
.IX Item "-relief relief"
The relief to use for the cell in which the window lies.  If not specified, 
it uses the table's default relief. 
.Ip "\fB\-sticky\fR \fIsticky \fR" 1
.IX Item "-sticky sticky "
Stickiness of the window 
inside the cell, as defined by the \fBgrid \fR command. 
.Ip "\fB\-window\fR \fI$widget\fR" 1
.IX Item "-window $widget"
Specifies 
the a window to display in the  annotation.  It must exist before 
being specified here.   
.SH "the Selection"
.IX Header "the Selection"
Table selections are available as 
type \s-1STRING\s0.  By default, the value of the selection will be the values 
of the selected cells in nested Tcl list form where each row is a list 
and each column is an element of a row list. You can change the way this 
value is interpreted by setting the \fB\-rowseparator \fR and \fB\-colseparator \fR options. 
 For example, default Excel format would be to set \fB\-rowseparator \fR to \*(L"\en\*(R" 
and \fB\-colseparator \fR to \*(L"\et\*(R".  Changing these values affects both how the table 
sends out the selection and reads in pasted data, ensuring that the table 
should always be able to cut and paste to itself.  It is possible to change 
how pastes are handled by editing the table library procedure \fBtk_tablePasteHandler 
\&\fR.  This might be necessary if \fB\-selectioncommand \fR is set.  
.SH "Row/Col Spanning"
.IX Header "Row/Col Spanning"
Individual cells can span multiple rows and/or columns.  This is done via 
the \fBspans \fR command (see below for exact arguments).  Cells in the title 
area that span are not permitted to span beyond the title area, and will 
be constrained accordingly.  If the title area shrinks during a configure, 
sanity checking will occur to ensure the above.  You may set spans on regular 
cells that extend beyond the defined row/col area.  These spans will not 
be constrained, so that when the defined row/col area expands, the span 
will expand with it. 
.PP
When setting a span, checks are made as to whether 
the span would overlap an already spanning or hidden cell.  This is an 
error and it not allowed. Spans can affect the overall speed of table drawing, 
although not significantly.  If spans are not used, then there is no performance 
loss. 
.PP
Cells \fIhidden \fR by spanning cells still have valid data.  This will 
be seen during cut and paste operations that involve hidden cells, or 
through direct access by a command like \fBget \fR or \fBset \fR. 
.PP
The drawing properties 
of spanning cells apply to only the visual area of the cell.  For example, 
if a cell is center justified over 5 columns, then when viewing any portion 
of those columns, it will appear centered in the visible area. The non-visible 
column area will not be considered in the centering calculations.  
.SH "Command Substitution"
.IX Header "Command Substitution"
The various option based commands that the table supports 
all support the familiar Tk %\-substitution model (see the Tk::bind manpage for more details). 
 The following %\-sequences are recognized and substituted by the table 
widget: 
.Ip "\fB%c \fR" 1
.IX Item "%c "
For \fBSelectionCommand \fR, it is the maximum number of columns 
in any row in the selection.  Otherwise it is the column of the triggered 
cell. 
.Ip "\fB%C \fR" 1
.IX Item "%C "
A convenience substitution for \fI%r \fR,\fI%c \fR. 
.Ip "\fB%i \fR" 1
.IX Item "%i "
For \fBSelectionCommand\fR, it is the total number of cells in the selection. For \fBCommand \fR, it is 
0 for a read (get) and 1 for a write (set). Otherwise it is the current 
cursor position in the cell. 
.Ip "\fB%r\fR" 1
.IX Item "%r"
For \fBSelectionCommand \fR, it is the number 
of rows in the selection. Otherwise it is the row of the triggered cell. 
.Ip "\fB%s \fR" 1
.IX Item "%s "
For \fBValidateCommand \fR, it is the current value of the cell being validated. 
For \fBSelectionCommand \fR, it is the default value of the selection. For \fBBrowseCommand 
\&\fR, it is the index of the last active cell. For \fBCommand \fR, it is empty for 
reads (get) and the current value of the cell for writes (set). 
.Ip "\fB%S \fR" 1
.IX Item "%S "
For 
\&\fBValidateCommand \fR, it is the potential new value of the cell being validated. 
For \fBBrowseCommand \fR, it is the index of the new active cell. 
.Ip "\fB%W \fR" 1
.IX Item "%W "
The pathname 
to the window for which the command was generated.  
.SH "Widget Methods"
.IX Header "Widget Methods"
The 
\&\fB$window-\fR>\fBTableMatrix \fR method creates a widget object. This object supports the \fBconfigure\fR and \fBcget\fR methods
described in the Tk::options manpage which can be used to enquire and
modify the options described above.
The widget also inherits all the methods provided by the generic
Tk::Widget class.
.PP
The following additional methods are available for scale widgets:
.Ip "\fI$table\fR->\fBactivate\fR(\fIindex\fR)" 1
.IX Item "$table->activate(index)"
Sets the active 
cell to the one indicated by \fIindex\fR.
.Ip "\fI$table\fR->\fBbbox\fR(\fIfirst\fR, ?\fIlast\fR?)" 1
.IX Item "$table->bbox(first, ?last?)"
It 
returns the bounding box for the specified cell (range) as a 4\-tuple of 
x, y, width and height in pixels.  It clips the box to the visible portion, 
if any, otherwise an empty string is returned. 
.Ip "\fI$table\fR->\fBborder\fR(\fIoption, args\fR)" 1
.IX Item "$table->border(option, args)"
This command is a voodoo hack to implement border sizing for tables. 
This is normally called through bindings, with the following as valid 
options:  
.Ip "\fI$table\fR->\fBborderMark\fR(\fIx, y\fR, ?\fIrow|col\fR?)" 2
.IX Item "$table->borderMark(x, y, ?row|col?)"
Records \fIx \fR and \fIy \fR and 
the row and/or column border under that point in the table window, if 
any; used in conjunction with later \fBborder dragto \fR commands.  Typically 
this command is associated with a mouse button press in the widget.  If 
\&\fIrow \fR or \fIcol \fR is not specified, it returns a tuple of both border indices 
(an empty item means no border). Otherwise, just the specified item is 
returned. 
.Ip "\fI$table\fR->\fBborderDragto\fR(\fIx, y\fR)" 2
.IX Item "$table->borderDragto(x, y)"
This command computes the difference 
between its \fIx \fR and \fIy \fR arguments and the \fIx \fR and \fIy \fR arguments to the last 
\&\fBborder mark \fR command for the widget.  It then adjusts the previously marked 
border by the difference.  This command is typically associated with mouse 
motion events in the widget, to produce the effect of interactive border 
resizing.  
.Ip "\fI$table\fR->\fBcget\fR(\fIoption\fR)" 1
.IX Item "$table->cget(option)"
Returns the current value of the configuration 
option given by \fIoption \fR.  \fIOption \fR may have any of the values accepted by 
the \fBtable \fR command. 
.Ip "\fI$table\fR->\fBclear\fR(\fIoption\fR, ?\fIfirst\fR?, ?\fIlast\fR?)" 1
.IX Item "$table->clear(option, ?first?, ?last?)"
This command 
is a convenience routine to clear certain state information managed by 
the table.  \fIfirst \fR and \fIlast \fR represent valid table indices.  If neither 
are specified, then the command operates on the whole table.  The following 
options are recognized:  
.Ip "\fI$table\fR->\fBclearCache\fR(?\fIfirst\fR?, ?\fIlast\fR?)" 2
.IX Item "$table->clearCache(?first?, ?last?)"
Clears 
the specified section of the cache, if the table has been keeping one. 
.Ip "\fI$table\fR->\fBclearSizes\fR(?\fIfirst\fR?, ?\fIlast\fR?)" 2
.IX Item "$table->clearSizes(?first?, ?last?)"
Clears the specified row and column 
areas of specific height/width dimensions.  When just one index is specified, 
for example \fB2,0 \fR, that is interpreted as row 2 \fBand \fR column 0. 
.Ip "\fI$table\fR->\fBclearTags\fR(?\fIfirst\fR?, ?\fIlast\fR?)" 2
.IX Item "$table->clearTags(?first?, ?last?)"
Clears the specified area of tags (all row, 
column and cell tags). 
.Ip "\fI$table\fR->\fBclearAll\fR(?\fIfirst\fR?, ?\fIlast\fR?)" 2
.IX Item "$table->clearAll(?first?, ?last?)"
Performs all 
of the above clear functions on the specified area.  
.Ip "\fI$table\fR->\fBcolWidth\fR(?\fIcol\fR?, ?\fIvalue, col, value, ...\fR?)" 1
.IX Item "$table->colWidth(?col?, ?value, col, value, ...?)"
If no \fIcol \fR is 
specified, returns a list describing all cols for which a width has been 
set.  If \fBcol \fR is specified with no value, it prints out the width of that 
col in characters (positive number) or pixels (negative number).  If one 
or more \fIcol-value \fR pairs are specified, then it sets each col to be that 
width in characters (positive number) or pixels (negative number).  If 
\&\fIvalue \fR is \fIdefault \fR, then the col uses the default width, specified by 
\&\fB\-colwidth \fR. 
.RS 1
.Ip "\fI$table\fR->\fBconfigure\fR(?\fIoption\fR?, ?\fIvalue, option, value, ...\fR?)" 1
.IX Item "$table->configure(?option?, ?value, option, value, ...?)"
Query or modify the configuration options 
of the widget. If no \fIoption \fR is specified, returns a list describing all 
of the available options for \fIpathName \fR (see \fBTk_ConfigureInfo \fR for information 
on the format of this list).  If \fIoption \fR is specified with no \fIvalue \fR, then 
the command returns a list describing the one named option (this list 
will be identical to the corresponding sublist of the value returned if 
no \fIoption \fR is specified).  If one or more \fIoption-value \fR pairs are specified, 
then the command modifies the given widget \fIoption\fR\|(s) to have the given 
\&\fIvalue\fR\|(s);  in this case the command returns an empty string. \fIOption \fR may 
have any of the values accepted by the \fBtable \fR command. 
.Ip "\fI$table\fR->\fBcurselection\fR(?\fIvalue\fR?)" 1
.IX Item "$table->curselection(?value?)"
With no arguments, it returns the sorted indices of the currently 
selected cells.  Otherwise it sets all the selected cells to the given 
value.  The set has no effect if there is no associated Tcl array or the 
state is disabled. 
.Ip "\fI$table\fR->\fBcurvalue\fR(?\fIvalue\fR?)" 1
.IX Item "$table->curvalue(?value?)"
If no value is given, the 
value of the cell being edited (indexed by \fBactive \fR) is returned, else 
it is set to the given value. 
.Ip "\fI$table\fR->\fBdelete\fR(\fIoption, arg\fR, ?\fIarg\fR?)" 1
.IX Item "$table->delete(option, arg, ?arg?)"
This 
command is used to delete various things in a table.  It has several forms, 
depending on the \fIoption \fR:
.RE
.RS 1
.RS 1
.RE
.Ip "\fI$table\fR->\fBdeleteActive\fR(\fIindex\fR, ?\fIindex\fR?)" 2
.IX Item "$table->deleteActive(index, ?index?)"
Deletes text from the active cell.  If only one index is given, it deletes the 
character after that index, otherwise it deletes from the first index 
to the second.  \fIindex \fR can be a number, \fBinsert \fR or \fBend \fR. 
.Ip "\fI$table\fR->\fBdeleteCols\fR(?\fIswitches\fR?, \fIindex\fR, ?\fIcount\fR?)" 2
.IX Item "$table->deleteCols(?switches?, index, ?count?)"
Deletes \fIcount \fR cols starting at (and 
including) col \fIindex \fR.  The \fIindex \fR will be constrained to the limits of 
the tables.  If \fIcount \fR is negative, it deletes cols to the left.  Otherwise 
it deletes cols to the right.  \fIcount \fR defaults to 1 (meaning just the column 
specified).  The selection will be cleared.  At the moment, spans are not 
adjusted with this action.  Optional switches are:
.RE
.RS 1
.RS 1
.RE
.Ip "\fB\-holddimensions \fR" 3
.IX Item "-holddimensions "
Causes 
the table cols to be unaffected by the deletion (empty cols may appear). 
 By default the dimensions are adjusted by \fBcount \fR. 
.Ip "\fB\-holdtags \fR" 3
.IX Item "-holdtags "
Causes the 
tags specified by the \fItag \fR method to not move along with the data.  Also 
prevents specific widths set by the \fIwidth \fR method from being adjusted. 
 By default, these tags are properly adjusted. 
.Ip "\fB\-holdwindows \fR" 3
.IX Item "-holdwindows "
Causes the 
embedded windows created with the \fIwindow \fR method to not move along with 
the data.  By default, these windows are properly adjusted. 
.Ip "\fB\-keeptitles \fR" 3
.IX Item "-keeptitles "
Prevents title area cells from being changed.  Otherwise they are treated 
just like regular cells and will move as specified. 
.RE
.RS 1
.RS 1
.RE
.Ip "\fI$table\fR->\fBdeleteRows\fR(?\fIswitches\fR?, \fIindex\fR, ?\fIcount\fR?)" 2
.IX Item "$table->deleteRows(?switches?, index, ?count?)"
Deletes \fBcount \fR rows starting at (and including) row \fBindex \fR.  If \fBcount \fR is negative, 
it deletes rows going up.  Otherwise it deletes rows going down.  The selection 
will be cleared.  The switches are the same as those for column deletion. 
.RE
.RS 1
.RS 1
.RE
.Ip "\fI$table\fR->\fBget\fR(\fIfirst\fR, ?\fIlast\fR?)" 1
.IX Item "$table->get(first, ?last?)"
Returns the value of the cells specified 
by the table indices \fIfirst \fR and (optionally) \fIlast \fR in a list. 
.Ip "\fI$table\fR->\fBhidden\fR(?\fIindex\fR?, ?\fIindex, ...\fR?)" 1
.IX Item "$table->hidden(?index?, ?index, ...?)"
When called without args, it returns all the \fIhidden \fR cells 
(those cells covered by a spanning cell).  If one index is specified, it 
returns the spanning cell covering that index, if any.  If multiple indices 
are specified, it returns 1 if all indices are hidden cells, 0 otherwise. 
.Ip "\fI$table\fR->\fBicursor\fR(?\fIarg\fR?)" 1
.IX Item "$table->icursor(?arg?)"
With no arguments, prints out the location of 
the insertion cursor in the active cell.  With one argument, sets the cursor 
to that point in the string.  0 is before the first character, you can 
also use \fBinsert \fR or \fBend \fR for the current insertion point or the end of 
the text.  If there is no active cell, or the cell or table is disabled, 
this will return \-1. 
.Ip "\fI$table\fR->\fBindex\fR(\fIindex\fR, ?\fIrow|col\fR?)" 1
.IX Item "$table->index(index, ?row|col?)"
Returns the integer 
cell coordinate that corresponds to \fIindex \fR in the form row,col.  If \fBrow 
\&\fR or \fBcol \fR is specified, then only the row or column index is returned. 
.Ip "\fI$table\fR->\fBinsert\fR(\fIoption, arg, arg\fR)" 1
.IX Item "$table->insert(option, arg, arg)"
This command is used to into various things into 
a table.  It has several forms, depending on the \fIoption \fR:  
.RE
.RS 1
.RS 1
.RE
.Ip "\fI$table\fR->\fBinsertActive\fR(\fIindex, value\fR)" 2
.IX Item "$table->insertActive(index, value)"
The \fIvalue \fR is a text string which is inserted at 
the \fIindex \fR postion of the active cell.  The cursor is then positioned after 
the new text. \fIindex \fR can be a number, \fBinsert \fR or \fBend \fR. 
.Ip "\fI$table\fR->\fBinsertCols\fR(?\fIswitches\fR?, \fIindex\fR, ?\fIcount\fR?)" 2
.IX Item "$table->insertCols(?switches?, index, ?count?)"
Inserts \fBcount \fR cols starting at col \fBindex \fR.  If \fBcount \fR is negative, it inserts before the specified col.  Otherwise 
it inserts after the specified col.  The selection will be cleared.  The 
switches are the same as those for column deletion. 
.Ip "\fI$table\fR->\fBinsertRows\fR(?\fIswitches\fR?, \fIindex\fR, ?\fIcount\fR?)" 2
.IX Item "$table->insertRows(?switches?, index, ?count?)"
Inserts \fBcount \fR rows starting at row \fBindex \fR.  If \fBcount \fR is negative, it inserts before the specified row.  Otherwise 
it inserts after the specified row.  The selection will be cleared.  The 
switches are the same as those for column deletion.  
.RE
.RS 1
.RS 1
.RE
.Ip "\fI$table\fR->\fBreread\fR()" 1
.IX Item "$table->reread()"
Rereads the old contents of the cell back into the editing buffer.  Useful 
for a key binding when <Escape> is pressed to abort the edit (a default 
binding). 
.Ip "\fI$table\fR->\fBrowHeight\fR(?\fIrow\fR?, ?\fIvalue, row, value, ...\fR?)" 1
.IX Item "$table->rowHeight(?row?, ?value, row, value, ...?)"
If no \fIrow \fR is specified, returns a 
list describing all rows for which a height has been set.  If \fBrow \fR is specified 
with no value, it prints out the height of that row in characters (positive 
number) or pixels (negative number).  If one or more \fIrow-value \fR pairs are 
specified, then it sets each row to be that height in lines (positive 
number) or pixels (negative number).  If \fIvalue \fR is \fIdefault \fR, then the row 
uses the default height, specified by \fB\-rowheight \fR. 
.Ip "\fI$table\fR->\fBscan\fR(\fIoption, args\fR)" 1
.IX Item "$table->scan(option, args)"
This command is used to implement 
scanning on tables.  It has two forms, depending on \fIoption \fR:  
.RE
.RS 1
.RS 1
.RE
.Ip "\fI$table\fR->\fBscanMark\fR(\fIx, y\fR)" 2
.IX Item "$table->scanMark(x, y)"
Records \fIx \fR and \fIy \fR and the current view in the table window; 
 used in conjunction with later \fBscan dragto \fR commands. Typically this command 
is associated with a mouse button press in the widget.  It returns an empty 
string. 
.Ip "\fI$table\fR->\fBscanDragto\fR(\fIx, y\fR.)" 2
.IX Item "$table->scanDragto(x, y.)"
This command computes the difference 
between its \fIx \fR and \fIy \fR arguments and the \fIx \fR and \fIy \fR arguments to the last 
\&\fBscan mark \fR command for the widget.  It then adjusts the view by 5 times 
the difference in coordinates.  This command is typically associated with 
mouse motion events in the widget, to produce the effect of dragging the 
list at high speed through the window.  The return value is an empty string. 
.RE
.RS 1
.RS 1
.RE
.Ip "\fI$table\fR->\fBsee\fR(\fIindex\fR)" 1
.IX Item "$table->see(index)"
Adjust the view in the table so that the cell given 
by \fIindex \fR is positioned as the cell one off from top left (excluding title 
rows and columns) if the cell is not currently visible on the screen.  
The actual cell may be different to keep the screen full. 
.Ip "\fI$table\fR->\fBselection\fR(\fIoption, arg\fR)" 1
.IX Item "$table->selection(option, arg)"
This command is used to adjust the selection within a table. 
 It has several forms, depending on \fIoption \fR:  
.RE
.RS 1
.RS 1
.RE
.Ip "\fI$table\fR->\fBselectionAnchor\fR(\fIindex\fR)" 2
.IX Item "$table->selectionAnchor(index)"
Sets the selection anchor to the cell given by \fIindex \fR.  The selection 
anchor is the end of the selection that is fixed while dragging out a 
selection with the mouse.  The index \fBanchor \fR may be used to refer to the 
anchor cell. 
.Ip "\fI$table\fR->\fBselectionClear\fR(\fIfirst\fR?\fIlast\fR?)" 2
.IX Item "$table->selectionClear(first?last?)"
If any of the cells 
between \fIfirst \fR and \fIlast \fR (inclusive) are selected, they are deselected. 
 The selection state is not changed for cells outside this range.  \fIfirst \fR may be specified as \fBall \fR to remove the selection from all cells. 
.Ip "\fI$table\fR->\fBselectionIncludes\fR(\fIindex\fR)" 2
.IX Item "$table->selectionIncludes(index)"
Returns 1 if the cell indicated by \fIindex \fR 
is currently selected, 0 if it isn't. 
.Ip "\fI$table\fR->\fBselectionSet\fR(\fIfirst\fR, ?\fIlast\fR?)" 2
.IX Item "$table->selectionSet(first, ?last?)"
Selects all of the cells in the range between \fIfirst \fR and \fIlast \fR, inclusive, 
without affecting the selection state of cells outside that range.  
.RE
.RS 1
.RS 1
.Sp
perltk note this needs to be perlized
.RE
.Ip "\fI$table\fR->\fBset\fR(?\fIrow|col\fR?, \fIindex\fR, ?\fIvalue\fR?, ?\fIindex, value, ...\fR?)" 1
.IX Item "$table->set(?row|col?, index, ?value?, ?index, value, ...?)"
Sets the specified index 
to the associated value.  Table validation will not be triggered via this 
method.  If \fBrow \fR or \fBcol \fR precedes the list of index/value pairs, then the 
value is assumed to be a Tcl list whose values will be split and set into 
the subsequent columns (if \fBrow \fR is specified) or rows (for \fBcol \fR).  For 
example, \fB set row 2,3 {2,3 2,4 2,5} \fR will set 3 cells, from 2,3 to 2,5. 
The setting of cells is silently bounded by the known table dimensions. 
.Ip "\fI$table\fR->\fBspans\fR(?\fIindex\fR?, ?\fIrows,cols, index, rows,cols, ...\fR?)" 1
.IX Item "$table->spans(?index?, ?rows,cols, index, rows,cols, ...?)"
This command is 
used to manipulate row/col spans.  When called with no arguments, all known 
spans are returned as a list of tuples of the form {index span}.  When 
called with only the \fIindex \fR, the span for that \fIindex \fR only is returned, 
if any.  Otherwise an even number of \fIindex rows,cols \fR pairs are used to 
set spans.  A span starts at the \fIindex \fR and continues for the specified 
number of rows and cols. Negative spans are not supported.  A span of 0,0 
unsets any span on that cell.  See \s-1EXAMPLES\s0 for more info. 
.Ip "\fI$table\fR->\fBtag\fR(option, ?\fIarg, arg, ...\fR?)" 1
.IX Item "$table->tag(option, ?arg, arg, ...?)"
This command is used to manipulate tags.  The exact 
behavior of the command depends on the \fIoption \fR argument that follows the 
\&\fBtag \fR argument. \fIcget \fR, \fIcell \fR, and \fIrow|col \fR complain about unknown tag names. 
The following forms of the command are currently supported:  
.RE
.RS 1
.RS 1
.RE
.Ip "\fI$table\fR->\fBtagCell\fR(\fItagName, ?index, ...?\fR)" 2
.IX Item "$table->tagCell(tagName, ?index, ...?)"
With no arguments, prints out the list of 
cells that use the \fItag \fR. Otherwise it sets the specified cells to use the 
\&\fItag \fR.  If \fItag \fR is '', the cells are reset to the default \fItag \fR.  Tags added 
during \-*tagcommand evaluation do not register here. 
.Ip "\fI$table\fR->\fBtagCget\fR(\fItagName, option\fR)" 2
.IX Item "$table->tagCget(tagName, option)"
This command returns the current value of the option 
named \fIoption \fR associated with the tag given by \fItagName \fR.  \fIOption \fR may have 
any of the values accepted by the \fBtag configure \fR widget command. 
.Ip "\fI$table\fR->\fBtagCol\fR(\fItagName, ?col, ...?\fR)" 2
.IX Item "$table->tagCol(tagName, ?col, ...?)"
With no arguments, prints out the list of cols 
that use the \fItag \fR. Otherwise it sets the specified cols to use the \fItag\fR.  If \fItag \fR is '', the cols are reset to the default \fItag \fR.  Tags added during 
\&\-coltagcommand evaluation do not register here.  If \fItagName \fR does not exist, 
it is not created, but nor is an error generated. 
.Ip "\fI$table\fR->\fBtagConfigure\fR(\fItagName\fR, ?\fIoption\fR?, ?\fIvalue\fR?, ?\fIoption, value, ...\fR?)" 2
.IX Item "$table->tagConfigure(tagName, ?option?, ?value?, ?option, value, ...?)"
This command is similar 
to the \fBconfigure \fR widget command except that it modifies options associated 
with the tag given by \fItagName \fR instead of modifying options for the overall 
table widget.  If no \fIoption \fR is specified, the command returns a list describing 
all of the available options for \fItagName \fR (see \fBTk_ConfigureInfo \fR for information 
on the format of this list).  If \fIoption \fR is specified with no \fIvalue \fR, then 
the command returns a list describing the one named option (this list 
will be identical to the corresponding sublist of the value returned if 
no \fIoption \fR is specified).  If one or more \fIoption-value \fR pairs are specified, 
then the command modifies the given \fIoption\fR\|(s) to have the given \fIvalue\fR\|(s) 
in \fItagName \fR; in this case the command returns an empty string. See \s-1TAGS\s0 
above for details on the options available for tags. 
.Ip "\fI$table\fR->\fBtagDelete\fR(\fItagName\fR)" 2
.IX Item "$table->tagDelete(tagName)"
Deletes a tag.  No error if the tag does not exist. 
.Ip "\fI$table\fR->\fBtagExists\fR(\fItagName\fR)" 2
.IX Item "$table->tagExists(tagName)"
Returns 1 if the named tag exists, 0 otherwise. 
.Ip "\fI$table\fR->\fBtagIncludes\fR(\fItagName, index\fR)" 2
.IX Item "$table->tagIncludes(tagName, index)"
Returns 1 if the specified index has the 
named tag, 0 otherwise. 
.Ip "\fI$table\fR->\fBtagNames\fR(?\fIpattern\fR?)" 2
.IX Item "$table->tagNames(?pattern?)"
If no pattern is 
specified, shows the names of all defined tags. Otherwise the \fIpattern \fR 
is used as a glob pattern to show only tags matching that pattern. 
.Ip "\fI$table\fR->\fBtagRow\fR(\fItagName, ?row, ...?\fR)" 2
.IX Item "$table->tagRow(tagName, ?row, ...?)"
With no arguments, prints out the list of rows 
that use the \fItag \fR. Otherwise it sets the specified rows to use the \fItag 
\&\fR.  If \fItag \fR is '', the rows are reset to use the default tag.  Tags added 
during \-rowtagcommand evaluation do not register here.  If \fItagName \fR does 
not exist, it is not created, but nor is an error generated.  
.RE
.RS 1
.RS 1
.RE
.Ip "\fI$table\fR->\fBvalidate\fR(\fIindex\fR)" 1
.IX Item "$table->validate(index)"
Explicitly validates the specified index based on the 
current \fB\-validatecommand \fR and returns 0 or 1 based on whether the cell 
was validated. 
.Ip "\fI$table\fR->\fBwindow\fR(option, ?\fIarg, arg, ...\fR?)" 1
.IX Item "$table->window(option, ?arg, arg, ...?)"
This command is used to 
manipulate embedded windows.  The exact behavior of the command depends 
on the \fIoption \fR argument that follows the \fBwindow \fR argument.  The following 
forms of the command are currently supported:  
.RE
.RS 1
.RS 1
.RE
.Ip "\fI$table\fR->\fBwindowCget\fR(\fIindex, option\fR)" 2
.IX Item "$table->windowCget(index, option)"
This command returns the current value of the option named \fIoption \fR associated with the window given by \fIindex \fR.  \fIOption \fR may have any of the 
values accepted by the \fBwindow configure \fR widget command. 
.Ip "\fI$table\fR->\fBwindowConfigure\fR(\fIindex\fR, ?\fIoption\fR?, ?\fIvalue\fR?, ?\fIoption, value, ...\fR?)" 2
.IX Item "$table->windowConfigure(index, ?option?, ?value?, ?option, value, ...?)"
This command is 
similar to the \fBconfigure \fR widget command except that it modifies options 
associated with the embedded window given by \fIindex \fR instead of modifying 
options for the overall table widget.  If no \fIoption \fR is specified, the 
command returns a list describing all of the available options for \fIindex 
\&\fR (see \fBTk_ConfigureInfo \fR for information on the format of this list).  If 
\&\fIoption \fR is specified with no \fIvalue \fR, then the command returns a list describing 
the one named option (this list will be identical to the corresponding 
sublist of the value returned if no \fIoption \fR is specified).  If one or more 
\&\fIoption-value \fR pairs are specified, then the command modifies the given 
\&\fIoption\fR\|(s) to have the given \fIvalue\fR\|(s) in \fIindex \fR; in this case the command 
returns an empty string. See \s-1EMBEDDED\s0 \s-1WINDOWS\s0 above for details on the 
options available for windows. 
.Ip "\fI$table\fR->\fBwindowDelete\fR(\fIindex\fR, ?\fIindex, ...\fR?)" 2
.IX Item "$table->windowDelete(index, ?index, ...?)"
Deletes an embedded window from the table.  The associated window will 
also be deleted. 
.Ip "\fI$table\fR->\fBwindowMove\fR(\fIindexFrom, indexTo\fR)" 2
.IX Item "$table->windowMove(indexFrom, indexTo)"
Moves an embedded 
window from one cell to another.  If a window already exists in the target 
cell, it will be deleted. 
.Ip "\fI$table\fR->\fBwindowNames\fR(?\fIpattern\fR?)" 2
.IX Item "$table->windowNames(?pattern?)"
If no pattern 
is specified, shows the cells of all embedded windows. Otherwise the \fIpattern\fR is used as a glob pattern to show only cells matching that pattern.  
.RE
.RS 1
.RS 1
.RE
.Ip "\fI$table\fR->\fBxview\fR(\fIargs\fR)" 1
.IX Item "$table->xview(args)"
This command is used to query and change the horizontal position 
of the information in the widget's window.  It can take any of the following 
forms:  
.Ip "\fI$table\fR->\fBxview\fR()" 1
.IX Item "$table->xview()"
Returns a list containing two elements. Each element 
is a real fraction between 0 and 1;  together they describe the horizontal 
span that is visible in the window. For example, if the first element is 
\&.2 and the second element is .6, 20% of the table's text is off-screen to 
the left, the middle 40% is visible in the window, and 40% of the text 
is off-screen to the right. These are the same values passed to scrollbars 
via the \fB\-xscrollcommand \fR option. 
.Ip "\fI$table\fR->\fBxview\fR(\fIindex\fR)" 1
.IX Item "$table->xview(index)"
Adjusts the view 
in the window so that the column given by \fIindex \fR is displayed at the left 
edge of the window. 
.Ip "\fI$table\fR->\fBxviewMoveto\fR(\fIfraction\fR)" 1
.IX Item "$table->xviewMoveto(fraction)"
Adjusts the view in 
the window so that \fIfraction \fR of the total width of the table text is off-screen 
to the left. \fIfraction \fR must be a fraction between 0 and 1. 
.Ip "\fI$table\fR->\fBxviewScroll\fR(\fInumber, what\fR)" 1
.IX Item "$table->xviewScroll(number, what)"
This command shifts the view in the window left or 
right according to \fInumber \fR and \fIwhat \fR. \fINumber \fR must be an integer. \fIWhat \fR 
must be either \fBunits \fR or \fBpages \fR or an abbreviation of one of these. If 
\&\fIwhat \fR is \fBunits \fR, the view adjusts left or right by \fInumber \fR character units 
(the width of the \fB0 \fR character) on the display;  if it is \fBpages \fR then 
the view adjusts by \fInumber \fR screenfuls. If \fInumber \fR is negative then characters 
farther to the left become visible;  if it is positive then characters 
farther to the right become visible.  
.Ip "\fI$table\fR->\fByview\fR(\fI?args\fR?)" 1
.IX Item "$table->yview(?args?)"
This command 
is used to query and change the vertical position of the text in the widget's 
window.  It can take any of the following forms:  
.RE
.RS 1
.RS 1
.RE
.Ip "\fI$table\fR->\fByview\fR()" 2
.IX Item "$table->yview()"
Returns 
a list containing two elements, both of which are real fractions between 
0 and 1.  The first element gives the position of the table element at 
the top of the window, relative to the table as a whole (0.5 means it is 
halfway through the table, for example).  The second element gives the 
position of the table element just after the last one in the window, relative 
to the table as a whole.  These are the same values passed to scrollbars 
via the \fB\-yscrollcommand \fR option. 
.Ip "\fI$table\fR->\fByview\fR(\fIindex\fR)" 2
.IX Item "$table->yview(index)"
Adjusts the view 
in the window so that the row given by \fIindex \fR is displayed at the top 
of the window. 
.Ip "\fI$table\fR->\fByviewMoveto\fR(\fIfraction\fR)" 2
.IX Item "$table->yviewMoveto(fraction)"
Adjusts the view in the 
window so that the element given by \fIfraction \fR appears at the top of the 
window. \fIFraction \fR is a fraction between 0 and 1;  0 indicates the first 
element in the table, 0.33 indicates the element one-third the way through 
the table, and so on. 
.Ip "\fI$table\fR->\fByviewscroll\fR(\fInumber, what\fR)" 2
.IX Item "$table->yviewscroll(number, what)"
This command 
adjusts the view in the window up or down according to \fInumber \fR and \fIwhat \fR.  \fINumber \fR must be an integer.  \fIWhat \fR must be either \fBunits \fR or \fBpages \fR.  If 
\&\fIwhat \fR is \fBunits \fR, the view adjusts up or down by \fInumber \fR lines; if it is 
\&\fBpages \fR then the view adjusts by \fInumber \fR screenfuls.  If \fInumber \fR is negative 
then earlier elements become visible; if it is positive then later elements 
become visible.   
.RE
.RS 1
.SH "Default Bindings"
.IX Header "Default Bindings"
The initialization creates class bindings 
that give the following default behaviour: 
.RS 1
.RE
.Ip "[1]" 1
.IX Item "[1]"
Clicking Button-1 in a cell 
activates that cell.  Clicking into an already active cell moves the insertion 
cursor to the character nearest the mouse. 
.Ip "[2]" 1
.IX Item "[2]"
Moving the mouse while Button-1 
is pressed will stroke out a selection area. Exiting while Button-1 is pressed 
causing scanning to occur on the table along with selection. 
.Ip "[3]" 1
.IX Item "[3]"
Moving 
the mouse while Button-2 is pressed causes scanning to occur without any 
selection. 
.Ip "[4]" 1
.IX Item "[4]"
Home moves the table to have the origin in view. 
.Ip "[5]" 1
.IX Item "[5]"
End 
moves the table to have the \fBend \fR cell in view. 
.Ip "[6]" 1
.IX Item "[6]"
Control-Home moves the 
table to the origin and activates that cell. 
.Ip "[7]" 1
.IX Item "[7]"
Control-End moves the table 
to the end and activates that cell. 
.Ip "[8]" 1
.IX Item "[8]"
Shift-Control-Home extends the selection 
to the origin. 
.Ip "[9]" 1
.IX Item "[9]"
Shift-Control-End extends the selection to the end. 
.Ip "[10]" 1
.IX Item "[10]"
The left, right, up and down arrows move the active cell. 
.Ip "[11]" 1
.IX Item "[11]"
Shift-<arrow> 
extends the selection in that direction. 
.Ip "[12]" 1
.IX Item "[12]"
Control-leftarrow and Control-rightarrow 
move the insertion cursor within the cell. 
.Ip "[13]" 1
.IX Item "[13]"
Control-slash selects all 
the cells. 
.Ip "[14]" 1
.IX Item "[14]"
Control-backslash clears selection from all the cells. 
.Ip "[15]" 1
.IX Item "[15]"
Backspace deletes the character before the insertion cursor in the active 
cell. 
.Ip "[16]" 1
.IX Item "[16]"
Delete deletes the character after the insertion cursor in the 
active cell. 
.Ip "[17]" 1
.IX Item "[17]"
Escape rereads the value of the active cell from the 
specified data source, discarding any edits that have may been performed 
on the cell. 
.Ip "[18]" 1
.IX Item "[18]"
Control-a moves the insertion cursor to the beginning 
of the active cell. 
.Ip "[19]" 1
.IX Item "[19]"
Control-e moves the insertion cursor to the end 
of the active cell. 
.Ip "[20]" 1
.IX Item "[20]"
Control-minus and Control-equals decrease and increase 
the width of the column with the active cell in it. 
.Ip "[21]" 1
.IX Item "[21]"
Moving the mouse 
while Button-3 (the right button on Windows) is pressed while you are over 
a border will cause interactive resizing of that row and/or column to 
occur, based on the value of \fB\-resizeborders \fR. Some bindings may have slightly 
different behavior dependent on the \fB\-selectionmode \fR of the widget. If the 
widget is disabled using the \fB\-state \fR option, then its view can still be 
adjusted and cells can still be selected, but no insertion cursor will 
be displayed and no cell modifications will take place. The behavior of 
tables can be changed by defining new bindings for individual widgets 
or by redefining the class bindings.  The default bindings are either compiled 
in the TableMatrix.pm file 
.RE
.RS 1
.SH "Performance Issues"
.IX Header "Performance Issues"
The number of rows 
and columns or a table widget should not significantly affect the speed 
of redraw.  Recalculation and redraw of table parameters and cells is restricted 
as much as possible. The display cell with the insert cursor is redrawn 
each time the cursor blinks, which causes a steady stream of graphics 
traffic.  Set the \fB\-insertofftime \fR option to 0 avoid this.  The use of a \fB\-command\fR
with the table without a cache can cause significant slow-down, as the 
command is called once for each request of a cell value.  
.SH "Examples"
.IX Header "Examples"
Set 
the topleft title area to be one spanning cell.  This overestimates both 
row and column span by one, but the command does all the constraining 
for us.  \fB$table span [$table cget \-roworigin],[$table cget \-colorigin] [$table 
cget \-titlerows],[$table cget \-titlecols]  \fRForce a table window refresh 
(useful for the slight chance that a bug in the table is not causing proper 
refresh):  \fB$table configure \-padx [$table cget \-padx]  \fR 
.SH "Keywords"
.IX Header "Keywords"
table, 
widget, extension 
