.\" Automatically generated by Pod::Man version 1.15
.\" Fri Apr 20 12:59:06 2001
.\"
.\" Standard preamble:
.\" ======================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R

.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used
.\" to do unbreakable dashes and therefore won't be available.  \*(C` and
.\" \*(C' expand to `' in nroff, nothing in troff, for use with C<>
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr
.\" for titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and
.\" index entries marked with X<> in POD.  Of course, you'll have to process
.\" the output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it
.\" makes way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.bd B 3
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ======================================================================
.\"
.IX Title "PERLDIAG 1"
.TH PERLDIAG 1 "perl v5.6.1" "2001-04-08" "Perl Programmers Reference Guide"
.UC
.SH "NAME"
perldiag \- various Perl diagnostics
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
These messages are classified as follows (listed in increasing order of
desperation):
.PP
.Vb 7
\&    (W) A warning (optional).
\&    (D) A deprecation (optional).
\&    (S) A severe warning (default).
\&    (F) A fatal error (trappable).
\&    (P) An internal error you should never see (trappable).
\&    (X) A very fatal error (nontrappable).
\&    (A) An alien error message (not generated by Perl).
.Ve
The majority of messages from the first three classifications above
(W, D & S) can be controlled using the \f(CW\*(C`warnings\*(C'\fR pragma. 
.PP
If a message can be controlled by the \f(CW\*(C`warnings\*(C'\fR pragma, its warning
category is included with the classification letter in the description
below.
.PP
Optional warnings are enabled by using the \f(CW\*(C`warnings\*(C'\fR pragma or the \fB\-w\fR
and \fB\-W\fR switches. Warnings may be captured by setting \f(CW\*(C`$SIG{_\|_WARN_\|_}\*(C'\fR
to a reference to a routine that will be called on each warning instead
of printing it.  See the perlvar manpage.
.PP
Default warnings are always enabled unless they are explicitly disabled
with the \f(CW\*(C`warnings\*(C'\fR pragma or the \fB\-X\fR switch.
.PP
Trappable errors may be trapped using the eval operator.  See
the eval entry in the perlfunc manpage.  In almost all cases, warnings may be selectively
disabled or promoted to fatal errors using the \f(CW\*(C`warnings\*(C'\fR pragma.
See the warnings manpage.
.PP
The messages are in alphabetical order, without regard to upper or
lower-case.  Some of these messages are generic.  Spots that vary are
denoted with a \f(CW%s\fR or other printf-style escape.  These escapes are
ignored by the alphabetical order, as are all characters other than
letters.  To look up your message, just ignore anything that is not a
letter.
.Ip "\fIaccept()\fR on closed socket \f(CW%s\fR" 4
.IX Item "accept() on closed socket %s"
(W closed) You tried to do an accept on a closed socket.  Did you forget
to check the return value of your \fIsocket()\fR call?  See
the accept entry in the perlfunc manpage.
.Ip "Allocation too large: \f(CW%lx\fR" 4
.IX Item "Allocation too large: %lx"
(X) You can't allocate more than 64K on an \s-1MS-DOS\s0 machine.
.Ip "'!' allowed only after types \f(CW%s\fR" 4
.IX Item "'!' allowed only after types %s"
(F) The '!' is allowed in \fIpack()\fR and \fIunpack()\fR only after certain types.
See the pack entry in the perlfunc manpage.
.Ip "Ambiguous call resolved as \s-1CORE:\s0:%\fIs()\fR, qualify as such or use &" 4
.IX Item "Ambiguous call resolved as CORE::%s(), qualify as such or use &"
(W ambiguous) A subroutine you have declared has the same name as a Perl
keyword, and you have used the name without qualification for calling
one or the other.  Perl decided to call the builtin because the
subroutine is not imported.
.Sp
To force interpretation as a subroutine call, either put an ampersand
before the subroutine name, or qualify the name with its package.
Alternatively, you can import the subroutine (or pretend that it's
imported with the \f(CW\*(C`use subs\*(C'\fR pragma).
.Sp
To silently interpret it as the Perl operator, use the \f(CW\*(C`CORE::\*(C'\fR prefix
on the operator (e.g. \f(CW\*(C`CORE::log($x)\*(C'\fR) or by declaring the subroutine
to be an object method (see the Subroutine Attributes entry in the perlsub manpage or
the attributes manpage).
.Ip "Ambiguous use of \f(CW%s\fR resolved as \f(CW%s\fR" 4
.IX Item "Ambiguous use of %s resolved as %s"
(W ambiguous)(S) You said something that may not be interpreted the way
you thought.  Normally it's pretty easy to disambiguate it by supplying
a missing quote, operator, parenthesis pair or declaration.
.Ip "'|' and '<' may not both be specified on command line" 4
.IX Item "'|' and '<' may not both be specified on command line"
(F) An error peculiar to \s-1VMS\s0.  Perl does its own command line
redirection, and found that \s-1STDIN\s0 was a pipe, and that you also tried to
redirect \s-1STDIN\s0 using '<'.  Only one \s-1STDIN\s0 stream to a customer, please.
.Ip "'|' and '>' may not both be specified on command line" 4
.IX Item "'|' and '>' may not both be specified on command line"
(F) An error peculiar to \s-1VMS\s0.  Perl does its own command line
redirection, and thinks you tried to redirect stdout both to a file and
into a pipe to another command.  You need to choose one or the other,
though nothing's stopping you from piping into a program or Perl script
which 'splits' output into two streams, such as
.Sp
.Vb 6
\&    open(OUT,">$ARGV[0]") or die "Can't write to $ARGV[0]: $!";
\&    while (<STDIN>) {
\&        print;
\&        print OUT;
\&    }
\&    close OUT;
.Ve
.Ip "Applying \f(CW%s\fR to \f(CW%s\fR will act on scalar(%s)" 4
.IX Item "Applying %s to %s will act on scalar(%s)"
(W misc) The pattern match (//), substitution (s///), and
transliteration (tr///) operators work on scalar values.  If you apply
one of them to an array or a hash, it will convert the array or hash to
a scalar value \*(-- the length of an array, or the population info of a
hash \*(-- and then work on that scalar value.  This is probably not what
you meant to do.  See the grep entry in the perlfunc manpage and the map entry in the perlfunc manpage for
alternatives.
.Ip "Args must match #! line" 4
.IX Item "Args must match #! line"
(F) The setuid emulator requires that the arguments Perl was invoked
with match the arguments specified on the #! line.  Since some systems
impose a one-argument limit on the #! line, try combining switches;
for example, turn \f(CW\*(C`\-w \-U\*(C'\fR into \f(CW\*(C`\-wU\*(C'\fR.
.Ip "Arg too short for msgsnd" 4
.IX Item "Arg too short for msgsnd"
(F) \fImsgsnd()\fR requires a string at least as long as sizeof(long).
.Ip "%s argument is not a \s-1HASH\s0 or \s-1ARRAY\s0 element" 4
.IX Item "%s argument is not a HASH or ARRAY element"
(F) The argument to \fIexists()\fR must be a hash or array element, such as:
.Sp
.Vb 2
\&    $foo{$bar}
\&    $ref->{"susie"}[12]
.Ve
.Ip "%s argument is not a \s-1HASH\s0 or \s-1ARRAY\s0 element or slice" 4
.IX Item "%s argument is not a HASH or ARRAY element or slice"
(F) The argument to \fIdelete()\fR must be either a hash or array element,
such as:
.Sp
.Vb 2
\&    $foo{$bar}
\&    $ref->{"susie"}[12]
.Ve
or a hash or array slice, such as:
.Sp
.Vb 2
\&    @foo[$bar, $baz, $xyzzy]
\&    @{$ref->[12]}{"susie", "queue"}
.Ve
.Ip "%s argument is not a subroutine name" 4
.IX Item "%s argument is not a subroutine name"
(F) The argument to \fIexists()\fR for \f(CW\*(C`exists &sub\*(C'\fR must be a subroutine
name, and not a subroutine call.  \f(CW\*(C`exists &sub()\*(C'\fR will generate this
error.
.if n .Ip "Argument """"%s"""" isn't numeric%s" 4
.el .Ip "Argument ``%s'' isn't numeric%s" 4
.IX Item "Argument "%s isn't numeric%s"
(W numeric) The indicated string was fed as an argument to an operator
that expected a numeric value instead.  If you're fortunate the message
will identify which operator was so unfortunate.
.Ip "Array @%s missing the @ in argument \f(CW%d\fR of %\fIs()\fR" 4
.IX Item "Array @%s missing the @ in argument %d of %s()"
(D deprecated) Really old Perl let you omit the @ on array names in some
spots.  This is now heavily deprecated.
.Ip "assertion botched: \f(CW%s\fR" 4
.IX Item "assertion botched: %s"
(P) The malloc package that comes with Perl had an internal failure.
.if n .Ip "Assertion failed: file """"%s""""" 4
.el .Ip "Assertion failed: file ``%s''" 4
.IX Item "Assertion failed: file "%s"
(P) A general assertion failed.  The file in question must be examined.
.Ip "Assignment to both a list and a scalar" 4
.IX Item "Assignment to both a list and a scalar"
(F) If you assign to a conditional operator, the 2nd and 3rd arguments
must either both be scalars or both be lists.  Otherwise Perl won't
know which context to supply to the right side.
.Ip "Negative offset to vec in lvalue context" 4
.IX Item "Negative offset to vec in lvalue context"
(F) When vec is called in an lvalue context, the second argument must be
greater than or equal to zero.
.Ip "Attempt to free non-arena \s-1SV:\s0 0x%lx" 4
.IX Item "Attempt to free non-arena SV: 0x%lx"
(P internal) All \s-1SV\s0 objects are supposed to be allocated from arenas
that will be garbage collected on exit.  An \s-1SV\s0 was discovered to be
outside any of those arenas.
.Ip "Attempt to free nonexistent shared string" 4
.IX Item "Attempt to free nonexistent shared string"
(P internal) Perl maintains a reference counted internal table of
strings to optimize the storage and access of hash keys and other
strings.  This indicates someone tried to decrement the reference count
of a string that can no longer be found in the table.
.Ip "Attempt to free temp prematurely" 4
.IX Item "Attempt to free temp prematurely"
(W debugging) Mortalized values are supposed to be freed by the
\&\fIfree_tmps()\fR routine.  This indicates that something else is freeing the
\&\s-1SV\s0 before the \fIfree_tmps()\fR routine gets a chance, which means that the
\&\fIfree_tmps()\fR routine will be freeing an unreferenced scalar when it does
try to free it.
.Ip "Attempt to free unreferenced glob pointers" 4
.IX Item "Attempt to free unreferenced glob pointers"
(P internal) The reference counts got screwed up on symbol aliases.
.Ip "Attempt to free unreferenced scalar" 4
.IX Item "Attempt to free unreferenced scalar"
(W internal) Perl went to decrement the reference count of a scalar to
see if it would go to 0, and discovered that it had already gone to 0
earlier, and should have been freed, and in fact, probably was freed.
This could indicate that \fISvREFCNT_dec()\fR was called too many times, or
that \fISvREFCNT_inc()\fR was called too few times, or that the \s-1SV\s0 was
mortalized when it shouldn't have been, or that memory has been
corrupted.
.Ip "Attempt to join self" 4
.IX Item "Attempt to join self"
(F) You tried to join a thread from within itself, which is an
impossible task.  You may be joining the wrong thread, or you may need
to move the \fIjoin()\fR to some other thread.
.Ip "Attempt to pack pointer to temporary value" 4
.IX Item "Attempt to pack pointer to temporary value"
(W pack) You tried to pass a temporary value (like the result of a
function, or a computed expression) to the \*(L"p\*(R" \fIpack()\fR template.  This
means the result contains a pointer to a location that could become
invalid anytime, even before the end of the current statement.  Use
literals or global values as arguments to the \*(L"p\*(R" \fIpack()\fR template to
avoid this warning.
.Ip "Attempt to use reference as lvalue in substr" 4
.IX Item "Attempt to use reference as lvalue in substr"
(W substr) You supplied a reference as the first argument to \fIsubstr()\fR
used as an lvalue, which is pretty strange.  Perhaps you forgot to
dereference it first.  See the substr entry in the perlfunc manpage.
.Ip "Bad arg length for \f(CW%s\fR, is \f(CW%d\fR, should be \f(CW%d\fR" 4
.IX Item "Bad arg length for %s, is %d, should be %d"
(F) You passed a buffer of the wrong size to one of \fImsgctl()\fR, \fIsemctl()\fR
or \fIshmctl()\fR.  In C parlance, the correct sizes are, respectively,
sizeof(struct\ msqid_ds\ *), sizeof(struct\ semid_ds\ *), and
sizeof(struct\ shmid_ds\ *).
.Ip "Bad evalled substitution pattern" 4
.IX Item "Bad evalled substitution pattern"
(F) You've used the /e switch to evaluate the replacement for a
substitution, but perl found a syntax error in the code to evaluate,
most likely an unexpected right brace '}'.
.Ip "Bad filehandle: \f(CW%s\fR" 4
.IX Item "Bad filehandle: %s"
(F) A symbol was passed to something wanting a filehandle, but the
symbol has no filehandle associated with it.  Perhaps you didn't do an
\&\fIopen()\fR, or did it in another package.
.Ip "Bad \fIfree()\fR ignored" 4
.IX Item "Bad free() ignored"
(S malloc) An internal routine called \fIfree()\fR on something that had never
been \fImalloc()\fRed in the first place. Mandatory, but can be disabled by
setting environment variable \f(CW\*(C`PERL_BADFREE\*(C'\fR to 0.
.Sp
This message can be seen quite often with DB_File on systems with \*(L"hard\*(R"
dynamic linking, like \f(CW\*(C`AIX\*(C'\fR and \f(CW\*(C`OS/2\*(C'\fR. It is a bug of \f(CW\*(C`Berkeley DB\*(C'\fR
which is left unnoticed if \f(CW\*(C`DB\*(C'\fR uses \fIforgiving\fR system \fImalloc()\fR.
.Ip "Bad hash" 4
.IX Item "Bad hash"
(P) One of the internal hash routines was passed a null \s-1HV\s0 pointer.
.Ip "Bad index while coercing array into hash" 4
.IX Item "Bad index while coercing array into hash"
(F) The index looked up in the hash found as the 0'th element of a
pseudo-hash is not legal.  Index values must be at 1 or greater.
See the perlref manpage.
.Ip "Badly placed ()'s" 4
.IX Item "Badly placed ()'s"
(A) You've accidentally run your script through \fBcsh\fR instead
of Perl.  Check the #! line, or manually feed your script into
Perl yourself.
.Ip "Bad name after \f(CW%s::\fR" 4
.IX Item "Bad name after %s::"
(F) You started to name a symbol by using a package prefix, and then
didn't finish the symbol.  In particular, you can't interpolate outside
of quotes, so
.Sp
.Vb 2
\&    $var = 'myvar';
\&    $sym = mypack::$var;
.Ve
is not the same as
.Sp
.Vb 2
\&    $var = 'myvar';
\&    $sym = "mypack::$var";
.Ve
.Ip "Bad \fIrealloc()\fR ignored" 4
.IX Item "Bad realloc() ignored"
(S malloc) An internal routine called \fIrealloc()\fR on something that had
never been \fImalloc()\fRed in the first place. Mandatory, but can be disabled
by setting environment variable \f(CW\*(C`PERL_BADFREE\*(C'\fR to 1.
.Ip "Bad symbol for array" 4
.IX Item "Bad symbol for array"
(P) An internal request asked to add an array entry to something that
wasn't a symbol table entry.
.Ip "Bad symbol for filehandle" 4
.IX Item "Bad symbol for filehandle"
(P) An internal request asked to add a filehandle entry to something
that wasn't a symbol table entry.
.Ip "Bad symbol for hash" 4
.IX Item "Bad symbol for hash"
(P) An internal request asked to add a hash entry to something that
wasn't a symbol table entry.
.Ip "Bareword found in conditional" 4
.IX Item "Bareword found in conditional"
(W bareword) The compiler found a bareword where it expected a
conditional, which often indicates that an || or && was parsed as part
of the last argument of the previous construct, for example:
.Sp
.Vb 1
\&    open FOO || die;
.Ve
It may also indicate a misspelled constant that has been interpreted as
a bareword:
.Sp
.Vb 2
\&    use constant TYPO => 1;
\&    if (TYOP) { print "foo" }
.Ve
The \f(CW\*(C`strict\*(C'\fR pragma is useful in avoiding such errors.
.if n .Ip "Bareword """"%s"""" not allowed while """"strict subs"""" in use" 4
.el .Ip "Bareword ``%s'' not allowed while ``strict subs'' in use" 4
.IX Item "Bareword "%s not allowed while strict subs in use"
(F) With \*(L"strict subs\*(R" in use, a bareword is only allowed as a
subroutine identifier, in curly brackets or to the left of the \*(L"=>\*(R"
symbol.  Perhaps you need to predeclare a subroutine?
.if n .Ip "Bareword """"%s"""" refers to nonexistent package" 4
.el .Ip "Bareword ``%s'' refers to nonexistent package" 4
.IX Item "Bareword "%s refers to nonexistent package"
(W bareword) You used a qualified bareword of the form \f(CW\*(C`Foo::\*(C'\fR, but the
compiler saw no other uses of that namespace before that point.  Perhaps
you need to predeclare a package?
.Ip "\s-1BEGIN\s0 failed\*(--compilation aborted" 4
.IX Item "BEGIN failedcompilation aborted"
(F) An untrapped exception was raised while executing a \s-1BEGIN\s0
subroutine.  Compilation stops immediately and the interpreter is
exited.
.Ip "\s-1BEGIN\s0 not safe after errors\*(--compilation aborted" 4
.IX Item "BEGIN not safe after errorscompilation aborted"
(F) Perl found a \f(CW\*(C`BEGIN {}\*(C'\fR subroutine (or a \f(CW\*(C`use\*(C'\fR directive, which
implies a \f(CW\*(C`BEGIN {}\*(C'\fR) after one or more compilation errors had already
occurred.  Since the intended environment for the \f(CW\*(C`BEGIN {}\*(C'\fR could not
be guaranteed (due to the errors), and since subsequent code likely
depends on its correct operation, Perl just gave up.
.Ip "\e1 better written as \f(CW$1\fR" 4
.IX Item "1 better written as $1"
(W syntax) Outside of patterns, backreferences live on as variables.
The use of backslashes is grandfathered on the right-hand side of a
substitution, but stylistically it's better to use the variable form
because other Perl programmers will expect it, and it works better if
there are more than 9 backreferences.
.Ip "Binary number > 0b11111111111111111111111111111111 non-portable" 4
.IX Item "Binary number > 0b11111111111111111111111111111111 non-portable"
(W portable) The binary number you specified is larger than 2**32\-1
(4294967295) and therefore non-portable between systems.  See
the perlport manpage for more on portability concerns.
.Ip "\fIbind()\fR on closed socket \f(CW%s\fR" 4
.IX Item "bind() on closed socket %s"
(W closed) You tried to do a bind on a closed socket.  Did you forget to
check the return value of your \fIsocket()\fR call?  See the bind entry in the perlfunc manpage.
.Ip "Bit vector size > 32 non-portable" 4
.IX Item "Bit vector size > 32 non-portable"
(W portable) Using bit vector sizes larger than 32 is non-portable.
.Ip "Bizarre copy of \f(CW%s\fR in \f(CW%s\fR" 4
.IX Item "Bizarre copy of %s in %s"
(P) Perl detected an attempt to copy an internal value that is not
copyable.
.Ip "\fB\-P\fR not allowed for setuid/setgid script" 4
.IX Item "-P not allowed for setuid/setgid script"
(F) The script would have to be opened by the C preprocessor by name,
which provides a race condition that breaks security.
.Ip "Buffer overflow in prime_env_iter: \f(CW%s\fR" 4
.IX Item "Buffer overflow in prime_env_iter: %s"
(W internal) A warning peculiar to \s-1VMS\s0.  While Perl was preparing to
iterate over \f(CW%ENV\fR, it encountered a logical name or symbol definition
which was too long, so it was truncated to the string shown.
.Ip "Callback called exit" 4
.IX Item "Callback called exit"
(F) A subroutine invoked from an external package via \fIcall_sv()\fR
exited by calling exit.
.Ip "%\fIs()\fR called too early to check prototype" 4
.IX Item "%s() called too early to check prototype"
(W prototype) You've called a function that has a prototype before the
parser saw a definition or declaration for it, and Perl could not check
that the call conforms to the prototype.  You need to either add an
early prototype declaration for the subroutine in question, or move the
subroutine definition ahead of the call to get proper prototype
checking.  Alternatively, if you are certain that you're calling the
function correctly, you may put an ampersand before the name to avoid
the warning.  See the perlsub manpage.
.Ip "/ cannot take a count" 4
.IX Item "/ cannot take a count"
(F) You had an unpack template indicating a counted-length string, but
you have also specified an explicit size for the string.  See
the pack entry in the perlfunc manpage.
.Ip "Can't bless non-reference value" 4
.IX Item "Can't bless non-reference value"
(F) Only hard references may be blessed.  This is how Perl \*(L"enforces\*(R"
encapsulation of objects.  See the perlobj manpage.
.if n .Ip "Can't call method """"%s"""" in empty package """"%s""""" 4
.el .Ip "Can't call method ``%s'' in empty package ``%s''" 4
.IX Item "Can't call method "%s in empty package %s"
(F) You called a method correctly, and it correctly indicated a package
functioning as a class, but that package doesn't have \s-1ANYTHING\s0 defined
in it, let alone methods.  See the perlobj manpage.
.if n .Ip "Can't call method """"%s"""" on an undefined value" 4
.el .Ip "Can't call method ``%s'' on an undefined value" 4
.IX Item "Can't call method "%s on an undefined value"
(F) You used the syntax of a method call, but the slot filled by the
object reference or package name contains an undefined value.  Something
like this will reproduce the error:
.Sp
.Vb 3
\&    $BADREF = undef;
\&    process $BADREF 1,2,3;
\&    $BADREF->process(1,2,3);
.Ve
.if n .Ip "Can't call method """"%s"""" on unblessed reference" 4
.el .Ip "Can't call method ``%s'' on unblessed reference" 4
.IX Item "Can't call method "%s on unblessed reference"
(F) A method call must know in what package it's supposed to run.  It
ordinarily finds this out from the object reference you supply, but you
didn't supply an object reference in this case.  A reference isn't an
object reference until it has been blessed.  See the perlobj manpage.
.if n .Ip "Can't call method """"%s"""" without a package or object reference" 4
.el .Ip "Can't call method ``%s'' without a package or object reference" 4
.IX Item "Can't call method "%s without a package or object reference"
(F) You used the syntax of a method call, but the slot filled by the
object reference or package name contains an expression that returns a
defined value which is neither an object reference nor a package name.
Something like this will reproduce the error:
.Sp
.Vb 3
\&    $BADREF = 42;
\&    process $BADREF 1,2,3;
\&    $BADREF->process(1,2,3);
.Ve
.Ip "Can't chdir to \f(CW%s\fR" 4
.IX Item "Can't chdir to %s"
(F) You called \f(CW\*(C`perl \-x/foo/bar\*(C'\fR, but \f(CW\*(C`/foo/bar\*(C'\fR is not a directory
that you can chdir to, possibly because it doesn't exist.
.if n .Ip "Can't check filesystem of script """"%s"""" for nosuid" 4
.el .Ip "Can't check filesystem of script ``%s'' for nosuid" 4
.IX Item "Can't check filesystem of script "%s for nosuid"
(P) For some reason you can't check the filesystem of the script for
nosuid.
.Ip "Can't coerce array into hash" 4
.IX Item "Can't coerce array into hash"
(F) You used an array where a hash was expected, but the array has no
information on how to map from keys to array indices.  You can do that
only with arrays that have a hash reference at index 0.
.Ip "Can't coerce \f(CW%s\fR to integer in \f(CW%s\fR" 4
.IX Item "Can't coerce %s to integer in %s"
(F) Certain types of SVs, in particular real symbol table entries
(typeglobs), can't be forced to stop being what they are.  So you can't
say things like:
.Sp
.Vb 1
\&    *foo += 1;
.Ve
You \s-1CAN\s0 say
.Sp
.Vb 2
\&    $foo = *foo;
\&    $foo += 1;
.Ve
but then \f(CW$foo\fR no longer contains a glob.
.Ip "Can't coerce \f(CW%s\fR to number in \f(CW%s\fR" 4
.IX Item "Can't coerce %s to number in %s"
(F) Certain types of SVs, in particular real symbol table entries
(typeglobs), can't be forced to stop being what they are.
.Ip "Can't coerce \f(CW%s\fR to string in \f(CW%s\fR" 4
.IX Item "Can't coerce %s to string in %s"
(F) Certain types of SVs, in particular real symbol table entries
(typeglobs), can't be forced to stop being what they are.
.Ip "Can't create pipe mailbox" 4
.IX Item "Can't create pipe mailbox"
(P) An error peculiar to \s-1VMS\s0.  The process is suffering from exhausted
quotas or other plumbing problems.
.if n .Ip "Can't declare class for non-scalar \f(CW%s\fR in """"%s""""" 4
.el .Ip "Can't declare class for non-scalar \f(CW%s\fR in ``%s''" 4
.IX Item "Can't declare class for non-scalar %s in "%s"
(S) Currently, only scalar variables can declared with a specific class
qualifier in a \*(L"my\*(R" or \*(L"our\*(R" declaration.  The semantics may be extended
for other types of variables in future.
.if n .Ip "Can't declare \f(CW%s\fR in """"%s""""" 4
.el .Ip "Can't declare \f(CW%s\fR in ``%s''" 4
.IX Item "Can't declare %s in "%s"
(F) Only scalar, array, and hash variables may be declared as \*(L"my\*(R" or
\&\*(L"our\*(R" variables.  They must have ordinary identifiers as names.
.Ip "Can't do inplace edit: \f(CW%s\fR is not a regular file" 4
.IX Item "Can't do inplace edit: %s is not a regular file"
(S inplace) You tried to use the \fB\-i\fR switch on a special file, such as
a file in /dev, or a \s-1FIFO\s0.  The file was ignored.
.Ip "Can't do inplace edit on \f(CW%s:\fR \f(CW%s\fR" 4
.IX Item "Can't do inplace edit on %s: %s"
(S inplace) The creation of the new file failed for the indicated
reason.
.Ip "Can't do inplace edit without backup" 4
.IX Item "Can't do inplace edit without backup"
(F) You're on a system such as \s-1MS-DOS\s0 that gets confused if you try
reading from a deleted (but still opened) file.  You have to say
\&\f(CW\*(C`\-i.bak\*(C'\fR, or some such.
.Ip "Can't do inplace edit: \f(CW%s\fR would not be unique" 4
.IX Item "Can't do inplace edit: %s would not be unique"
(S inplace) Your filesystem does not support filenames longer than 14
characters and Perl was unable to create a unique filename during
inplace editing with the \fB\-i\fR switch.  The file was ignored.
.Ip "Can't do {n,m} with n > m before << \s-1HERE\s0 in regex m/%s/" 4
.IX Item "Can't do {n,m} with n > m before << HERE in regex m/%s/"
(F) Minima must be less than or equal to maxima. If you really want your
regexp to match something 0 times, just put {0}. The << \s-1HERE\s0 shows in the
regular expression about where the problem was discovered. See the perlre manpage.
.Ip "Can't do setegid!" 4
.IX Item "Can't do setegid!"
(P) The \fIsetegid()\fR call failed for some reason in the setuid emulator of
suidperl.
.Ip "Can't do seteuid!" 4
.IX Item "Can't do seteuid!"
(P) The setuid emulator of suidperl failed for some reason.
.Ip "Can't do setuid" 4
.IX Item "Can't do setuid"
(F) This typically means that ordinary perl tried to exec suidperl to do
setuid emulation, but couldn't exec it.  It looks for a name of the form
sperl5.000 in the same directory that the perl executable resides under
the name perl5.000, typically /usr/local/bin on Unix machines.  If the
file is there, check the execute permissions.  If it isn't, ask your
sysadmin why he and/or she removed it.
.Ip "Can't do waitpid with flags" 4
.IX Item "Can't do waitpid with flags"
(F) This machine doesn't have either \fIwaitpid()\fR or \fIwait4()\fR, so only
\&\fIwaitpid()\fR without flags is emulated.
.Ip "Can't emulate \-%s on #! line" 4
.IX Item "Can't emulate -%s on #! line"
(F) The #! line specifies a switch that doesn't make sense at this
point.  For example, it'd be kind of silly to put a \fB\-x\fR on the #!
line.
.if n .Ip "Can't exec """"%s"""": \f(CW%s\fR" 4
.el .Ip "Can't exec ``%s'': \f(CW%s\fR" 4
.IX Item "Can't exec "%s: %s"
(W exec) An \fIsystem()\fR, \fIexec()\fR, or piped open call could not execute the
named program for the indicated reason.  Typical reasons include: the
permissions were wrong on the file, the file wasn't found in
\&\f(CW\*(C`$ENV{PATH}\*(C'\fR, the executable in question was compiled for another
architecture, or the #! line in a script points to an interpreter that
can't be run for similar reasons.  (Or maybe your system doesn't support
#! at all.)
.Ip "Can't exec \f(CW%s\fR" 4
.IX Item "Can't exec %s"
(F) Perl was trying to execute the indicated program for you because
that's what the #! line said.  If that's not what you wanted, you may
need to mention \*(L"perl\*(R" on the #! line somewhere.
.Ip "Can't execute \f(CW%s\fR" 4
.IX Item "Can't execute %s"
(F) You used the \fB\-S\fR switch, but the copies of the script to execute
found in the \s-1PATH\s0 did not have correct permissions.
.if n .Ip "Can't find an opnumber for """"%s""""" 4
.el .Ip "Can't find an opnumber for ``%s''" 4
.IX Item "Can't find an opnumber for "%s"
(F) A string of a form \f(CW\*(C`CORE::word\*(C'\fR was given to \fIprototype()\fR, but there
is no builtin with the name \f(CW\*(C`word\*(C'\fR.
.Ip "Can't find label \f(CW%s\fR" 4
.IX Item "Can't find label %s"
(F) You said to goto a label that isn't mentioned anywhere that it's
possible for us to go to.  See the goto entry in the perlfunc manpage.
.Ip "Can't find \f(CW%s\fR on \s-1PATH\s0" 4
.IX Item "Can't find %s on PATH"
(F) You used the \fB\-S\fR switch, but the script to execute could not be
found in the \s-1PATH\s0.
.Ip "Can't find \f(CW%s\fR on \s-1PATH\s0, '.' not in \s-1PATH\s0" 4
.IX Item "Can't find %s on PATH, '.' not in PATH"
(F) You used the \fB\-S\fR switch, but the script to execute could not be
found in the \s-1PATH\s0, or at least not with the correct permissions.  The
script exists in the current directory, but \s-1PATH\s0 prohibits running it.
.Ip "Can't find string terminator \f(CW%s\fR anywhere before \s-1EOF\s0" 4
.IX Item "Can't find string terminator %s anywhere before EOF"
(F) Perl strings can stretch over multiple lines.  This message means
that the closing delimiter was omitted.  Because bracketed quotes count
nesting levels, the following is missing its final parenthesis:
.Sp
.Vb 1
\&    print q(The character '(' starts a side comment.);
.Ve
If you're getting this error from a here-document, you may have included
unseen whitespace before or after your closing tag. A good programmer's
editor will have a way to help you find these characters.
.Ip "Can't find \f(CW%s\fR property definition \f(CW%s\fR" 4
.IX Item "Can't find %s property definition %s"
(F) You may have tried to use \f(CW\*(C`\ep\*(C'\fR which means a Unicode property for
example \ep{Lu} is all uppercase letters.  Escape the \f(CW\*(C`\ep\*(C'\fR, either
\&\f(CW\*(C`\e\ep\*(C'\fR (just the \f(CW\*(C`\ep\*(C'\fR) or by \f(CW\*(C`\eQ\ep\*(C'\fR (the rest of the string, until
possible \f(CW\*(C`\eE\*(C'\fR).
.Ip "Can't fork" 4
.IX Item "Can't fork"
(F) A fatal error occurred while trying to fork while opening a
pipeline.
.Ip "Can't get filespec \- stale stat buffer?" 4
.IX Item "Can't get filespec - stale stat buffer?"
(S) A warning peculiar to \s-1VMS\s0.  This arises because of the difference
between access checks under \s-1VMS\s0 and under the Unix model Perl assumes.
Under \s-1VMS\s0, access checks are done by filename, rather than by bits in
the stat buffer, so that ACLs and other protections can be taken into
account.  Unfortunately, Perl assumes that the stat buffer contains all
the necessary information, and passes it, instead of the filespec, to
the access checking routine.  It will try to retrieve the filespec using
the device name and \s-1FID\s0 present in the stat buffer, but this works only
if you haven't made a subsequent call to the \s-1CRTL\s0 \fIstat()\fR routine,
because the device name is overwritten with each call.  If this warning
appears, the name lookup failed, and the access checking routine gave up
and returned \s-1FALSE\s0, just to be conservative.  (Note: The access checking
routine knows about the Perl \f(CW\*(C`stat\*(C'\fR operator and file tests, so you
shouldn't ever see this warning in response to a Perl command; it arises
only if some internal code takes stat buffers lightly.)
.Ip "Can't get pipe mailbox device name" 4
.IX Item "Can't get pipe mailbox device name"
(P) An error peculiar to \s-1VMS\s0.  After creating a mailbox to act as a
pipe, Perl can't retrieve its name for later use.
.Ip "Can't get \s-1SYSGEN\s0 parameter value for \s-1MAXBUF\s0" 4
.IX Item "Can't get SYSGEN parameter value for MAXBUF"
(P) An error peculiar to \s-1VMS\s0.  Perl asked \f(CW$GETSYI\fR how big you want your
mailbox buffers to be, and didn't get an answer.
.if n .Ip "Can't """"goto"""" into the middle of a foreach loop" 4
.el .Ip "Can't ``goto'' into the middle of a foreach loop" 4
.IX Item "Can't "goto into the middle of a foreach loop"
(F) A \*(L"goto\*(R" statement was executed to jump into the middle of a foreach
loop.  You can't get there from here.  See the goto entry in the perlfunc manpage.
.if n .Ip "Can't """"goto"""" out of a pseudo block" 4
.el .Ip "Can't ``goto'' out of a pseudo block" 4
.IX Item "Can't "goto out of a pseudo block"
(F) A \*(L"goto\*(R" statement was executed to jump out of what might look like
a block, except that it isn't a proper block.  This usually occurs if
you tried to jump out of a \fIsort()\fR block or subroutine, which is a no-no.
See the goto entry in the perlfunc manpage.
.Ip "Can't goto subroutine from an eval-string" 4
.IX Item "Can't goto subroutine from an eval-string"
(F) The \*(L"goto subroutine\*(R" call can't be used to jump out of an eval
\&\*(L"string\*(R".  (You can use it to jump out of an eval {\s-1BLOCK\s0}, but you
probably don't want to.)
.Ip "Can't goto subroutine outside a subroutine" 4
.IX Item "Can't goto subroutine outside a subroutine"
(F) The deeply magical \*(L"goto subroutine\*(R" call can only replace one
subroutine call for another.  It can't manufacture one out of whole
cloth.  In general you should be calling it out of only an \s-1AUTOLOAD\s0
routine anyway.  See the goto entry in the perlfunc manpage.
.Ip "Can't ignore signal \s-1CHLD\s0, forcing to default" 4
.IX Item "Can't ignore signal CHLD, forcing to default"
(W signal) Perl has detected that it is being run with the \s-1SIGCHLD\s0
signal (sometimes known as \s-1SIGCLD\s0) disabled.  Since disabling this
signal will interfere with proper determination of exit status of child
processes, Perl has reset the signal to its default value.  This
situation typically indicates that the parent program under which Perl
may be running (e.g. cron) is being very careless.
.if n .Ip "Can't """"last"""" outside a loop block" 4
.el .Ip "Can't ``last'' outside a loop block" 4
.IX Item "Can't "last outside a loop block"
(F) A \*(L"last\*(R" statement was executed to break out of the current block,
except that there's this itty bitty problem called there isn't a current
block.  Note that an \*(L"if\*(R" or \*(L"else\*(R" block doesn't count as a \*(L"loopish\*(R"
block, as doesn't a block given to \fIsort()\fR, \fImap()\fR or \fIgrep()\fR.  You can
usually double the curlies to get the same effect though, because the
inner curlies will be considered a block that loops once.  See
the last entry in the perlfunc manpage.
.Ip "Can't localize lexical variable \f(CW%s\fR" 4
.IX Item "Can't localize lexical variable %s"
(F) You used local on a variable name that was previously declared as a
lexical variable using \*(L"my\*(R".  This is not allowed.  If you want to
localize a package variable of the same name, qualify it with the
package name.
.Ip "Can't localize pseudo-hash element" 4
.IX Item "Can't localize pseudo-hash element"
(F) You said something like \f(CW\*(C`local $ar\->{'key'}\*(C'\fR, where \f(CW$ar\fR is a
reference to a pseudo-hash.  That hasn't been implemented yet, but you
can get a similar effect by localizing the corresponding array element
directly \*(-- \f(CW\*(C`local $ar\->[$ar\->[0]{'key'}]\*(C'\fR.
.Ip "Can't localize through a reference" 4
.IX Item "Can't localize through a reference"
(F) You said something like \f(CW\*(C`local $$ref\*(C'\fR, which Perl can't currently
handle, because when it goes to restore the old value of whatever \f(CW$ref\fR
pointed to after the scope of the \fIlocal()\fR is finished, it can't be sure
that \f(CW$ref\fR will still be a reference.  
.Ip "Can't locate \f(CW%s\fR" 4
.IX Item "Can't locate %s"
(F) You said to \f(CW\*(C`do\*(C'\fR (or \f(CW\*(C`require\*(C'\fR, or \f(CW\*(C`use\*(C'\fR) a file that couldn't be
found. Perl looks for the file in all the locations mentioned in \f(CW@INC\fR,
unless the file name included the full path to the file.  Perhaps you
need to set the \s-1PERL5LIB\s0 or \s-1PERL5OPT\s0 environment variable to say where
the extra library is, or maybe the script needs to add the library name
to \f(CW@INC\fR.  Or maybe you just misspelled the name of the file.  See
the require entry in the perlfunc manpage and the lib manpage.
.Ip "Can't locate auto/%s.al in \f(CW@INC\fR" 4
.IX Item "Can't locate auto/%s.al in @INC"
(F) A function (or method) was called in a package which allows
autoload, but there is no function to autoload.  Most probable causes
are a misprint in a function/method name or a failure to \f(CW\*(C`AutoSplit\*(C'\fR
the file, say, by doing \f(CW\*(C`make install\*(C'\fR.
.if n .Ip "Can't locate object method """"%s"""" via package """"%s""""" 4
.el .Ip "Can't locate object method ``%s'' via package ``%s''" 4
.IX Item "Can't locate object method "%s via package %s"
(F) You called a method correctly, and it correctly indicated a package
functioning as a class, but that package doesn't define that particular
method, nor does any of its base classes.  See the perlobj manpage.
.if n .Ip "(perhaps you forgot to load """"%s""""?)" 4
.el .Ip "(perhaps you forgot to load ``%s''?)" 4
.IX Item "(perhaps you forgot to load "%s?)"
(F) This is an educated guess made in conjunction with the message
\&\*(L"Can't locate object method \e\*(R"%s\e\*(L" via package \e\*(R"%s\e"".  It often means
that a method requires a package that has not been loaded.
.Ip "Can't locate package \f(CW%s\fR for @%s::ISA" 4
.IX Item "Can't locate package %s for @%s::ISA"
(W syntax) The \f(CW@ISA\fR array contained the name of another package that
doesn't seem to exist.
.Ip "Can't make list assignment to \e%ENV on this system" 4
.IX Item "Can't make list assignment to %ENV on this system"
(F) List assignment to \f(CW%ENV\fR is not supported on some systems, notably
\&\s-1VMS\s0.
.Ip "Can't modify \f(CW%s\fR in \f(CW%s\fR" 4
.IX Item "Can't modify %s in %s"
(F) You aren't allowed to assign to the item indicated, or otherwise try
to change it, such as with an auto-increment.
.Ip "Can't modify nonexistent substring" 4
.IX Item "Can't modify nonexistent substring"
(P) The internal routine that does assignment to a \fIsubstr()\fR was handed
a \s-1NULL\s0.
.Ip "Can't modify non-lvalue subroutine call" 4
.IX Item "Can't modify non-lvalue subroutine call"
(F) Subroutines meant to be used in lvalue context should be declared as
such, see the Lvalue subroutines entry in the perlsub manpage.
.Ip "Can't msgrcv to read-only var" 4
.IX Item "Can't msgrcv to read-only var"
(F) The target of a msgrcv must be modifiable to be used as a receive
buffer.
.if n .Ip "Can't """"next"""" outside a loop block" 4
.el .Ip "Can't ``next'' outside a loop block" 4
.IX Item "Can't "next outside a loop block"
(F) A \*(L"next\*(R" statement was executed to reiterate the current block, but
there isn't a current block.  Note that an \*(L"if\*(R" or \*(L"else\*(R" block doesn't
count as a \*(L"loopish\*(R" block, as doesn't a block given to \fIsort()\fR, \fImap()\fR or
\&\fIgrep()\fR.  You can usually double the curlies to get the same effect
though, because the inner curlies will be considered a block that loops
once.  See the next entry in the perlfunc manpage.
.Ip "Can't open \f(CW%s:\fR \f(CW%s\fR" 4
.IX Item "Can't open %s: %s"
(S inplace) The implicit opening of a file through use of the \f(CW\*(C`<>\*(C'\fR
filehandle, either implicitly under the \f(CW\*(C`\-n\*(C'\fR or \f(CW\*(C`\-p\*(C'\fR command-line
switches, or explicitly, failed for the indicated reason.  Usually this
is because you don't have read permission for a file which you named on
the command line.
.Ip "Can't open bidirectional pipe" 4
.IX Item "Can't open bidirectional pipe"
(W pipe) You tried to say \f(CW\*(C`open(CMD, "|cmd|")\*(C'\fR, which is not supported.
You can try any of several modules in the Perl library to do this, such
as \s-1IPC:\s0:Open2.  Alternately, direct the pipe's output to a file using
\&\*(L">\*(R", and then read it in under a different file handle.
.Ip "Can't open error file \f(CW%s\fR as stderr" 4
.IX Item "Can't open error file %s as stderr"
(F) An error peculiar to \s-1VMS\s0.  Perl does its own command line
redirection, and couldn't open the file specified after '2>' or '2>>' on
the command line for writing.
.Ip "Can't open input file \f(CW%s\fR as stdin" 4
.IX Item "Can't open input file %s as stdin"
(F) An error peculiar to \s-1VMS\s0.  Perl does its own command line
redirection, and couldn't open the file specified after '<' on the
command line for reading.
.Ip "Can't open output file \f(CW%s\fR as stdout" 4
.IX Item "Can't open output file %s as stdout"
(F) An error peculiar to \s-1VMS\s0.  Perl does its own command line
redirection, and couldn't open the file specified after '>' or '>>' on
the command line for writing.
.Ip "Can't open output pipe (name: \f(CW%s\fR)" 4
.IX Item "Can't open output pipe (name: %s)"
(P) An error peculiar to \s-1VMS\s0.  Perl does its own command line
redirection, and couldn't open the pipe into which to send data destined
for stdout.
.if n .Ip "Can't open perl script """"%s"""": \f(CW%s\fR" 4
.el .Ip "Can't open perl script ``%s'': \f(CW%s\fR" 4
.IX Item "Can't open perl script "%s: %s"
(F) The script you specified can't be opened for the indicated reason.
.Ip "Can't read \s-1CRTL\s0 environ" 4
.IX Item "Can't read CRTL environ"
(S) A warning peculiar to \s-1VMS\s0.  Perl tried to read an element of \f(CW%ENV\fR
from the \s-1CRTL\s0's internal environment array and discovered the array was
missing.  You need to figure out where your \s-1CRTL\s0 misplaced its environ
or define \fI\s-1PERL_ENV_TABLES\s0\fR (see the perlvms manpage) so that environ is not
searched.
.Ip "Can't redefine active sort subroutine \f(CW%s\fR" 4
.IX Item "Can't redefine active sort subroutine %s"
(F) Perl optimizes the internal handling of sort subroutines and keeps
pointers into them.  You tried to redefine one such sort subroutine when
it was currently active, which is not allowed.  If you really want to do
this, you should write \f(CW\*(C`sort { &func } @x\*(C'\fR instead of \f(CW\*(C`sort func @x\*(C'\fR.
.if n .Ip "Can't """"redo"""" outside a loop block" 4
.el .Ip "Can't ``redo'' outside a loop block" 4
.IX Item "Can't "redo outside a loop block"
(F) A \*(L"redo\*(R" statement was executed to restart the current block, but
there isn't a current block.  Note that an \*(L"if\*(R" or \*(L"else\*(R" block doesn't
count as a \*(L"loopish\*(R" block, as doesn't a block given to \fIsort()\fR, \fImap()\fR
or \fIgrep()\fR.  You can usually double the curlies to get the same effect
though, because the inner curlies will be considered a block that
loops once.  See the redo entry in the perlfunc manpage.
.Ip "Can't remove \f(CW%s:\fR \f(CW%s\fR, skipping file" 4
.IX Item "Can't remove %s: %s, skipping file"
(S inplace) You requested an inplace edit without creating a backup
file.  Perl was unable to remove the original file to replace it with
the modified file.  The file was left unmodified.
.Ip "Can't rename \f(CW%s\fR to \f(CW%s:\fR \f(CW%s\fR, skipping file" 4
.IX Item "Can't rename %s to %s: %s, skipping file"
(S inplace) The rename done by the \fB\-i\fR switch failed for some reason,
probably because you don't have write permission to the directory.
.Ip "Can't reopen input pipe (name: \f(CW%s\fR) in binary mode" 4
.IX Item "Can't reopen input pipe (name: %s) in binary mode"
(P) An error peculiar to \s-1VMS\s0.  Perl thought stdin was a pipe, and tried
to reopen it to accept binary data.  Alas, it failed.
.Ip "Can't resolve method `%s' overloading `%s' in package `%s'" 4
.IX Item "Can't resolve method `%s' overloading `%s' in package `%s'"
(F|P) Error resolving overloading specified by a method name (as opposed
to a subroutine reference): no such method callable via the package. If
method name is \f(CW\*(C`???\*(C'\fR, this is an internal error.
.Ip "Can't reswap uid and euid" 4
.IX Item "Can't reswap uid and euid"
(P) The \fIsetreuid()\fR call failed for some reason in the setuid emulator of
suidperl.
.Ip "Can't return \f(CW%s\fR from lvalue subroutine" 4
.IX Item "Can't return %s from lvalue subroutine"
(F) Perl detected an attempt to return illegal lvalues (such as
temporary or readonly values) from a subroutine used as an lvalue.  This
is not allowed.
.Ip "Can't return \f(CW%s\fR to lvalue scalar context" 4
.IX Item "Can't return %s to lvalue scalar context"
(F) You tried to return a complete array or hash from an lvalue subroutine,
but you called the subroutine in a way that made Perl think you meant
to return only one value. You probably meant to write parentheses around
the call to the subroutine, which tell Perl that the call should be in
list context.
.Ip "Can't return outside a subroutine" 4
.IX Item "Can't return outside a subroutine"
(F) The return statement was executed in mainline code, that is, where
there was no subroutine call to return out of.  See the perlsub manpage.
.if n .Ip "Can't stat script """"%s""""" 4
.el .Ip "Can't stat script ``%s''" 4
.IX Item "Can't stat script "%s"
(P) For some reason you can't \fIfstat()\fR the script even though you have it
open already.  Bizarre.
.Ip "Can't swap uid and euid" 4
.IX Item "Can't swap uid and euid"
(P) The \fIsetreuid()\fR call failed for some reason in the setuid emulator of
suidperl.
.Ip "Can't take log of \f(CW%g\fR" 4
.IX Item "Can't take log of %g"
(F) For ordinary real numbers, you can't take the logarithm of a
negative number or zero. There's a Math::Complex package that comes
standard with Perl, though, if you really want to do that for the
negative numbers.
.Ip "Can't take sqrt of \f(CW%g\fR" 4
.IX Item "Can't take sqrt of %g"
(F) For ordinary real numbers, you can't take the square root of a
negative number.  There's a Math::Complex package that comes standard
with Perl, though, if you really want to do that.
.Ip "Can't undef active subroutine" 4
.IX Item "Can't undef active subroutine"
(F) You can't undefine a routine that's currently running.  You can,
however, redefine it while it's running, and you can even undef the
redefined subroutine while the old routine is running.  Go figure.
.Ip "Can't unshift" 4
.IX Item "Can't unshift"
(F) You tried to unshift an \*(L"unreal\*(R" array that can't be unshifted, such
as the main Perl stack.
.Ip "Can't upgrade that kind of scalar" 4
.IX Item "Can't upgrade that kind of scalar"
(P) The internal sv_upgrade routine adds \*(L"members\*(R" to an \s-1SV\s0, making it
into a more specialized kind of \s-1SV\s0.  The top several \s-1SV\s0 types are so
specialized, however, that they cannot be interconverted.  This message
indicates that such a conversion was attempted.
.Ip "Can't upgrade to undef" 4
.IX Item "Can't upgrade to undef"
(P) The undefined \s-1SV\s0 is the bottom of the totem pole, in the scheme of
upgradability.  Upgrading to undef indicates an error in the code
calling sv_upgrade.
.Ip "Can't use an undefined value as \f(CW%s\fR reference" 4
.IX Item "Can't use an undefined value as %s reference"
(F) A value used as either a hard reference or a symbolic reference must
be a defined value.  This helps to delurk some insidious errors.
.if n .Ip "Can't use bareword (""""%s"""") as \f(CW%s\fR ref while """"strict refs"""" in use" 4
.el .Ip "Can't use bareword (``%s'') as \f(CW%s\fR ref while ``strict refs'' in use" 4
.IX Item "Can't use bareword ("%s) as %s ref while strict refs in use"
(F) Only hard references are allowed by \*(L"strict refs\*(R".  Symbolic
references are disallowed.  See the perlref manpage.
.Ip "Can't use %! because Errno.pm is not available" 4
.IX Item "Can't use %! because Errno.pm is not available"
(F) The first time the %! hash is used, perl automatically loads the
Errno.pm module. The Errno module is expected to tie the %! hash to
provide symbolic names for \f(CW\*(C`$!\*(C'\fR errno values.
.Ip "Can't use \f(CW%s\fR for loop variable" 4
.IX Item "Can't use %s for loop variable"
(F) Only a simple scalar variable may be used as a loop variable on a
foreach.
.if n .Ip "Can't use global \f(CW%s\fR in """"my""""" 4
.el .Ip "Can't use global \f(CW%s\fR in ``my''" 4
.IX Item "Can't use global %s in "my"
(F) You tried to declare a magical variable as a lexical variable.  This
is not allowed, because the magic can be tied to only one location
(namely the global variable) and it would be incredibly confusing to
have variables in your program that looked like magical variables but
weren't.
.if n .Ip "Can't use """"my \f(CW%s\fR"""" in sort comparison" 4
.el .Ip "Can't use ``my \f(CW%s\fR'' in sort comparison" 4
.IX Item "Can't use "my %s in sort comparison"
(F) The global variables \f(CW$a\fR and \f(CW$b\fR are reserved for sort comparisons.
You mentioned \f(CW$a\fR or \f(CW$b\fR in the same line as the <=> or cmp operator,
and the variable had earlier been declared as a lexical variable.
Either qualify the sort variable with the package name, or rename the
lexical variable.
.Ip "Can't use \f(CW%s\fR ref as \f(CW%s\fR ref" 4
.IX Item "Can't use %s ref as %s ref"
(F) You've mixed up your reference types.  You have to dereference a
reference of the type needed.  You can use the \fIref()\fR function to
test the type of the reference, if need be.
.if n .Ip "Can't use string (""""%s"""") as \f(CW%s\fR ref while """"strict refs"""" in use" 4
.el .Ip "Can't use string (``%s'') as \f(CW%s\fR ref while ``strict refs'' in use" 4
.IX Item "Can't use string ("%s) as %s ref while strict refs in use"
(F) Only hard references are allowed by \*(L"strict refs\*(R".  Symbolic
references are disallowed.  See the perlref manpage.
.Ip "Can't use subscript on \f(CW%s\fR" 4
.IX Item "Can't use subscript on %s"
(F) The compiler tried to interpret a bracketed expression as a
subscript.  But to the left of the brackets was an expression that
didn't look like an array reference, or anything else subscriptable.
.Ip "Can't use \e%c to mean $%c in expression" 4
.IX Item "Can't use %c to mean $%c in expression"
(W syntax) In an ordinary expression, backslash is a unary operator that
creates a reference to its argument.  The use of backslash to indicate a
backreference to a matched substring is valid only as part of a regular
expression pattern.  Trying to do this in ordinary Perl code produces a
value that prints out looking like SCALAR(0xdecaf).  Use the \f(CW$1\fR form
instead.
.Ip "Can't weaken a nonreference" 4
.IX Item "Can't weaken a nonreference"
(F) You attempted to weaken something that was not a reference.  Only
references can be weakened.
.Ip "Can't x= to read-only value" 4
.IX Item "Can't x= to read-only value"
(F) You tried to repeat a constant value (often the undefined value)
with an assignment operator, which implies modifying the value itself.
Perhaps you need to copy the value to a temporary, and repeat that.
.Ip "\fIchmod()\fR mode argument is missing initial 0" 4
.IX Item "chmod() mode argument is missing initial 0"
(W chmod) A novice will sometimes say
.Sp
.Vb 1
\&    chmod 777, $filename
.Ve
not realizing that 777 will be interpreted as a decimal number,
equivalent to 01411.  Octal constants are introduced with a leading 0 in
Perl, as in C.
.Ip "\fIclose()\fR on unopened filehandle \f(CW%s\fR" 4
.IX Item "close() on unopened filehandle %s"
(W unopened) You tried to close a filehandle that was never opened.
.Ip "%s: Command not found" 4
.IX Item "%s: Command not found"
(A) You've accidentally run your script through \fBcsh\fR instead of Perl.
Check the #! line, or manually feed your script into Perl yourself.
.Ip "Compilation failed in require" 4
.IX Item "Compilation failed in require"
(F) Perl could not compile a file specified in a \f(CW\*(C`require\*(C'\fR statement.
Perl uses this generic message when none of the errors that it
encountered were severe enough to halt compilation immediately.
.Ip "Complex regular subexpression recursion limit (%d) exceeded" 4
.IX Item "Complex regular subexpression recursion limit (%d) exceeded"
(W regexp) The regular expression engine uses recursion in complex
situations where back-tracking is required.  Recursion depth is limited
to 32766, or perhaps less in architectures where the stack cannot grow
arbitrarily.  (\*(L"Simple\*(R" and \*(L"medium\*(R" situations are handled without
recursion and are not subject to a limit.)  Try shortening the string
under examination; looping in Perl code (e.g. with \f(CW\*(C`while\*(C'\fR) rather than
in the regular expression engine; or rewriting the regular expression so
that it is simpler or backtracks less.  (See the perlfaq2 manpage for information
on \fIMastering Regular Expressions\fR.)
.Ip "\fIconnect()\fR on closed socket \f(CW%s\fR" 4
.IX Item "connect() on closed socket %s"
(W closed) You tried to do a connect on a closed socket.  Did you forget
to check the return value of your \fIsocket()\fR call?  See
the connect entry in the perlfunc manpage.
.Ip "Constant(%s)%s: \f(CW%s\fR" 4
.IX Item "Constant(%s)%s: %s"
(F) The parser found inconsistencies either while attempting to define
an overloaded constant, or when trying to find the character name
specified in the \f(CW\*(C`\eN{...}\*(C'\fR escape.  Perhaps you forgot to load the
corresponding \f(CW\*(C`overload\*(C'\fR or \f(CW\*(C`charnames\*(C'\fR pragma?  See the charnames manpage and
the overload manpage.
.Ip "Constant is not \f(CW%s\fR reference" 4
.IX Item "Constant is not %s reference"
(F) A constant value (perhaps declared using the \f(CW\*(C`use constant\*(C'\fR pragma)
is being dereferenced, but it amounts to the wrong type of reference.
The message indicates the type of reference that was expected. This
usually indicates a syntax error in dereferencing the constant value.
See the Constant Functions entry in the perlsub manpage and the constant manpage.
.Ip "Constant subroutine \f(CW%s\fR redefined" 4
.IX Item "Constant subroutine %s redefined"
(S|W redefine) You redefined a subroutine which had previously been
eligible for inlining.  See the Constant Functions entry in the perlsub manpage for
commentary and workarounds.
.Ip "Constant subroutine \f(CW%s\fR undefined" 4
.IX Item "Constant subroutine %s undefined"
(W misc) You undefined a subroutine which had previously been eligible
for inlining.  See the Constant Functions entry in the perlsub manpage for commentary and
workarounds.
.Ip "Copy method did not return a reference" 4
.IX Item "Copy method did not return a reference"
(F) The method which overloads \*(L"=\*(R" is buggy. See 
the Copy Constructor entry in the overload manpage.
.Ip "\s-1CORE:\s0:%s is not a keyword" 4
.IX Item "CORE::%s is not a keyword"
(F) The \s-1CORE::\s0 namespace is reserved for Perl keywords.
.Ip "corrupted regexp pointers" 4
.IX Item "corrupted regexp pointers"
(P) The regular expression engine got confused by what the regular
expression compiler gave it.
.Ip "corrupted regexp program" 4
.IX Item "corrupted regexp program"
(P) The regular expression engine got passed a regexp program without a
valid magic number.
.Ip "Corrupt malloc ptr 0x%lx at 0x%lx" 4
.IX Item "Corrupt malloc ptr 0x%lx at 0x%lx"
(P) The malloc package that comes with Perl had an internal failure.
.if n .Ip "\f(CW""""\-p""""\fR destination: \f(CW%s\fR" 4
.el .Ip "\f(CW\-p\fR destination: \f(CW%s\fR" 4
.IX Item "-p destination: %s"
(F) An error occurred during the implicit output invoked by the \f(CW\*(C`\-p\*(C'\fR
command-line switch.  (This output goes to \s-1STDOUT\s0 unless you've
redirected it with \fIselect()\fR.)
.if n .Ip "\f(CW""""\-T""""\fR and \f(CW""""\-B""""\fR not implemented on filehandles" 4
.el .Ip "\f(CW\-T\fR and \f(CW\-B\fR not implemented on filehandles" 4
.IX Item "-T and -B not implemented on filehandles"
(F) Perl can't peek at the stdio buffer of filehandles when it doesn't
know about your kind of stdio.  You'll have to use a filename instead.
.if n .Ip "Deep recursion on subroutine """"%s""""" 4
.el .Ip "Deep recursion on subroutine ``%s''" 4
.IX Item "Deep recursion on subroutine "%s"
(W recursion) This subroutine has called itself (directly or indirectly)
100 times more than it has returned.  This probably indicates an
infinite recursion, unless you're writing strange benchmark programs, in
which case it indicates something else.
.Ip "defined(@array) is deprecated" 4
.IX Item "defined(@array) is deprecated"
(D deprecated) \fIdefined()\fR is not usually useful on arrays because it
checks for an undefined \fIscalar\fR value.  If you want to see if the
array is empty, just use \f(CW\*(C`if (@array) { # not empty }\*(C'\fR for example.  
.Ip "defined(%hash) is deprecated" 4
.IX Item "defined(%hash) is deprecated"
(D deprecated) \fIdefined()\fR is not usually useful on hashes because it
checks for an undefined \fIscalar\fR value.  If you want to see if the hash
is empty, just use \f(CW\*(C`if (%hash) { # not empty }\*(C'\fR for example.  
.Ip "Delimiter for here document is too long" 4
.IX Item "Delimiter for here document is too long"
(F) In a here document construct like \f(CW\*(C`<<FOO\*(C'\fR, the label \f(CW\*(C`FOO\*(C'\fR is too
long for Perl to handle.  You have to be seriously twisted to write code
that triggers this error.
.Ip "Did not produce a valid header" 4
.IX Item "Did not produce a valid header"
See Server error.
.Ip "%s did not return a true value" 4
.IX Item "%s did not return a true value"
(F) A required (or used) file must return a true value to indicate that
it compiled correctly and ran its initialization code correctly.  It's
traditional to end such a file with a \*(L"1;\*(R", though any true value would
do.  See the require entry in the perlfunc manpage.
.Ip "(Did you mean &%s instead?)" 4
.IX Item "(Did you mean &%s instead?)"
(W) You probably referred to an imported subroutine &FOO as \f(CW$FOO\fR or some
such.
.if n .Ip "(Did you mean """"local"""" instead of """"our""""?)" 4
.el .Ip "(Did you mean ``local'' instead of ``our''?)" 4
.IX Item "(Did you mean "local instead of our?)"
(W misc) Remember that \*(L"our\*(R" does not localize the declared global
variable.  You have declared it again in the same lexical scope, which
seems superfluous.
.Ip "(Did you mean $ or @ instead of %?)" 4
.IX Item "(Did you mean $ or @ instead of %?)"
(W) You probably said \f(CW%hash\fR{$key} when you meant \f(CW$hash\fR{$key} or
\&\f(CW@hash\fR{@keys}.  On the other hand, maybe you just meant \f(CW%hash\fR and got
carried away.
.Ip "Died" 4
.IX Item "Died"
(F) You passed \fIdie()\fR an empty string (the equivalent of \f(CW\*(C`die ""\*(C'\fR) or
you called it with no args and both \f(CW\*(C`$@\*(C'\fR and \f(CW\*(C`$_\*(C'\fR were empty.
.Ip "Document contains no data" 4
.IX Item "Document contains no data"
See Server error.
.Ip "Don't know how to handle magic of type '%s'" 4
.IX Item "Don't know how to handle magic of type '%s'"
(P) The internal handling of magical variables has been cursed.
.Ip "do_study: out of memory" 4
.IX Item "do_study: out of memory"
(P) This should have been caught by \fIsafemalloc()\fR instead.
.Ip "(Do you need to predeclare \f(CW%s\fR?)" 4
.IX Item "(Do you need to predeclare %s?)"
(S) This is an educated guess made in conjunction with the message \*(L"%s
found where operator expected\*(R".  It often means a subroutine or module
name is being referenced that hasn't been declared yet.  This may be
because of ordering problems in your file, or because of a missing
\&\*(L"sub\*(R", \*(L"package\*(R", \*(L"require\*(R", or \*(L"use\*(R" statement.  If you're referencing
something that isn't defined yet, you don't actually have to define the
subroutine or package before the current location.  You can use an empty
\&\*(L"sub foo;\*(R" or \*(L"package \s-1FOO\s0;\*(R" to enter a \*(L"forward\*(R" declaration.
.Ip "Duplicate \fIfree()\fR ignored" 4
.IX Item "Duplicate free() ignored"
(S malloc) An internal routine called \fIfree()\fR on something that had
already been freed.
.Ip "elseif should be elsif" 4
.IX Item "elseif should be elsif"
(S) There is no keyword \*(L"elseif\*(R" in Perl because Larry thinks it's ugly.
Your code will be interpreted as an attempt to call a method named
\&\*(L"elseif\*(R" for the class returned by the following block.  This is
unlikely to be what you want.
.Ip "entering effective \f(CW%s\fR failed" 4
.IX Item "entering effective %s failed"
(F) While under the \f(CW\*(C`use filetest\*(C'\fR pragma, switching the real and
effective uids or gids failed.
.Ip "Error converting file specification \f(CW%s\fR" 4
.IX Item "Error converting file specification %s"
(F) An error peculiar to \s-1VMS\s0.  Because Perl may have to deal with file
specifications in either \s-1VMS\s0 or Unix syntax, it converts them to a
single form when it must operate on them directly.  Either you've passed
an invalid file specification to Perl, or you've found a case the
conversion routines don't handle.  Drat.
.Ip "%s: Eval-group in insecure regular expression" 4
.IX Item "%s: Eval-group in insecure regular expression"
(F) Perl detected tainted data when trying to compile a regular
expression that contains the \f(CW\*(C`(?{ ... })\*(C'\fR zero-width assertion, which
is unsafe.  See the section on "(?{ code })" in the perlre manpage, and the perlsec manpage.
.Ip "%s: Eval-group not allowed at run time" 4
.IX Item "%s: Eval-group not allowed at run time"
(F) Perl tried to compile a regular expression containing the
\&\f(CW\*(C`(?{ ... })\*(C'\fR zero-width assertion at run time, as it would when the
pattern contains interpolated values.  Since that is a security risk, it
is not allowed.  If you insist, you may still do this by explicitly
building the pattern from an interpolated string at run time and using
that in an \fIeval()\fR.  See the section on "(?{ code })" in the perlre manpage.
.Ip "%s: Eval-group not allowed, use re 'eval'" 4
.IX Item "%s: Eval-group not allowed, use re 'eval'"
(F) A regular expression contained the \f(CW\*(C`(?{ ... })\*(C'\fR zero-width
assertion, but that construct is only allowed when the \f(CW\*(C`use re 'eval'\*(C'\fR
pragma is in effect.  See the section on "(?{ code })" in the perlre manpage.
.Ip "Excessively long <> operator" 4
.IX Item "Excessively long <> operator"
(F) The contents of a <> operator may not exceed the maximum size of a
Perl identifier.  If you're just trying to glob a long list of
filenames, try using the \fIglob()\fR operator, or put the filenames into a
variable and glob that.
.Ip "Execution of \f(CW%s\fR aborted due to compilation errors" 4
.IX Item "Execution of %s aborted due to compilation errors"
(F) The final summary message when a Perl compilation fails.
.Ip "Exiting eval via \f(CW%s\fR" 4
.IX Item "Exiting eval via %s"
(W exiting) You are exiting an eval by unconventional means, such as a
goto, or a loop control statement.
.Ip "Exiting format via \f(CW%s\fR" 4
.IX Item "Exiting format via %s"
(W exiting) You are exiting an eval by unconventional means, such as a
goto, or a loop control statement.
.Ip "Exiting pseudo-block via \f(CW%s\fR" 4
.IX Item "Exiting pseudo-block via %s"
(W exiting) You are exiting a rather special block construct (like a
sort block or subroutine) by unconventional means, such as a goto, or a
loop control statement.  See the sort entry in the perlfunc manpage.
.Ip "Exiting subroutine via \f(CW%s\fR" 4
.IX Item "Exiting subroutine via %s"
(W exiting) You are exiting a subroutine by unconventional means, such
as a goto, or a loop control statement.
.Ip "Exiting substitution via \f(CW%s\fR" 4
.IX Item "Exiting substitution via %s"
(W exiting) You are exiting a substitution by unconventional means, such
as a return, a goto, or a loop control statement.
.Ip "Explicit blessing to '' (assuming package main)" 4
.IX Item "Explicit blessing to '' (assuming package main)"
(W misc) You are blessing a reference to a zero length string.  This has
the effect of blessing the reference into the package main.  This is
usually not what you want.  Consider providing a default target package,
e.g. bless($ref, \f(CW$p\fR || 'MyPackage');
.Ip "%s: Expression syntax" 4
.IX Item "%s: Expression syntax"
(A) You've accidentally run your script through \fBcsh\fR instead of Perl.
Check the #! line, or manually feed your script into Perl yourself.
.Ip "%s failed\*(--call queue aborted" 4
.IX Item "%s failedcall queue aborted"
(F) An untrapped exception was raised while executing a \s-1CHECK\s0, \s-1INIT\s0, or
\&\s-1END\s0 subroutine.  Processing of the remainder of the queue of such
routines has been prematurely ended.
.if n .Ip "false [] range """"%s"""" in regexp" 4
.el .Ip "false [] range ``%s'' in regexp" 4
.IX Item "false [] range "%s in regexp"
(W regexp) A character class range must start and end at a literal
character, not another character class like \f(CW\*(C`\ed\*(C'\fR or \f(CW\*(C`[:alpha:]\*(C'\fR.  The
\&\*(L"\-\*(R" in your false range is interpreted as a literal \*(L"\-\*(R".  Consider
quoting the \*(L"\-\*(R",  \*(L"\e-\*(R".  See the perlre manpage.
.Ip "Fatal \s-1VMS\s0 error at \f(CW%s\fR, line \f(CW%d\fR" 4
.IX Item "Fatal VMS error at %s, line %d"
(P) An error peculiar to \s-1VMS\s0.  Something untoward happened in a \s-1VMS\s0
system service or \s-1RTL\s0 routine; Perl's exit status should provide more
details.  The filename in \*(L"at \f(CW%s\fR\*(R" and the line number in \*(L"line \f(CW%d\fR\*(R" tell
you which section of the Perl source code is distressed.
.Ip "fcntl is not implemented" 4
.IX Item "fcntl is not implemented"
(F) Your machine apparently doesn't implement \fIfcntl()\fR.  What is this, a
\&\s-1PDP-11\s0 or something?
.Ip "Filehandle \f(CW%s\fR opened only for input" 4
.IX Item "Filehandle %s opened only for input"
(W io) You tried to write on a read-only filehandle.  If you intended it
to be a read-write filehandle, you needed to open it with \*(L"+<\*(R" or \*(L"+>\*(R"
or \*(L"+>>\*(R" instead of with \*(L"<\*(R" or nothing.  If you intended only to write
the file, use \*(L">\*(R" or \*(L">>\*(R".  See the open entry in the perlfunc manpage.
.Ip "Filehandle \f(CW%s\fR opened only for output" 4
.IX Item "Filehandle %s opened only for output"
(W io) You tried to read from a filehandle opened only for writing.  If
you intended it to be a read/write filehandle, you needed to open it
with \*(L"+<\*(R" or \*(L"+>\*(R" or \*(L"+>>\*(R" instead of with \*(L"<\*(R" or nothing.  If you
intended only to read from the file, use \*(L"<\*(R".  See the open entry in the perlfunc manpage.
.Ip "Final $ should be \e$ or \f(CW$name\fR" 4
.IX Item "Final $ should be $ or $name"
(F) You must now decide whether the final $ in a string was meant to be
a literal dollar sign, or was meant to introduce a variable name that
happens to be missing.  So you have to put either the backslash or the
name.
.Ip "Final @ should be \e@ or \f(CW@name\fR" 4
.IX Item "Final @ should be @ or @name"
(F) You must now decide whether the final @ in a string was meant to be
a literal \*(L"at\*(R" sign, or was meant to introduce a variable name that
happens to be missing.  So you have to put either the backslash or the
name.
.Ip "\fIflock()\fR on closed filehandle \f(CW%s\fR" 4
.IX Item "flock() on closed filehandle %s"
(W closed) The filehandle you're attempting to \fIflock()\fR got itself closed
some time before now.  Check your logic flow.  \fIflock()\fR operates on
filehandles.  Are you attempting to call \fIflock()\fR on a dirhandle by the
same name?
.Ip "Quantifier follows nothing before << \s-1HERE\s0 in regex m/%s/" 4
.IX Item "Quantifier follows nothing before << HERE in regex m/%s/"
(F) You started a regular expression with a quantifier. Backslash it if you
meant it literally. The << \s-1HERE\s0 shows in the regular expression about where the
problem was discovered. See the perlre manpage.
.Ip "Format not terminated" 4
.IX Item "Format not terminated"
(F) A format must be terminated by a line with a solitary dot.  Perl got
to the end of your file without finding such a line.
.Ip "Format \f(CW%s\fR redefined" 4
.IX Item "Format %s redefined"
(W redefine) You redefined a format.  To suppress this warning, say
.Sp
.Vb 4
\&    {
\&        no warnings;
\&        eval "format NAME =...";
\&    }
.Ve
.Ip "Found = in conditional, should be ==" 4
.IX Item "Found = in conditional, should be =="
(W syntax) You said
.Sp
.Vb 1
\&    if ($foo = 123)
.Ve
when you meant
.Sp
.Vb 1
\&    if ($foo == 123)
.Ve
(or something like that).
.Ip "%s found where operator expected" 4
.IX Item "%s found where operator expected"
(S) The Perl lexer knows whether to expect a term or an operator.  If it
sees what it knows to be a term when it was expecting to see an
operator, it gives you this warning.  Usually it indicates that an
operator or delimiter was omitted, such as a semicolon.
.if n .Ip "gdbm store returned \f(CW%d\fR, errno \f(CW%d\fR, key """"%s""""" 4
.el .Ip "gdbm store returned \f(CW%d\fR, errno \f(CW%d\fR, key ``%s''" 4
.IX Item "gdbm store returned %d, errno %d, key "%s"
(S) A warning from the GDBM_File extension that a store failed.
.Ip "gethostent not implemented" 4
.IX Item "gethostent not implemented"
(F) Your C library apparently doesn't implement \fIgethostent()\fR, probably
because if it did, it'd feel morally obligated to return every hostname
on the Internet.
.Ip "get%\fIsname()\fR on closed socket \f(CW%s\fR" 4
.IX Item "get%sname() on closed socket %s"
(W closed) You tried to get a socket or peer socket name on a closed
socket.  Did you forget to check the return value of your \fIsocket()\fR call?
.if n .Ip "getpwnam returned invalid \s-1UIC\s0 %#o for user """"%s""""" 4
.el .Ip "getpwnam returned invalid \s-1UIC\s0 %#o for user ``%s''" 4
.IX Item "getpwnam returned invalid UIC %#o for user "%s"
(S) A warning peculiar to \s-1VMS\s0.  The call to \f(CW\*(C`sys$getuai\*(C'\fR underlying the
\&\f(CW\*(C`getpwnam\*(C'\fR operator returned an invalid \s-1UIC\s0.
.Ip "\fIgetsockopt()\fR on closed socket \f(CW%s\fR" 4
.IX Item "getsockopt() on closed socket %s"
(W closed) You tried to get a socket option on a closed socket.  Did you
forget to check the return value of your \fIsocket()\fR call?  See
the getsockopt entry in the perlfunc manpage.
.if n .Ip "Global symbol """"%s"""" requires explicit package name" 4
.el .Ip "Global symbol ``%s'' requires explicit package name" 4
.IX Item "Global symbol "%s requires explicit package name"
(F) You've said \*(L"use strict vars\*(R", which indicates that all variables
must either be lexically scoped (using \*(L"my\*(R"), declared beforehand using
\&\*(L"our\*(R", or explicitly qualified to say which package the global variable
is in (using \*(L"::\*(R").
.Ip "glob failed (%s)" 4
.IX Item "glob failed (%s)"
(W glob) Something went wrong with the external \fIprogram\fR\|(s) used for
\&\f(CW\*(C`glob\*(C'\fR and \f(CW\*(C`<*.c>\*(C'\fR.  Usually, this means that you supplied a
\&\f(CW\*(C`glob\*(C'\fR pattern that caused the external program to fail and exit with a
nonzero status.  If the message indicates that the abnormal exit
resulted in a coredump, this may also mean that your csh (C shell) is
broken.  If so, you should change all of the csh-related variables in
config.sh:  If you have tcsh, make the variables refer to it as if it
were csh (e.g.  \f(CW\*(C`full_csh='/usr/bin/tcsh'\*(C'\fR); otherwise, make them all
empty (except that \f(CW\*(C`d_csh\*(C'\fR should be \f(CW\*(C`'undef'\*(C'\fR) so that Perl will
think csh is missing.  In either case, after editing config.sh, run
\&\f(CW\*(C`./Configure \-S\*(C'\fR and rebuild Perl.
.Ip "Glob not terminated" 4
.IX Item "Glob not terminated"
(F) The lexer saw a left angle bracket in a place where it was expecting
a term, so it's looking for the corresponding right angle bracket, and
not finding it.  Chances are you left some needed parentheses out
earlier in the line, and you really meant a \*(L"less than\*(R".
.Ip "Got an error from DosAllocMem" 4
.IX Item "Got an error from DosAllocMem"
(P) An error peculiar to \s-1OS/2\s0.  Most probably you're using an obsolete
version of Perl, and this should not happen anyway.
.Ip "goto must have label" 4
.IX Item "goto must have label"
(F) Unlike with \*(L"next\*(R" or \*(L"last\*(R", you're not allowed to goto an
unspecified destination.  See the goto entry in the perlfunc manpage.
.Ip "%s had compilation errors" 4
.IX Item "%s had compilation errors"
(F) The final summary message when a \f(CW\*(C`perl \-c\*(C'\fR fails.
.Ip "Had to create \f(CW%s\fR unexpectedly" 4
.IX Item "Had to create %s unexpectedly"
(S internal) A routine asked for a symbol from a symbol table that ought
to have existed already, but for some reason it didn't, and had to be
created on an emergency basis to prevent a core dump.
.Ip "Hash %%s missing the % in argument \f(CW%d\fR of %\fIs()\fR" 4
.IX Item "Hash %%s missing the % in argument %d of %s()"
(D deprecated) Really old Perl let you omit the % on hash names in some
spots.  This is now heavily deprecated.
.Ip "%s has too many errors" 4
.IX Item "%s has too many errors"
(F) The parser has given up trying to parse the program after 10 errors.
Further error messages would likely be uninformative.
.Ip "Hexadecimal number > 0xffffffff non-portable" 4
.IX Item "Hexadecimal number > 0xffffffff non-portable"
(W portable) The hexadecimal number you specified is larger than 2**32\-1
(4294967295) and therefore non-portable between systems.  See
the perlport manpage for more on portability concerns.
.Ip "Identifier too long" 4
.IX Item "Identifier too long"
(F) Perl limits identifiers (names for variables, functions, etc.) to
about 250 characters for simple names, and somewhat more for compound
names (like \f(CW\*(C`$A::B\*(C'\fR).  You've exceeded Perl's limits.  Future versions
of Perl are likely to eliminate these arbitrary limitations.
.Ip "Illegal binary digit \f(CW%s\fR" 4
.IX Item "Illegal binary digit %s"
(F) You used a digit other than 0 or 1 in a binary number.
.Ip "Illegal binary digit \f(CW%s\fR ignored" 4
.IX Item "Illegal binary digit %s ignored"
(W digit) You may have tried to use a digit other than 0 or 1 in a
binary number.  Interpretation of the binary number stopped before the
offending digit.
.Ip "Illegal character \f(CW%s\fR (carriage return)" 4
.IX Item "Illegal character %s (carriage return)"
(F) Perl normally treats carriage returns in the program text as it
would any other whitespace, which means you should never see this error
when Perl was built using standard options.  For some reason, your
version of Perl appears to have been built without this support.  Talk
to your Perl administrator.
.Ip "Illegal division by zero" 4
.IX Item "Illegal division by zero"
(F) You tried to divide a number by 0.  Either something was wrong in
your logic, or you need to put a conditional in to guard against
meaningless input.
.Ip "Illegal hexadecimal digit \f(CW%s\fR ignored" 4
.IX Item "Illegal hexadecimal digit %s ignored"
(W digit) You may have tried to use a character other than 0 \- 9 or
A \- F, a \- f in a hexadecimal number.  Interpretation of the hexadecimal
number stopped before the illegal character.
.Ip "Illegal modulus zero" 4
.IX Item "Illegal modulus zero"
(F) You tried to divide a number by 0 to get the remainder.  Most
numbers don't take to this kindly.
.Ip "Illegal number of bits in vec" 4
.IX Item "Illegal number of bits in vec"
(F) The number of bits in \fIvec()\fR (the third argument) must be a power of
two from 1 to 32 (or 64, if your platform supports that).
.Ip "Illegal octal digit \f(CW%s\fR" 4
.IX Item "Illegal octal digit %s"
(F) You used an 8 or 9 in a octal number.
.Ip "Illegal octal digit \f(CW%s\fR ignored" 4
.IX Item "Illegal octal digit %s ignored"
(W digit) You may have tried to use an 8 or 9 in a octal number.
Interpretation of the octal number stopped before the 8 or 9.
.Ip "Illegal switch in \s-1PERL5OPT:\s0 \f(CW%s\fR" 4
.IX Item "Illegal switch in PERL5OPT: %s"
(X) The \s-1PERL5OPT\s0 environment variable may only be used to set the
following switches: \fB\-[DIMUdmw]\fR.
.if n .Ip "Ill-formed \s-1CRTL\s0 environ value """"%s""""" 4
.el .Ip "Ill-formed \s-1CRTL\s0 environ value ``%s''" 4
.IX Item "Ill-formed CRTL environ value "%s"
(W internal) A warning peculiar to \s-1VMS\s0.  Perl tried to read the \s-1CRTL\s0's
internal environ array, and encountered an element without the \f(CW\*(C`=\*(C'\fR
delimiter used to separate keys from values.  The element is ignored.
.Ip "Ill-formed message in prime_env_iter: |%s|" 4
.IX Item "Ill-formed message in prime_env_iter: |%s|"
(W internal) A warning peculiar to \s-1VMS\s0.  Perl tried to read a logical
name or \s-1CLI\s0 symbol definition when preparing to iterate over \f(CW%ENV\fR, and
didn't see the expected delimiter between key and value, so the line was
ignored.
.Ip "(in cleanup) \f(CW%s\fR" 4
.IX Item "(in cleanup) %s"
(W misc) This prefix usually indicates that a \fIDESTROY()\fR method raised
the indicated exception.  Since destructors are usually called by the
system at arbitrary points during execution, and often a vast number of
times, the warning is issued only once for any number of failures that
would otherwise result in the same message being repeated.
.Sp
Failure of user callbacks dispatched using the \f(CW\*(C`G_KEEPERR\*(C'\fR flag could
also result in this warning.  See the G_KEEPERR entry in the perlcall manpage.
.Ip "Insecure dependency in \f(CW%s\fR" 4
.IX Item "Insecure dependency in %s"
(F) You tried to do something that the tainting mechanism didn't like.
The tainting mechanism is turned on when you're running setuid or
setgid, or when you specify \fB\-T\fR to turn it on explicitly.  The
tainting mechanism labels all data that's derived directly or indirectly
from the user, who is considered to be unworthy of your trust.  If any
such data is used in a \*(L"dangerous\*(R" operation, you get this error.  See
the perlsec manpage for more information.
.Ip "Insecure directory in \f(CW%s\fR" 4
.IX Item "Insecure directory in %s"
(F) You can't use \fIsystem()\fR, \fIexec()\fR, or a piped open in a setuid or
setgid script if \f(CW\*(C`$ENV{PATH}\*(C'\fR contains a directory that is writable by
the world.  See the perlsec manpage.
.Ip "Insecure \f(CW$ENV\fR{%s} while running \f(CW%s\fR" 4
.IX Item "Insecure $ENV{%s} while running %s"
(F) You can't use \fIsystem()\fR, \fIexec()\fR, or a piped open in a setuid or
setgid script if any of \f(CW\*(C`$ENV{PATH}\*(C'\fR, \f(CW\*(C`$ENV{IFS}\*(C'\fR, \f(CW\*(C`$ENV{CDPATH}\*(C'\fR,
\&\f(CW\*(C`$ENV{ENV}\*(C'\fR or \f(CW\*(C`$ENV{BASH_ENV}\*(C'\fR are derived from data supplied (or
potentially supplied) by the user.  The script must set the path to a
known value, using trustworthy data.  See the perlsec manpage.
.Ip "Integer overflow in \f(CW%s\fR number" 4
.IX Item "Integer overflow in %s number"
(W overflow) The hexadecimal, octal or binary number you have specified
either as a literal or as an argument to \fIhex()\fR or \fIoct()\fR is too big for
your architecture, and has been converted to a floating point number.
On a 32\-bit architecture the largest hexadecimal, octal or binary number
representable without overflow is 0xFFFFFFFF, 037777777777, or
0b11111111111111111111111111111111 respectively.  Note that Perl
transparently promotes all numbers to a floating point representation
internally\*(--subject to loss of precision errors in subsequent
operations.
.Ip "Internal disaster before << \s-1HERE\s0 in regex m/%s/" 4
.IX Item "Internal disaster before << HERE in regex m/%s/"
(P) Something went badly wrong in the regular expression parser.
The << \s-1HERE\s0 shows in the regular expression about where the problem was
discovered.
.Ip "Internal inconsistency in tracking vforks" 4
.IX Item "Internal inconsistency in tracking vforks"
(S) A warning peculiar to \s-1VMS\s0.  Perl keeps track of the number of times
you've called \f(CW\*(C`fork\*(C'\fR and \f(CW\*(C`exec\*(C'\fR, to determine whether the current call
to \f(CW\*(C`exec\*(C'\fR should affect the current script or a subprocess (see
the exec LIST entry in the perlvms manpage).  Somehow, this count has become scrambled, so
Perl is making a guess and treating this \f(CW\*(C`exec\*(C'\fR as a request to
terminate the Perl script and execute the specified command.
.Ip "Internal urp before << \s-1HERE\s0 in regex m/%s/" 4
.IX Item "Internal urp before << HERE in regex m/%s/"
(P) Something went badly awry in the regular expression parser. The <<<\s-1HERE\s0
shows in the regular expression about where the problem was discovered.
.Ip "%s (...) interpreted as function" 4
.IX Item "%s (...) interpreted as function"
(W syntax) You've run afoul of the rule that says that any list operator
followed by parentheses turns into a function, with all the list
operators arguments found inside the parentheses.  See 
the Terms and List Operators (Leftward) entry in the perlop manpage.
.Ip "Invalid \f(CW%s\fR attribute: \f(CW%s\fR" 4
.IX Item "Invalid %s attribute: %s"
The indicated attribute for a subroutine or variable was not recognized
by Perl or by a user-supplied handler.  See the attributes manpage.
.Ip "Invalid \f(CW%s\fR attributes: \f(CW%s\fR" 4
.IX Item "Invalid %s attributes: %s"
The indicated attributes for a subroutine or variable were not
recognized by Perl or by a user-supplied handler.  See the attributes manpage.
.if n .Ip "Invalid conversion in \f(CW%s:\fR """"%s""""" 4
.el .Ip "Invalid conversion in \f(CW%s:\fR ``%s''" 4
.IX Item "Invalid conversion in %s: "%s"
(W printf) Perl does not understand the given format conversion.  See
the sprintf entry in the perlfunc manpage.
.if n .Ip "invalid [] range """"%s"""" in regexp" 4
.el .Ip "invalid [] range ``%s'' in regexp" 4
.IX Item "invalid [] range "%s in regexp"
(F) The range specified in a character class had a minimum character
greater than the maximum character.  See the perlre manpage.
.Ip "Invalid separator character \f(CW%s\fR in attribute list" 4
.IX Item "Invalid separator character %s in attribute list"
(F) Something other than a colon or whitespace was seen between the
elements of an attribute list.  If the previous attribute had a
parenthesised parameter list, perhaps that list was terminated too soon.
See the attributes manpage.
.Ip "Invalid type in pack: '%s'" 4
.IX Item "Invalid type in pack: '%s'"
(F) The given character is not a valid pack type.  See the pack entry in the perlfunc manpage.
(W pack) The given character is not a valid pack type but used to be
silently ignored.
.Ip "Invalid type in unpack: '%s'" 4
.IX Item "Invalid type in unpack: '%s'"
(F) The given character is not a valid unpack type.  See
the unpack entry in the perlfunc manpage.
(W unpack) The given character is not a valid unpack type but used to be
silently ignored.
.Ip "ioctl is not implemented" 4
.IX Item "ioctl is not implemented"
(F) Your machine apparently doesn't implement \fIioctl()\fR, which is pretty
strange for a machine that supports C.
.Ip "`%s' is not a code reference" 4
.IX Item "`%s' is not a code reference"
(W) The second (fourth, sixth, ...) argument of overload::constant needs
to be a code reference. Either an anonymous subroutine, or a reference
to a subroutine.
.Ip "`%s' is not an overloadable type" 4
.IX Item "`%s' is not an overloadable type"
(W) You tried to overload a constant type the overload package is unaware of.
.Ip "junk on end of regexp" 4
.IX Item "junk on end of regexp"
(P) The regular expression parser is confused.
.if n .Ip "Label not found for """"last \f(CW%s\fR""""" 4
.el .Ip "Label not found for ``last \f(CW%s\fR''" 4
.IX Item "Label not found for "last %s"
(F) You named a loop to break out of, but you're not currently in a loop
of that name, not even if you count where you were called from.  See
the last entry in the perlfunc manpage.
.if n .Ip "Label not found for """"next \f(CW%s\fR""""" 4
.el .Ip "Label not found for ``next \f(CW%s\fR''" 4
.IX Item "Label not found for "next %s"
(F) You named a loop to continue, but you're not currently in a loop of
that name, not even if you count where you were called from.  See
the last entry in the perlfunc manpage.
.if n .Ip "Label not found for """"redo \f(CW%s\fR""""" 4
.el .Ip "Label not found for ``redo \f(CW%s\fR''" 4
.IX Item "Label not found for "redo %s"
(F) You named a loop to restart, but you're not currently in a loop of
that name, not even if you count where you were called from.  See
the last entry in the perlfunc manpage.
.Ip "leaving effective \f(CW%s\fR failed" 4
.IX Item "leaving effective %s failed"
(F) While under the \f(CW\*(C`use filetest\*(C'\fR pragma, switching the real and
effective uids or gids failed.
.Ip "\fIlisten()\fR on closed socket \f(CW%s\fR" 4
.IX Item "listen() on closed socket %s"
(W closed) You tried to do a listen on a closed socket.  Did you forget
to check the return value of your \fIsocket()\fR call?  See
the listen entry in the perlfunc manpage.
.Ip "Lookbehind longer than \f(CW%d\fR not implemented at {#} mark in regex \f(CW%s\fR" 4
.IX Item "Lookbehind longer than %d not implemented at {#} mark in regex %s"
There is an upper limit to the depth of lookbehind in the (?<=
regular expression construct.
.Ip "Lvalue subs returning \f(CW%s\fR not implemented yet" 4
.IX Item "Lvalue subs returning %s not implemented yet"
(F) Due to limitations in the current implementation, array and hash
values cannot be returned in subroutines used in lvalue context.  See
the Lvalue subroutines entry in the perlsub manpage.
.Ip "Lookbehind longer than \f(CW%d\fR not implemented before << \s-1HERE\s0 \f(CW%s\fR" 4
.IX Item "Lookbehind longer than %d not implemented before << HERE %s"
(F) There is currently a limit on the length of string which lookbehind can
handle. This restriction may be eased in a future release. The << \s-1HERE\s0 shows in
the regular expression about where the problem was discovered.
.Ip "Malformed \s-1PERLLIB_PREFIX\s0" 4
.IX Item "Malformed PERLLIB_PREFIX"
(F) An error peculiar to \s-1OS/2\s0.  \s-1PERLLIB_PREFIX\s0 should be of the form
.Sp
.Vb 1
\&    prefix1;prefix2
.Ve
or
.Sp
.Vb 1
\&    prefix1 prefix2
.Ve
with nonempty prefix1 and prefix2.  If \f(CW\*(C`prefix1\*(C'\fR is indeed a prefix of
a builtin library search path, prefix2 is substituted.  The error may
appear if components are not found, or are too long.  See
\&\*(L"\s-1PERLLIB_PREFIX\s0\*(R" in the perlos2 manpage.
.Ip "Malformed \s-1UTF-8\s0 character (%s)" 4
.IX Item "Malformed UTF-8 character (%s)"
Perl detected something that didn't comply with \s-1UTF-8\s0 encoding rules.
.Ip "Malformed \s-1UTF-16\s0 surrogate" 4
.IX Item "Malformed UTF-16 surrogate"
Perl thought it was reading \s-1UTF-16\s0 encoded character data but while
doing it Perl met a malformed Unicode surrogate.
.Ip "%s matches null string many times" 4
.IX Item "%s matches null string many times"
(W regexp) The pattern you've specified would be an infinite loop if the
regular expression engine didn't specifically check for that.  See
the perlre manpage.
.Ip "% may only be used in unpack" 4
.IX Item "% may only be used in unpack"
(F) You can't pack a string by supplying a checksum, because the
checksumming process loses information, and you can't go the other way.
See the unpack entry in the perlfunc manpage.
.Ip "Method for operation \f(CW%s\fR not found in package \f(CW%s\fR during blessing" 4
.IX Item "Method for operation %s not found in package %s during blessing"
(F) An attempt was made to specify an entry in an overloading table that
doesn't resolve to a valid subroutine.  See the overload manpage.
.Ip "Method \f(CW%s\fR not permitted" 4
.IX Item "Method %s not permitted"
See Server error.
.Ip "Might be a runaway multi-line \f(CW%s\fR string starting on line \f(CW%d\fR" 4
.IX Item "Might be a runaway multi-line %s string starting on line %d"
(S) An advisory indicating that the previous error may have been caused
by a missing delimiter on a string or pattern, because it eventually
ended earlier on the current line.
.Ip "Misplaced _ in number" 4
.IX Item "Misplaced _ in number"
(W syntax) An underline in a decimal constant wasn't on a 3\-digit boundary.
.Ip "Missing \f(CW%sbrace\fR%s on \eN{}" 4
.IX Item "Missing %sbrace%s on N{}"
(F) Wrong syntax of character name literal \f(CW\*(C`\eN{charname}\*(C'\fR within
double-quotish context.
.Ip "Missing comma after first argument to \f(CW%s\fR function" 4
.IX Item "Missing comma after first argument to %s function"
(F) While certain functions allow you to specify a filehandle or an
\&\*(L"indirect object\*(R" before the argument list, this ain't one of them.
.Ip "Missing command in piped open" 4
.IX Item "Missing command in piped open"
(W pipe) You used the \f(CW\*(C`open(FH, "| command")\*(C'\fR or
\&\f(CW\*(C`open(FH, "command |")\*(C'\fR construction, but the command was missing or
blank.
.if n .Ip "Missing name in """"my sub""""" 4
.el .Ip "Missing name in ``my sub''" 4
.IX Item "Missing name in "my sub"
(F) The reserved syntax for lexically scoped subroutines requires that
they have a name with which they can be found.
.Ip "Missing $ on loop variable" 4
.IX Item "Missing $ on loop variable"
(F) Apparently you've been programming in \fBcsh\fR too much.  Variables
are always mentioned with the $ in Perl, unlike in the shells, where it
can vary from one line to the next.
.Ip "(Missing operator before \f(CW%s\fR?)" 4
.IX Item "(Missing operator before %s?)"
(S) This is an educated guess made in conjunction with the message \*(L"%s
found where operator expected\*(R".  Often the missing operator is a comma.
.Ip "Missing right curly or square bracket" 4
.IX Item "Missing right curly or square bracket"
(F) The lexer counted more opening curly or square brackets than closing
ones.  As a general rule, you'll find it's missing near the place you
were last editing.
.Ip "(Missing semicolon on previous line?)" 4
.IX Item "(Missing semicolon on previous line?)"
(S) This is an educated guess made in conjunction with the message \*(L"%s
found where operator expected\*(R".  Don't automatically put a semicolon on
the previous line just because you saw this message.
.Ip "Modification of a read-only value attempted" 4
.IX Item "Modification of a read-only value attempted"
(F) You tried, directly or indirectly, to change the value of a
constant.  You didn't, of course, try \*(L"2 = 1\*(R", because the compiler
catches that.  But an easy way to do the same thing is:
.Sp
.Vb 2
\&    sub mod { $_[0] = 1 }
\&    mod(2);
.Ve
Another way is to assign to a \fIsubstr()\fR that's off the end of the string.
.Sp
Yet another way is to assign to a \f(CW\*(C`foreach\*(C'\fR loop \fI\s-1VAR\s0\fR when \fI\s-1VAR\s0\fR
is aliased to a constant in the look \fI\s-1LIST\s0\fR:
.Sp
.Vb 4
\&        $x = 1;
\&        foreach my $n ($x, 2) {
\&            $n *= 2; # modifies the $x, but fails on attempt to modify the 2
\&        }
.Ve
.Ip "Modification of non-creatable array value attempted, \f(CW%s\fR" 4
.IX Item "Modification of non-creatable array value attempted, %s"
(F) You tried to make an array value spring into existence, and the
subscript was probably negative, even counting from end of the array
backwards.
.Ip "Modification of non-creatable hash value attempted, \f(CW%s\fR" 4
.IX Item "Modification of non-creatable hash value attempted, %s"
(P) You tried to make a hash value spring into existence, and it
couldn't be created for some peculiar reason.
.Ip "Module name must be constant" 4
.IX Item "Module name must be constant"
(F) Only a bare module name is allowed as the first argument to a \*(L"use\*(R".
.Ip "Module name required with \-%c option" 4
.IX Item "Module name required with -%c option"
(F) The \f(CW\*(C`\-M\*(C'\fR or \f(CW\*(C`\-m\*(C'\fR options say that Perl should load some module, but
you omitted the name of the module.  Consult the perlrun manpage for full details
about \f(CW\*(C`\-M\*(C'\fR and \f(CW\*(C`\-m\*(C'\fR.
.Ip "msg%s not implemented" 4
.IX Item "msg%s not implemented"
(F) You don't have System V message \s-1IPC\s0 on your system.
.Ip "Multidimensional syntax \f(CW%s\fR not supported" 4
.IX Item "Multidimensional syntax %s not supported"
(W syntax) Multidimensional arrays aren't written like \f(CW\*(C`$foo[1,2,3]\*(C'\fR.
They're written like \f(CW\*(C`$foo[1][2][3]\*(C'\fR, as in C.
.Ip "/ must be followed by a*, A* or Z*" 4
.IX Item "/ must be followed by a*, A* or Z*"
(F) You had a pack template indicating a counted-length string,
Currently the only things that can have their length counted are a*, A*
or Z*.  See the pack entry in the perlfunc manpage.
.Ip "/ must be followed by a, A or Z" 4
.IX Item "/ must be followed by a, A or Z"
(F) You had an unpack template indicating a counted-length string, which
must be followed by one of the letters a, A or Z to indicate what sort
of string is to be unpacked.  See the pack entry in the perlfunc manpage.
.Ip "/ must follow a numeric type" 4
.IX Item "/ must follow a numeric type"
(F) You had an unpack template that contained a '#', but this did not
follow some numeric unpack specification.  See the pack entry in the perlfunc manpage.
.if n .Ip """""my sub"""" not yet implemented" 4
.el .Ip "``my sub'' not yet implemented" 4
.IX Item ""my sub not yet implemented"
(F) Lexically scoped subroutines are not yet implemented.  Don't try
that yet.
.if n .Ip """""my"""" variable \f(CW%s\fR can't be in a package" 4
.el .Ip "``my'' variable \f(CW%s\fR can't be in a package" 4
.IX Item ""my variable %s can't be in a package"
(F) Lexically scoped variables aren't in a package, so it doesn't make
sense to try to declare one with a package qualifier on the front.  Use
\&\fIlocal()\fR if you want to localize a package variable.
.if n .Ip "Name """"%s::%s"""" used only once: possible typo" 4
.el .Ip "Name ``%s::%s'' used only once: possible typo" 4
.IX Item "Name "%s::%s used only once: possible typo"
(W once) Typographical errors often show up as unique variable names.
If you had a good reason for having a unique name, then just mention it
again somehow to suppress the message.  The \f(CW\*(C`our\*(C'\fR declaration is
provided for this purpose.
.Ip "Negative length" 4
.IX Item "Negative length"
(F) You tried to do a read/write/send/recv operation with a buffer
length that is less than 0.  This is difficult to imagine.
.Ip "Nested quantifiers before << \s-1HERE\s0 in regex m/%s/" 4
.IX Item "Nested quantifiers before << HERE in regex m/%s/"
(F) You can't quantify a quantifier without intervening parentheses. So
things like ** or +* or ?* are illegal. The << \s-1HERE\s0 shows in the regular
expression about where the problem was discovered.
.Sp
Note, however, that the minimal matching quantifiers, \f(CW\*(C`*?\*(C'\fR, \f(CW\*(C`+?\*(C'\fR, and
\&\f(CW\*(C`??\*(C'\fR appear to be nested quantifiers, but aren't.  See the perlre manpage.
.Ip "%s never introduced" 4
.IX Item "%s never introduced"
(S internal) The symbol in question was declared but somehow went out of
scope before it could possibly have been used.
.Ip "No \f(CW%s\fR allowed while running setuid" 4
.IX Item "No %s allowed while running setuid"
(F) Certain operations are deemed to be too insecure for a setuid or
setgid script to even be allowed to attempt.  Generally speaking there
will be another way to do what you want that is, if not secure, at least
securable.  See the perlsec manpage.
.Ip "No \fB\-e\fR allowed in setuid scripts" 4
.IX Item "No -e allowed in setuid scripts"
(F) A setuid script can't be specified by the user.
.Ip "No comma allowed after \f(CW%s\fR" 4
.IX Item "No comma allowed after %s"
(F) A list operator that has a filehandle or \*(L"indirect object\*(R" is not
allowed to have a comma between that and the following arguments.
Otherwise it'd be just another one of the arguments.
.Sp
One possible cause for this is that you expected to have imported a
constant to your name space with \fBuse\fR or \fBimport\fR while no such
importing took place, it may for example be that your operating system
does not support that particular constant. Hopefully you did use an
explicit import list for the constants you expect to see, please see
the use entry in the perlfunc manpage and the import entry in the perlfunc manpage. While an explicit import list
would probably have caught this error earlier it naturally does not
remedy the fact that your operating system still does not support that
constant. Maybe you have a typo in the constants of the symbol import
list of \fBuse\fR or \fBimport\fR or in the constant name at the line where
this error was triggered?
.Ip "No command into which to pipe on command line" 4
.IX Item "No command into which to pipe on command line"
(F) An error peculiar to \s-1VMS\s0.  Perl handles its own command line
redirection, and found a '|' at the end of the command line, so it
doesn't know where you want to pipe the output from this command.
.Ip "No \s-1DB::DB\s0 routine defined" 4
.IX Item "No DB::DB routine defined"
(F) The currently executing code was compiled with the \fB\-d\fR switch, but
for some reason the perl5db.pl file (or some facsimile thereof) didn't
define a routine to be called at the beginning of each statement.  Which
is odd, because the file should have been required automatically, and
should have blown up the require if it didn't parse right.
.Ip "No dbm on this machine" 4
.IX Item "No dbm on this machine"
(P) This is counted as an internal error, because every machine should
supply dbm nowadays, because Perl comes with \s-1SDBM\s0.  See the SDBM_File manpage.
.Ip "No DBsub routine" 4
.IX Item "No DBsub routine"
(F) The currently executing code was compiled with the \fB\-d\fR switch,
but for some reason the perl5db.pl file (or some facsimile thereof)
didn't define a \s-1DB:\s0:sub routine to be called at the beginning of each
ordinary subroutine call.
.Ip "No error file after 2> or 2>> on command line" 4
.IX Item "No error file after 2> or 2>> on command line"
(F) An error peculiar to \s-1VMS\s0.  Perl handles its own command line
redirection, and found a '2>' or a '2>>' on the command line, but can't
find the name of the file to which to write data destined for stderr.
.Ip "No input file after < on command line" 4
.IX Item "No input file after < on command line"
(F) An error peculiar to \s-1VMS\s0.  Perl handles its own command line
redirection, and found a '<' on the command line, but can't find the
name of the file from which to read data for stdin.
.Ip "No #! line" 4
.IX Item "No #! line"
(F) The setuid emulator requires that scripts have a well-formed #! line
even on machines that don't support the #! construct.
.if n .Ip """""no"""" not allowed in expression" 4
.el .Ip "``no'' not allowed in expression" 4
.IX Item ""no not allowed in expression"
(F) The \*(L"no\*(R" keyword is recognized and executed at compile time, and
returns no useful value.  See the perlmod manpage.
.Ip "No output file after > on command line" 4
.IX Item "No output file after > on command line"
(F) An error peculiar to \s-1VMS\s0.  Perl handles its own command line
redirection, and found a lone '>' at the end of the command line, so it
doesn't know where you wanted to redirect stdout.
.Ip "No output file after > or >> on command line" 4
.IX Item "No output file after > or >> on command line"
(F) An error peculiar to \s-1VMS\s0.  Perl handles its own command line
redirection, and found a '>' or a '>>' on the command line, but can't
find the name of the file to which to write data destined for stdout.
.if n .Ip "No package name allowed for variable \f(CW%s\fR in """"our""""" 4
.el .Ip "No package name allowed for variable \f(CW%s\fR in ``our''" 4
.IX Item "No package name allowed for variable %s in "our"
(F) Fully qualified variable names are not allowed in \*(L"our\*(R"
declarations, because that doesn't make much sense under existing
semantics.  Such syntax is reserved for future extensions.
.Ip "No Perl script found in input" 4
.IX Item "No Perl script found in input"
(F) You called \f(CW\*(C`perl \-x\*(C'\fR, but no line was found in the file beginning
with #! and containing the word \*(L"perl\*(R".
.Ip "No setregid available" 4
.IX Item "No setregid available"
(F) Configure didn't find anything resembling the \fIsetregid()\fR call for
your system.
.Ip "No setreuid available" 4
.IX Item "No setreuid available"
(F) Configure didn't find anything resembling the \fIsetreuid()\fR call for
your system.
.Ip "No space allowed after \-%c" 4
.IX Item "No space allowed after -%c"
(F) The argument to the indicated command line switch must follow
immediately after the switch, without intervening spaces.
.Ip "No \f(CW%s\fR specified for \-%c" 4
.IX Item "No %s specified for -%c"
(F) The indicated command line switch needs a mandatory argument, but
you haven't specified one.
.Ip "No such pipe open" 4
.IX Item "No such pipe open"
(P) An error peculiar to \s-1VMS\s0.  The internal routine \fImy_pclose()\fR tried to
close a pipe which hadn't been opened.  This should have been caught
earlier as an attempt to close an unopened filehandle.
.if n .Ip "No such pseudo-hash field """"%s""""" 4
.el .Ip "No such pseudo-hash field ``%s''" 4
.IX Item "No such pseudo-hash field "%s"
(F) You tried to access an array as a hash, but the field name used is
not defined.  The hash at index 0 should map all valid field names to
array indices for that to work.
.if n .Ip "No such pseudo-hash field """"%s"""" in variable \f(CW%s\fR of type \f(CW%s\fR" 4
.el .Ip "No such pseudo-hash field ``%s'' in variable \f(CW%s\fR of type \f(CW%s\fR" 4
.IX Item "No such pseudo-hash field "%s in variable %s of type %s"
(F) You tried to access a field of a typed variable where the type does
not know about the field name.  The field names are looked up in the
\&\f(CW%FIELDS\fR hash in the type package at compile time.  The \f(CW%FIELDS\fR hash is
\&\f(CW%usually\fR set up with the 'fields' pragma.
.Ip "No such signal: SIG%s" 4
.IX Item "No such signal: SIG%s"
(W signal) You specified a signal name as a subscript to \f(CW%SIG\fR that was
not recognized.  Say \f(CW\*(C`kill \-l\*(C'\fR in your shell to see the valid signal
names on your system.
.Ip "Not a \s-1CODE\s0 reference" 4
.IX Item "Not a CODE reference"
(F) Perl was trying to evaluate a reference to a code value (that is, a
subroutine), but found a reference to something else instead.  You can
use the \fIref()\fR function to find out what kind of ref it really was.  See
also the perlref manpage.
.Ip "Not a format reference" 4
.IX Item "Not a format reference"
(F) I'm not sure how you managed to generate a reference to an anonymous
format, but this indicates you did, and that it didn't exist.
.Ip "Not a \s-1GLOB\s0 reference" 4
.IX Item "Not a GLOB reference"
(F) Perl was trying to evaluate a reference to a \*(L"typeglob\*(R" (that is, a
symbol table entry that looks like \f(CW\*(C`*foo\*(C'\fR), but found a reference to
something else instead.  You can use the \fIref()\fR function to find out what
kind of ref it really was.  See the perlref manpage.
.Ip "Not a \s-1HASH\s0 reference" 4
.IX Item "Not a HASH reference"
(F) Perl was trying to evaluate a reference to a hash value, but found a
reference to something else instead.  You can use the \fIref()\fR function to
find out what kind of ref it really was.  See the perlref manpage.
.Ip "Not an \s-1ARRAY\s0 reference" 4
.IX Item "Not an ARRAY reference"
(F) Perl was trying to evaluate a reference to an array value, but found
a reference to something else instead.  You can use the \fIref()\fR function
to find out what kind of ref it really was.  See the perlref manpage.
.Ip "Not a perl script" 4
.IX Item "Not a perl script"
(F) The setuid emulator requires that scripts have a well-formed #! line
even on machines that don't support the #! construct.  The line must
mention perl.
.Ip "Not a \s-1SCALAR\s0 reference" 4
.IX Item "Not a SCALAR reference"
(F) Perl was trying to evaluate a reference to a scalar value, but found
a reference to something else instead.  You can use the \fIref()\fR function
to find out what kind of ref it really was.  See the perlref manpage.
.Ip "Not a subroutine reference" 4
.IX Item "Not a subroutine reference"
(F) Perl was trying to evaluate a reference to a code value (that is, a
subroutine), but found a reference to something else instead.  You can
use the \fIref()\fR function to find out what kind of ref it really was.  See
also the perlref manpage.
.Ip "Not a subroutine reference in overload table" 4
.IX Item "Not a subroutine reference in overload table"
(F) An attempt was made to specify an entry in an overloading table that
doesn't somehow point to a valid subroutine.  See the overload manpage.
.Ip "Not enough arguments for \f(CW%s\fR" 4
.IX Item "Not enough arguments for %s"
(F) The function requires more arguments than you specified.
.Ip "Not enough format arguments" 4
.IX Item "Not enough format arguments"
(W syntax) A format specified more picture fields than the next line
supplied.  See the perlform manpage.
.Ip "%s: not found" 4
.IX Item "%s: not found"
(A) You've accidentally run your script through the Bourne shell instead
of Perl.  Check the #! line, or manually feed your script into Perl
yourself.
.Ip "no \s-1UTC\s0 offset information; assuming local time is \s-1UTC\s0" 4
.IX Item "no UTC offset information; assuming local time is UTC"
(S) A warning peculiar to \s-1VMS\s0.  Perl was unable to find the local
timezone offset, so it's assuming that local system time is equivalent
to \s-1UTC\s0.  If it's not, define the logical name
\&\fI\s-1SYS$TIMEZONE_DIFFERENTIAL\s0\fR to translate to the number of seconds which
need to be added to \s-1UTC\s0 to get local time.
.Ip "Null filename used" 4
.IX Item "Null filename used"
(F) You can't require the null filename, especially because on many
machines that means the current directory!  See the require entry in the perlfunc manpage.
.Ip "\s-1NULL\s0 \s-1OP\s0 \s-1IN\s0 \s-1RUN\s0" 4
.IX Item "NULL OP IN RUN"
(P debugging) Some internal routine called \fIrun()\fR with a null opcode
pointer.
.Ip "Null picture in formline" 4
.IX Item "Null picture in formline"
(F) The first argument to formline must be a valid format picture
specification.  It was found to be empty, which probably means you
supplied it an uninitialized value.  See the perlform manpage.
.Ip "Null realloc" 4
.IX Item "Null realloc"
(P) An attempt was made to realloc \s-1NULL\s0.
.Ip "\s-1NULL\s0 regexp argument" 4
.IX Item "NULL regexp argument"
(P) The internal pattern matching routines blew it big time.
.Ip "\s-1NULL\s0 regexp parameter" 4
.IX Item "NULL regexp parameter"
(P) The internal pattern matching routines are out of their gourd.
.Ip "Number too long" 4
.IX Item "Number too long"
(F) Perl limits the representation of decimal numbers in programs to
about about 250 characters.  You've exceeded that length.  Future
versions of Perl are likely to eliminate this arbitrary limitation.  In
the meantime, try using scientific notation (e.g. \*(L"1e6\*(R" instead of
\&\*(L"1_000_000\*(R").
.Ip "Octal number in vector unsupported" 4
.IX Item "Octal number in vector unsupported"
(F) Numbers with a leading \f(CW\*(C`0\*(C'\fR are not currently allowed in vectors.
The octal number interpretation of such numbers may be supported in a
future version.
.Ip "Octal number > 037777777777 non-portable" 4
.IX Item "Octal number > 037777777777 non-portable"
(W portable) The octal number you specified is larger than 2**32\-1
(4294967295) and therefore non-portable between systems.  See
the perlport manpage for more on portability concerns.
.Sp
See also the perlport manpage for writing portable code.
.Ip "Odd number of arguments for overload::constant" 4
.IX Item "Odd number of arguments for overload::constant"
(W) The call to overload::constant contained an odd number of arguments.
The arguments should come in pairs.
.Ip "Odd number of elements in hash assignment" 4
.IX Item "Odd number of elements in hash assignment"
(W misc) You specified an odd number of elements to initialize a hash,
which is odd, because hashes come in key/value pairs.
.Ip "Offset outside string" 4
.IX Item "Offset outside string"
(F) You tried to do a read/write/send/recv operation with an offset
pointing outside the buffer.  This is difficult to imagine.  The sole
exception to this is that \f(CW\*(C`sysread()\*(C'\fRing past the buffer will extend
the buffer and zero pad the new area.
.Ip "\-%s on unopened filehandle \f(CW%s\fR" 4
.IX Item "-%s on unopened filehandle %s"
(W unopened) You tried to invoke a file test operator on a filehandle
that isn't open.  Check your logic.  See also the section on "-X" in the perlfunc manpage.
.Ip "%\fIs()\fR on unopened \f(CW%s\fR \f(CW%s\fR" 4
.IX Item "%s() on unopened %s %s"
(W unopened) An I/O operation was attempted on a filehandle that was
never initialized.  You need to do an \fIopen()\fR, a \fIsysopen()\fR, or a \fIsocket()\fR
call, or call a constructor from the FileHandle package.
.Ip "oops: oopsAV" 4
.IX Item "oops: oopsAV"
(S internal) An internal warning that the grammar is screwed up.
.Ip "oops: oopsHV" 4
.IX Item "oops: oopsHV"
(S internal) An internal warning that the grammar is screwed up.
.Ip "Operation `%s': no method found, \f(CW%s\fR" 4
.IX Item "Operation `%s': no method found, %s"
(F) An attempt was made to perform an overloaded operation for which no
handler was defined.  While some handlers can be autogenerated in terms
of other handlers, there is no default handler for any operation, unless
\&\f(CW\*(C`fallback\*(C'\fR overloading key is specified to be true.  See the overload manpage.
.Ip "Operator or semicolon missing before \f(CW%s\fR" 4
.IX Item "Operator or semicolon missing before %s"
(S ambiguous) You used a variable or subroutine call where the parser
was expecting an operator.  The parser has assumed you really meant to
use an operator, but this is highly likely to be incorrect.  For
example, if you say \*(L"*foo *foo\*(R" it will be interpreted as if you said
\&\*(L"*foo * 'foo'\*(R".
.if n .Ip """""our"""" variable \f(CW%s\fR redeclared" 4
.el .Ip "``our'' variable \f(CW%s\fR redeclared" 4
.IX Item ""our variable %s redeclared"
(W misc) You seem to have already declared the same global once before
in the current lexical scope.
.Ip "Out of memory!" 4
.IX Item "Out of memory!"
(X) The \fImalloc()\fR function returned 0, indicating there was insufficient
remaining memory (or virtual memory) to satisfy the request.  Perl has
no option but to exit immediately.
.if n .Ip "Out of memory during """"large"""" request for \f(CW%s\fR" 4
.el .Ip "Out of memory during ``large'' request for \f(CW%s\fR" 4
.IX Item "Out of memory during "large request for %s"
(F) The \fImalloc()\fR function returned 0, indicating there was insufficient
remaining memory (or virtual memory) to satisfy the request. However,
the request was judged large enough (compile-time default is 64K), so a
possibility to shut down by trapping this error is granted.
.Ip "Out of memory during request for \f(CW%s\fR" 4
.IX Item "Out of memory during request for %s"
(X|F) The \fImalloc()\fR function returned 0, indicating there was
insufficient remaining memory (or virtual memory) to satisfy the
request.
.Sp
The request was judged to be small, so the possibility to trap it
depends on the way perl was compiled.  By default it is not trappable.
However, if compiled for this, Perl may use the contents of \f(CW\*(C`$^M\*(C'\fR as an
emergency pool after \fIdie()\fRing with this message.  In this case the error
is trappable \fIonce\fR, and the error message will include the line and file
where the failed request happened.
.Ip "Out of memory during ridiculously large request" 4
.IX Item "Out of memory during ridiculously large request"
(F) You can't allocate more than 2^31+\*(L"small amount\*(R" bytes.  This error
is most likely to be caused by a typo in the Perl program. e.g.,
\&\f(CW\*(C`$arr[time]\*(C'\fR instead of \f(CW\*(C`$arr[$time]\*(C'\fR.
.Ip "Out of memory for yacc stack" 4
.IX Item "Out of memory for yacc stack"
(F) The yacc parser wanted to grow its stack so it could continue
parsing, but \fIrealloc()\fR wouldn't give it more memory, virtual or
otherwise.
.Ip "@ outside of string" 4
.IX Item "@ outside of string"
(F) You had a pack template that specified an absolute position outside
the string being unpacked.  See the pack entry in the perlfunc manpage.
.Ip "%s package attribute may clash with future reserved word: \f(CW%s\fR" 4
.IX Item "%s package attribute may clash with future reserved word: %s"
(W reserved) A lowercase attribute name was used that had a
package-specific handler.  That name might have a meaning to Perl itself
some day, even though it doesn't yet.  Perhaps you should use a
mixed-case attribute name, instead.  See the attributes manpage.
.Ip "page overflow" 4
.IX Item "page overflow"
(W io) A single call to \fIwrite()\fR produced more lines than can fit on a
page.  See the perlform manpage.
.Ip "panic: \f(CW%s\fR" 4
.IX Item "panic: %s"
(P) An internal error.
.Ip "panic: ck_grep" 4
.IX Item "panic: ck_grep"
(P) Failed an internal consistency check trying to compile a grep.
.Ip "panic: ck_split" 4
.IX Item "panic: ck_split"
(P) Failed an internal consistency check trying to compile a split.
.Ip "panic: corrupt saved stack index" 4
.IX Item "panic: corrupt saved stack index"
(P) The savestack was requested to restore more localized values than
there are in the savestack.
.Ip "panic: del_backref" 4
.IX Item "panic: del_backref"
(P) Failed an internal consistency check while trying to reset a weak
reference.
.Ip "panic: die \f(CW%s\fR" 4
.IX Item "panic: die %s"
(P) We popped the context stack to an eval context, and then discovered
it wasn't an eval context.
.Ip "panic: pp_match" 4
.IX Item "panic: pp_match"
(P) The internal \fIpp_match()\fR routine was called with invalid operational
data.
.Ip "panic: do_subst" 4
.IX Item "panic: do_subst"
(P) The internal \fIpp_subst()\fR routine was called with invalid operational
data.
.Ip "panic: do_trans_%s" 4
.IX Item "panic: do_trans_%s"
(P) The internal do_trans routines were called with invalid operational
data.
.Ip "panic: frexp" 4
.IX Item "panic: frexp"
(P) The library function \fIfrexp()\fR failed, making printf(\*(L"%f\*(R") impossible.
.Ip "panic: goto" 4
.IX Item "panic: goto"
(P) We popped the context stack to a context with the specified label,
and then discovered it wasn't a context we know how to do a goto in.
.Ip "panic: \s-1INTERPCASEMOD\s0" 4
.IX Item "panic: INTERPCASEMOD"
(P) The lexer got into a bad state at a case modifier.
.Ip "panic: \s-1INTERPCONCAT\s0" 4
.IX Item "panic: INTERPCONCAT"
(P) The lexer got into a bad state parsing a string with brackets.
.Ip "panic: kid popen errno read" 4
.IX Item "panic: kid popen errno read"
(F) forked child returned an incomprehensible message about its errno.
.Ip "panic: last" 4
.IX Item "panic: last"
(P) We popped the context stack to a block context, and then discovered
it wasn't a block context.
.Ip "panic: leave_scope clearsv" 4
.IX Item "panic: leave_scope clearsv"
(P) A writable lexical variable became read-only somehow within the
scope.
.Ip "panic: leave_scope inconsistency" 4
.IX Item "panic: leave_scope inconsistency"
(P) The savestack probably got out of sync.  At least, there was an
invalid enum on the top of it.
.Ip "panic: magic_killbackrefs" 4
.IX Item "panic: magic_killbackrefs"
(P) Failed an internal consistency check while trying to reset all weak
references to an object.
.Ip "panic: malloc" 4
.IX Item "panic: malloc"
(P) Something requested a negative number of bytes of malloc.
.Ip "panic: mapstart" 4
.IX Item "panic: mapstart"
(P) The compiler is screwed up with respect to the \fImap()\fR function.
.Ip "panic: null array" 4
.IX Item "panic: null array"
(P) One of the internal array routines was passed a null \s-1AV\s0 pointer.
.Ip "panic: pad_alloc" 4
.IX Item "panic: pad_alloc"
(P) The compiler got confused about which scratch pad it was allocating
and freeing temporaries and lexicals from.
.Ip "panic: pad_free curpad" 4
.IX Item "panic: pad_free curpad"
(P) The compiler got confused about which scratch pad it was allocating
and freeing temporaries and lexicals from.
.Ip "panic: pad_free po" 4
.IX Item "panic: pad_free po"
(P) An invalid scratch pad offset was detected internally.
.Ip "panic: pad_reset curpad" 4
.IX Item "panic: pad_reset curpad"
(P) The compiler got confused about which scratch pad it was allocating
and freeing temporaries and lexicals from.
.Ip "panic: pad_sv po" 4
.IX Item "panic: pad_sv po"
(P) An invalid scratch pad offset was detected internally.
.Ip "panic: pad_swipe curpad" 4
.IX Item "panic: pad_swipe curpad"
(P) The compiler got confused about which scratch pad it was allocating
and freeing temporaries and lexicals from.
.Ip "panic: pad_swipe po" 4
.IX Item "panic: pad_swipe po"
(P) An invalid scratch pad offset was detected internally.
.Ip "panic: pp_iter" 4
.IX Item "panic: pp_iter"
(P) The foreach iterator got called in a non-loop context frame.
.Ip "panic: pp_split" 4
.IX Item "panic: pp_split"
(P) Something terrible went wrong in setting up for the split.
.Ip "panic: realloc" 4
.IX Item "panic: realloc"
(P) Something requested a negative number of bytes of realloc.
.Ip "panic: restartop" 4
.IX Item "panic: restartop"
(P) Some internal routine requested a goto (or something like it), and
didn't supply the destination.
.Ip "panic: return" 4
.IX Item "panic: return"
(P) We popped the context stack to a subroutine or eval context, and
then discovered it wasn't a subroutine or eval context.
.Ip "panic: scan_num" 4
.IX Item "panic: scan_num"
(P) \fIscan_num()\fR got called on something that wasn't a number.
.Ip "panic: sv_insert" 4
.IX Item "panic: sv_insert"
(P) The \fIsv_insert()\fR routine was told to remove more string than there
was string.
.Ip "panic: top_env" 4
.IX Item "panic: top_env"
(P) The compiler attempted to do a goto, or something weird like that.
.Ip "panic: yylex" 4
.IX Item "panic: yylex"
(P) The lexer got into a bad state while processing a case modifier.
.Ip "panic: utf16_to_utf8: odd bytelen" 4
.IX Item "panic: utf16_to_utf8: odd bytelen"
(P) Something tried to call utf16_to_utf8 with an odd (as opposed
to even) byte length. 
.if n .Ip "Parentheses missing around """"%s"""" list" 4
.el .Ip "Parentheses missing around ``%s'' list" 4
.IX Item "Parentheses missing around "%s list"
(W parenthesis) You said something like
.Sp
.Vb 1
\&    my $foo, $bar = @_;
.Ve
when you meant
.Sp
.Vb 1
\&    my ($foo, $bar) = @_;
.Ve
Remember that \*(L"my\*(R", \*(L"our\*(R", and \*(L"local\*(R" bind tighter than comma.
.Ip "Perl \f(CW%s\fR required\*(--this is only version \f(CW%s\fR, stopped" 4
.IX Item "Perl %s requiredthis is only version %s, stopped"
(F) The module in question uses features of a version of Perl more
recent than the currently running version.  How long has it been since
you upgraded, anyway?  See the require entry in the perlfunc manpage.
.Ip "\s-1PERL_SH_DIR\s0 too long" 4
.IX Item "PERL_SH_DIR too long"
(F) An error peculiar to \s-1OS/2\s0. \s-1PERL_SH_DIR\s0 is the directory to find the
\&\f(CW\*(C`sh\*(C'\fR\-shell in.  See \*(L"\s-1PERL_SH_DIR\s0\*(R" in the perlos2 manpage.
.Ip "perl: warning: Setting locale failed." 4
.IX Item "perl: warning: Setting locale failed."
(S) The whole warning message will look something like:
.Sp
.Vb 6
\&        perl: warning: Setting locale failed.
\&        perl: warning: Please check that your locale settings:
\&                LC_ALL = "En_US",
\&                LANG = (unset)
\&            are supported and installed on your system.
\&        perl: warning: Falling back to the standard locale ("C").
.Ve
Exactly what were the failed locale settings varies.  In the above the
settings were that the \s-1LC_ALL\s0 was \*(L"En_US\*(R" and the \s-1LANG\s0 had no value.
This error means that Perl detected that you and/or your operating
system supplier and/or system administrator have set up the so-called
locale system but Perl could not use those settings.  This was not
dead serious, fortunately: there is a \*(L"default locale\*(R" called \*(L"C\*(R" that
Perl can and will use, the script will be run.  Before you really fix
the problem, however, you will get the same error message each time
you run Perl.  How to really fix the problem can be found in
the perllocale manpage section \fB\s-1LOCALE\s0 \s-1PROBLEMS\s0\fR.
.Ip "Permission denied" 4
.IX Item "Permission denied"
(F) The setuid emulator in suidperl decided you were up to no good.
.Ip "pid \f(CW%x\fR not a child" 4
.IX Item "pid %x not a child"
(W exec) A warning peculiar to \s-1VMS\s0.  \fIWaitpid()\fR was asked to wait for a
process which isn't a subprocess of the current process.  While this is
fine from \s-1VMS\s0' perspective, it's probably not what you intended.
.Ip "\s-1POSIX\s0 syntax [%s] belongs inside character classes" 4
.IX Item "POSIX syntax [%s] belongs inside character classes"
(W unsafe) The character class constructs [: :], [= =], and [. .]  go
\&\fIinside\fR character classes, the [] are part of the construct, for
example: /[012[:alpha:]345]/.  Note that [= =] and [. .] are not
currently implemented; they are simply placeholders for future
extensions and will cause fatal errors.
.Ip "\s-1POSIX\s0  syntax [. .] is reserved for future extensions" 4
.IX Item "POSIX  syntax [. .] is reserved for future extensions"
(F regexp) Within regular expression character classes ([]) the syntax
beginning with \*(L"[.\*(R" and ending with \*(L".]\*(R" is reserved for future
extensions.  If you need to represent those character sequences inside
a regular expression character class, just quote the square brackets
with the backslash: \*(L"\e[.\*(R" and \*(L".\e]\*(R".
.Ip "\s-1POSIX\s0 syntax [= =] is reserved for future extensions" 4
.IX Item "POSIX syntax [= =] is reserved for future extensions"
(F) Within regular expression character classes ([]) the syntax
beginning with \*(L"[=\*(R" and ending with \*(L"=]\*(R" is reserved for future
extensions.  If you need to represent those character sequences inside
a regular expression character class, just quote the square brackets
with the backslash: \*(L"\e[=\*(R" and \*(L"=\e]\*(R".
.Ip "\s-1POSIX\s0 class [:%s:] unknown" 4
.IX Item "POSIX class [:%s:] unknown"
(F) The class in the character class [: :] syntax is unknown.  See
the perlre manpage.
.Ip "\s-1POSIX\s0 getpgrp can't take an argument" 4
.IX Item "POSIX getpgrp can't take an argument"
(F) Your system has \s-1POSIX\s0 \fIgetpgrp()\fR, which takes no argument, unlike
the \s-1BSD\s0 version, which takes a pid.
.Ip "Possible attempt to put comments in \fIqw()\fR list" 4
.IX Item "Possible attempt to put comments in qw() list"
(W qw) \fIqw()\fR lists contain items separated by whitespace; as with literal
strings, comment characters are not ignored, but are instead treated as
literal data.  (You may have used different delimiters than the
parentheses shown here; braces are also frequently used.)
.Sp
You probably wrote something like this:
.Sp
.Vb 4
\&    @list = qw(
\&        a # a comment
\&        b # another comment
\&    );
.Ve
when you should have written this:
.Sp
.Vb 4
\&    @list = qw(
\&        a
\&        b
\&    );
.Ve
If you really want comments, build your list the
old-fashioned way, with quotes and commas:
.Sp
.Vb 4
\&    @list = (
\&        'a',    # a comment
\&        'b',    # another comment
\&    );
.Ve
.Ip "Possible attempt to separate words with commas" 4
.IX Item "Possible attempt to separate words with commas"
(W qw) \fIqw()\fR lists contain items separated by whitespace; therefore
commas aren't needed to separate the items.  (You may have used
different delimiters than the parentheses shown here; braces are also
frequently used.)
.Sp
You probably wrote something like this:
.Sp
.Vb 1
\&    qw! a, b, c !;
.Ve
which puts literal commas into some of the list items.  Write it without
commas if you don't want them to appear in your data:
.Sp
.Vb 1
\&    qw! a b c !;
.Ve
.Ip "Possible memory corruption: \f(CW%s\fR overflowed 3rd argument" 4
.IX Item "Possible memory corruption: %s overflowed 3rd argument"
(F) An \fIioctl()\fR or \fIfcntl()\fR returned more than Perl was bargaining for.
Perl guesses a reasonable buffer size, but puts a sentinel byte at the
end of the buffer just in case.  This sentinel byte got clobbered, and
Perl assumes that memory is now corrupted.  See the ioctl entry in the perlfunc manpage.
.Ip "Possible Y2K bug: \f(CW%s\fR" 4
.IX Item "Possible Y2K bug: %s"
(W y2k) You are concatenating the number 19 with another number, which
could be a potential Year 2000 problem.
.if n .Ip "pragma """"attrs"""" is deprecated, use """"sub \s-1NAME\s0 : \s-1ATTRS\s0"""" instead" 4
.el .Ip "pragma ``attrs'' is deprecated, use ``sub \s-1NAME\s0 : \s-1ATTRS\s0'' instead" 4
.IX Item "pragma "attrs is deprecated, use sub NAME : ATTRS instead"
(W deprecated) You have written something like this:
.Sp
.Vb 4
\&    sub doit
\&    {
\&        use attrs qw(locked);
\&    }
.Ve
You should use the new declaration syntax instead.
.Sp
.Vb 3
\&    sub doit : locked
\&    {
\&        ...
.Ve
The \f(CW\*(C`use attrs\*(C'\fR pragma is now obsolete, and is only provided for
backward-compatibility. See the Subroutine Attributes entry in the perlsub manpage.
.Ip "Precedence problem: open \f(CW%s\fR should be open(%s)" 4
.IX Item "Precedence problem: open %s should be open(%s)"
(S precedence) The old irregular construct
.Sp
.Vb 1
\&    open FOO || die;
.Ve
is now misinterpreted as
.Sp
.Vb 1
\&    open(FOO || die);
.Ve
because of the strict regularization of Perl 5's grammar into unary and
list operators.  (The old open was a little of both.)  You must put
parentheses around the filehandle, or use the new \*(L"or\*(R" operator instead
of \*(L"||\*(R".
.Ip "Premature end of script headers" 4
.IX Item "Premature end of script headers"
See Server error.
.Ip "\fIprintf()\fR on closed filehandle \f(CW%s\fR" 4
.IX Item "printf() on closed filehandle %s"
(W closed) The filehandle you're writing to got itself closed sometime
before now.  Check your logic flow.
.Ip "\fIprint()\fR on closed filehandle \f(CW%s\fR" 4
.IX Item "print() on closed filehandle %s"
(W closed) The filehandle you're printing on got itself closed sometime
before now.  Check your logic flow.
.Ip "Process terminated by SIG%s" 4
.IX Item "Process terminated by SIG%s"
(W) This is a standard message issued by \s-1OS/2\s0 applications, while *nix
applications die in silence.  It is considered a feature of the \s-1OS/2\s0
port.  One can easily disable this by appropriate sighandlers, see
the Signals entry in the perlipc manpage.  See also \*(L"Process terminated by \s-1SIGTERM/SIGINT\s0\*(R"
in the perlos2 manpage.
.Ip "Prototype mismatch: \f(CW%s\fR vs \f(CW%s\fR" 4
.IX Item "Prototype mismatch: %s vs %s"
(S unsafe) The subroutine being declared or defined had previously been
declared or defined with a different function prototype.
.Ip "Quantifier in {,} bigger than \f(CW%d\fR before << \s-1HERE\s0 in regex m/%s/" 4
.IX Item "Quantifier in {,} bigger than %d before << HERE in regex m/%s/"
(F) There is currently a limit to the size of the min and max values of the
{min,max} construct. The << \s-1HERE\s0 shows in the regular expression about where
the problem was discovered. See the perlre manpage.
.Ip "Quantifier unexpected on zero-length expression before << \s-1HERE\s0 \f(CW%s\fR" 4
.IX Item "Quantifier unexpected on zero-length expression before << HERE %s"
(W regexp) You applied a regular expression quantifier in a place where
it makes no sense, such as on a zero-width assertion.  Try putting the
quantifier inside the assertion instead.  For example, the way to match
\&\*(L"abc\*(R" provided that it is followed by three repetitions of \*(L"xyz\*(R" is
\&\f(CW\*(C`/abc(?=(?:xyz){3})/\*(C'\fR, not \f(CW\*(C`/abc(?=xyz){3}/\*(C'\fR.
.Ip "Range iterator outside integer range" 4
.IX Item "Range iterator outside integer range"
(F) One (or both) of the numeric arguments to the range operator \*(L"..\*(R"
are outside the range which can be represented by integers internally.
One possible workaround is to force Perl to use magical string increment
by prepending \*(L"0\*(R" to your numbers.
.Ip "\fIreadline()\fR on closed filehandle \f(CW%s\fR" 4
.IX Item "readline() on closed filehandle %s"
(W closed) The filehandle you're reading from got itself closed sometime
before now.  Check your logic flow.
.Ip "Reallocation too large: \f(CW%lx\fR" 4
.IX Item "Reallocation too large: %lx"
(F) You can't allocate more than 64K on an \s-1MS-DOS\s0 machine.
.Ip "\fIrealloc()\fR of freed memory ignored" 4
.IX Item "realloc() of freed memory ignored"
(S malloc) An internal routine called \fIrealloc()\fR on something that had
already been freed.
.Ip "Recompile perl with \fB\-D\fR\s-1DEBUGGING\s0 to use \fB\-D\fR switch" 4
.IX Item "Recompile perl with -DDEBUGGING to use -D switch"
(F debugging) You can't use the \fB\-D\fR option unless the code to produce
the desired output is compiled into Perl, which entails some overhead,
which is why it's currently left out of your copy.
.Ip "Recursive inheritance detected in package '%s'" 4
.IX Item "Recursive inheritance detected in package '%s'"
(F) More than 100 levels of inheritance were used.  Probably indicates
an unintended loop in your inheritance hierarchy.
.Ip "Recursive inheritance detected while looking for method \f(CW%s\fR" 4
.IX Item "Recursive inheritance detected while looking for method %s"
(F) More than 100 levels of inheritance were encountered while invoking
a method.  Probably indicates an unintended loop in your inheritance
hierarchy.
.Ip "Reference found where even-sized list expected" 4
.IX Item "Reference found where even-sized list expected"
(W misc) You gave a single reference where Perl was expecting a list
with an even number of elements (for assignment to a hash). This usually
means that you used the anon hash constructor when you meant to use
parens. In any case, a hash requires key/value \fBpairs\fR.
.Sp
.Vb 4
\&    %hash = { one => 1, two => 2, };    # WRONG
\&    %hash = [ qw/ an anon array / ];    # WRONG
\&    %hash = ( one => 1, two => 2, );    # right
\&    %hash = qw( one 1 two 2 );                  # also fine
.Ve
.Ip "Reference is already weak" 4
.IX Item "Reference is already weak"
(W misc) You have attempted to weaken a reference that is already weak.
Doing so has no effect.
.Ip "Reference miscount in \fIsv_replace()\fR" 4
.IX Item "Reference miscount in sv_replace()"
(W internal) The internal \fIsv_replace()\fR function was handed a new \s-1SV\s0 with
a reference count of other than 1.
.Ip "Reference to nonexistent group before << \s-1HERE\s0 in regex m/%s/" 4
.IX Item "Reference to nonexistent group before << HERE in regex m/%s/"
(F) You used something like \f(CW\*(C`\e7\*(C'\fR in your regular expression, but there are
not at least seven sets of capturing parentheses in the expression. If you
wanted to have the character with value 7 inserted into the regular expression,
prepend a zero to make the number at least two digits: \f(CW\*(C`\e07\*(C'\fR
.Sp
The << \s-1HERE\s0 shows in the regular expression about where the problem was
discovered.
.Ip "regexp memory corruption" 4
.IX Item "regexp memory corruption"
(P) The regular expression engine got confused by what the regular
expression compiler gave it.
.Ip "Regexp out of space" 4
.IX Item "Regexp out of space"
(P) A \*(L"can't happen\*(R" error, because \fIsafemalloc()\fR should have caught it
earlier.
.Ip "Repeat count in pack overflows" 4
.IX Item "Repeat count in pack overflows"
(F) You can't specify a repeat count so large that it overflows your
signed integers.  See the pack entry in the perlfunc manpage.
.Ip "Repeat count in unpack overflows" 4
.IX Item "Repeat count in unpack overflows"
(F) You can't specify a repeat count so large that it overflows your
signed integers.  See the unpack entry in the perlfunc manpage.
.Ip "Reversed \f(CW%s\fR= operator" 4
.IX Item "Reversed %s= operator"
(W syntax) You wrote your assignment operator backwards.  The = must
always comes last, to avoid ambiguity with subsequent unary operators.
.Ip "Runaway format" 4
.IX Item "Runaway format"
(F) Your format contained the ~~ repeat-until-blank sequence, but it
produced 200 lines at once, and the 200th line looked exactly like the
199th line.  Apparently you didn't arrange for the arguments to exhaust
themselves, either by using ^ instead of @ (for scalar variables), or by
shifting or popping (for array variables).  See the perlform manpage.
.Ip "Scalar value @%s[%s] better written as $%s[%s]" 4
.IX Item "Scalar value @%s[%s] better written as $%s[%s]"
(W syntax) You've used an array slice (indicated by @) to select a
single element of an array.  Generally it's better to ask for a scalar
value (indicated by $).  The difference is that \f(CW\*(C`$foo[&bar]\*(C'\fR always
behaves like a scalar, both when assigning to it and when evaluating its
argument, while \f(CW\*(C`@foo[&bar]\*(C'\fR behaves like a list when you assign to it,
and provides a list context to its subscript, which can do weird things
if you're expecting only one subscript.
.Sp
On the other hand, if you were actually hoping to treat the array
element as a list, you need to look into how references work, because
Perl will not magically convert between scalars and lists for you.  See
the perlref manpage.
.Ip "Scalar value @%s{%s} better written as $%s{%s}" 4
.IX Item "Scalar value @%s{%s} better written as $%s{%s}"
(W syntax) You've used a hash slice (indicated by @) to select a single
element of a hash.  Generally it's better to ask for a scalar value
(indicated by $).  The difference is that \f(CW\*(C`$foo{&bar}\*(C'\fR always behaves
like a scalar, both when assigning to it and when evaluating its
argument, while \f(CW\*(C`@foo{&bar}\*(C'\fR behaves like a list when you assign to it,
and provides a list context to its subscript, which can do weird things
if you're expecting only one subscript.
.Sp
On the other hand, if you were actually hoping to treat the hash element
as a list, you need to look into how references work, because Perl will
not magically convert between scalars and lists for you.  See
the perlref manpage.
.Ip "Scalars leaked: \f(CW%d\fR" 4
.IX Item "Scalars leaked: %d"
(P) Something went wrong in Perl's internal bookkeeping of scalars:
not all scalar variables were deallocated by the time Perl exited.
What this usually indicates is a memory leak, which is of course bad,
especially if the Perl program is intended to be long-running.
.Ip "Script is not setuid/setgid in suidperl" 4
.IX Item "Script is not setuid/setgid in suidperl"
(F) Oddly, the suidperl program was invoked on a script without a setuid
or setgid bit set.  This doesn't make much sense.
.Ip "Search pattern not terminated" 4
.IX Item "Search pattern not terminated"
(F) The lexer couldn't find the final delimiter of a // or m{}
construct.  Remember that bracketing delimiters count nesting level.
Missing the leading \f(CW\*(C`$\*(C'\fR from a variable \f(CW\*(C`$m\*(C'\fR may cause this error.
.Ip "%\fIsseek()\fR on unopened filehandle" 4
.IX Item "%sseek() on unopened filehandle"
(W unopened) You tried to use the \fIseek()\fR or \fIsysseek()\fR function on a
filehandle that was either never opened or has since been closed.
.Ip "select not implemented" 4
.IX Item "select not implemented"
(F) This machine doesn't implement the \fIselect()\fR system call.
.Ip "Semicolon seems to be missing" 4
.IX Item "Semicolon seems to be missing"
(W semicolon) A nearby syntax error was probably caused by a missing
semicolon, or possibly some other missing operator, such as a comma.
.Ip "semi-panic: attempt to dup freed string" 4
.IX Item "semi-panic: attempt to dup freed string"
(S internal) The internal \fInewSVsv()\fR routine was called to duplicate a
scalar that had previously been marked as free.
.Ip "sem%s not implemented" 4
.IX Item "sem%s not implemented"
(F) You don't have System V semaphore \s-1IPC\s0 on your system.
.Ip "\fIsend()\fR on closed socket \f(CW%s\fR" 4
.IX Item "send() on closed socket %s"
(W closed) The socket you're sending to got itself closed sometime
before now.  Check your logic flow.
.Ip "Sequence (? incomplete before << \s-1HERE\s0 mark in regex m/%s/" 4
.IX Item "Sequence (? incomplete before << HERE mark in regex m/%s/"
(F) A regular expression ended with an incomplete extension (?. The <<<\s-1HERE\s0
shows in the regular expression about where the problem was discovered. See
the perlre manpage.
.Ip "Sequence (?{...}) not terminated or not {}\-balanced in \f(CW%s\fR" 4
.IX Item "Sequence (?{...}) not terminated or not {}-balanced in %s"
(F) If the contents of a (?{...}) clause contains braces, they must balance
for Perl to properly detect the end of the clause. See the perlre manpage.
.Ip "Sequence (?%s...) not implemented before << \s-1HERE\s0 mark in \f(CW%s\fR" 4
.IX Item "Sequence (?%s...) not implemented before << HERE mark in %s"
(F) A proposed regular expression extension has the character reserved but
has not yet been written. The << \s-1HERE\s0 shows in the regular expression about
where the problem was discovered. See the perlre manpage.
.Ip "Sequence (?%s...) not recognized before << \s-1HERE\s0 mark in \f(CW%s\fR" 4
.IX Item "Sequence (?%s...) not recognized before << HERE mark in %s"
(F) You used a regular expression extension that doesn't make sense.
The << \s-1HERE\s0 shows in the regular expression about
where the problem was discovered. 
See the perlre manpage.
.Ip "Sequence (?#... not terminated in regex m/%s/" 4
.IX Item "Sequence (?#... not terminated in regex m/%s/"
(F) A regular expression comment must be terminated by a closing
parenthesis.  Embedded parentheses aren't allowed.  See the perlre manpage.
.Ip "500 Server error" 4
.IX Item "500 Server error"
See Server error.
.Ip "Server error" 4
.IX Item "Server error"
This is the error message generally seen in a browser window when trying
to run a \s-1CGI\s0 program (including \s-1SSI\s0) over the web. The actual error text
varies widely from server to server. The most frequently-seen variants
are \*(L"500 Server error\*(R", \*(L"Method (something) not permitted\*(R", \*(L"Document
contains no data\*(R", \*(L"Premature end of script headers\*(R", and \*(L"Did not
produce a valid header\*(R".
.Sp
\&\fBThis is a \s-1CGI\s0 error, not a Perl error\fR.
.Sp
You need to make sure your script is executable, is accessible by the
user \s-1CGI\s0 is running the script under (which is probably not the user
account you tested it under), does not rely on any environment variables
(like \s-1PATH\s0) from the user it isn't running under, and isn't in a
location where the \s-1CGI\s0 server can't find it, basically, more or less.
Please see the following for more information:
.Sp
.Vb 5
\&        http://www.perl.com/CPAN/doc/FAQs/cgi/idiots-guide.html
\&        http://www.perl.com/CPAN/doc/FAQs/cgi/perl-cgi-faq.html
\&        ftp://rtfm.mit.edu/pub/usenet/news.answers/www/cgi-faq
\&        http://hoohoo.ncsa.uiuc.edu/cgi/interface.html
\&        http://www-genome.wi.mit.edu/WWW/faqs/www-security-faq.html
.Ve
You should also look at the perlfaq9 manpage.
.Ip "\fIsetegid()\fR not implemented" 4
.IX Item "setegid() not implemented"
(F) You tried to assign to \f(CW\*(C`$)\*(C'\fR, and your operating system doesn't
support the \fIsetegid()\fR system call (or equivalent), or at least Configure
didn't think so.
.Ip "\fIseteuid()\fR not implemented" 4
.IX Item "seteuid() not implemented"
(F) You tried to assign to \f(CW\*(C`$>\*(C'\fR, and your operating system doesn't
support the \fIseteuid()\fR system call (or equivalent), or at least Configure
didn't think so.
.Ip "setpgrp can't take arguments" 4
.IX Item "setpgrp can't take arguments"
(F) Your system has the \fIsetpgrp()\fR from \s-1BSD\s0 4.2, which takes no
arguments, unlike \s-1POSIX\s0 \fIsetpgid()\fR, which takes a process \s-1ID\s0 and process
group \s-1ID\s0.
.Ip "\fIsetrgid()\fR not implemented" 4
.IX Item "setrgid() not implemented"
(F) You tried to assign to \f(CW\*(C`$(\*(C'\fR, and your operating system doesn't
support the \fIsetrgid()\fR system call (or equivalent), or at least Configure
didn't think so.
.Ip "\fIsetruid()\fR not implemented" 4
.IX Item "setruid() not implemented"
(F) You tried to assign to \f(CW\*(C`$<\*(C'\fR, and your operating system doesn't
support the \fIsetruid()\fR system call (or equivalent), or at least Configure
didn't think so.
.Ip "\fIsetsockopt()\fR on closed socket \f(CW%s\fR" 4
.IX Item "setsockopt() on closed socket %s"
(W closed) You tried to set a socket option on a closed socket.  Did you
forget to check the return value of your \fIsocket()\fR call?  See
the setsockopt entry in the perlfunc manpage.
.Ip "Setuid/gid script is writable by world" 4
.IX Item "Setuid/gid script is writable by world"
(F) The setuid emulator won't run a script that is writable by the
world, because the world might have written on it already.
.Ip "shm%s not implemented" 4
.IX Item "shm%s not implemented"
(F) You don't have System V shared memory \s-1IPC\s0 on your system.
.Ip "<> should be quotes" 4
.IX Item "<> should be quotes"
(F) You wrote \f(CW\*(C`require <file>\*(C'\fR when you should have written
\&\f(CW\*(C`require 'file'\*(C'\fR.
.if n .Ip "/%s/ should probably be written as """"%s""""" 4
.el .Ip "/%s/ should probably be written as ``%s''" 4
.IX Item "/%s/ should probably be written as "%s"
(W syntax) You have used a pattern where Perl expected to find a string,
as in the first argument to \f(CW\*(C`join\*(C'\fR.  Perl will treat the true or false
result of matching the pattern against \f(CW$_\fR as the string, which is
probably not what you had in mind.
.Ip "\fIshutdown()\fR on closed socket \f(CW%s\fR" 4
.IX Item "shutdown() on closed socket %s"
(W closed) You tried to do a shutdown on a closed socket.  Seems a bit
superfluous.
.if n .Ip "SIG%s handler """"%s"""" not defined" 4
.el .Ip "SIG%s handler ``%s'' not defined" 4
.IX Item "SIG%s handler "%s not defined"
(W signal) The signal handler named in \f(CW%SIG\fR doesn't, in fact, exist.
Perhaps you put it into the wrong package?
.Ip "sort is now a reserved word" 4
.IX Item "sort is now a reserved word"
(F) An ancient error message that almost nobody ever runs into anymore.
But before sort was a keyword, people sometimes used it as a filehandle.
.Ip "Sort subroutine didn't return a numeric value" 4
.IX Item "Sort subroutine didn't return a numeric value"
(F) A sort comparison routine must return a number.  You probably blew
it by not using \f(CW\*(C`<=>\*(C'\fR or \f(CW\*(C`cmp\*(C'\fR, or by not using them correctly.
See the sort entry in the perlfunc manpage.
.Ip "Sort subroutine didn't return single value" 4
.IX Item "Sort subroutine didn't return single value"
(F) A sort comparison subroutine may not return a list value with more
or less than one element.  See the sort entry in the perlfunc manpage.
.Ip "Split loop" 4
.IX Item "Split loop"
(P) The split was looping infinitely.  (Obviously, a split shouldn't
iterate more times than there are characters of input, which is what
happened.) See the split entry in the perlfunc manpage.
.Ip "Statement unlikely to be reached" 4
.IX Item "Statement unlikely to be reached"
(W exec) You did an \fIexec()\fR with some statement after it other than a
\&\fIdie()\fR.  This is almost always an error, because \fIexec()\fR never returns
unless there was a failure.  You probably wanted to use \fIsystem()\fR
instead, which does return.  To suppress this warning, put the \fIexec()\fR in
a block by itself.
.Ip "\fIstat()\fR on unopened filehandle \f(CW%s\fR" 4
.IX Item "stat() on unopened filehandle %s"
(W unopened) You tried to use the \fIstat()\fR function on a filehandle that
was either never opened or has since been closed.
.Ip "Stub found while resolving method `%s' overloading \f(CW%s\fR" 4
.IX Item "Stub found while resolving method `%s' overloading %s"
(P) Overloading resolution over \f(CW@ISA\fR tree may be broken by importation
stubs.  Stubs should never be implicitly created, but explicit calls to
\&\f(CW\*(C`can\*(C'\fR may break this.
.Ip "Subroutine \f(CW%s\fR redefined" 4
.IX Item "Subroutine %s redefined"
(W redefine) You redefined a subroutine.  To suppress this warning, say
.Sp
.Vb 4
\&    {
\&        no warnings;
\&        eval "sub name { ... }";
\&    }
.Ve
.Ip "Substitution loop" 4
.IX Item "Substitution loop"
(P) The substitution was looping infinitely.  (Obviously, a substitution
shouldn't iterate more times than there are characters of input, which
is what happened.)  See the discussion of substitution in
the Quote and Quote-like Operators entry in the perlop manpage.
.Ip "Substitution pattern not terminated" 4
.IX Item "Substitution pattern not terminated"
(F) The lexer couldn't find the interior delimiter of a s/// or s{}{}
construct.  Remember that bracketing delimiters count nesting level.
Missing the leading \f(CW\*(C`$\*(C'\fR from variable \f(CW\*(C`$s\*(C'\fR may cause this error.
.Ip "Substitution replacement not terminated" 4
.IX Item "Substitution replacement not terminated"
(F) The lexer couldn't find the final delimiter of a s/// or s{}{}
construct.  Remember that bracketing delimiters count nesting level.
Missing the leading \f(CW\*(C`$\*(C'\fR from variable \f(CW\*(C`$s\*(C'\fR may cause this error.
.Ip "substr outside of string" 4
.IX Item "substr outside of string"
(W substr),(F) You tried to reference a \fIsubstr()\fR that pointed outside of
a string.  That is, the absolute value of the offset was larger than the
length of the string.  See the substr entry in the perlfunc manpage.  This warning is fatal if
substr is used in an lvalue context (as the left hand side of an
assignment or as a subroutine argument for example).
.Ip "suidperl is no longer needed since \f(CW%s\fR" 4
.IX Item "suidperl is no longer needed since %s"
(F) Your Perl was compiled with \fB\-D\fR\s-1SETUID_SCRIPTS_ARE_SECURE_NOW\s0, but
a version of the setuid emulator somehow got run anyway.
.Ip "Switch (?(condition)... contains too many branches before << HE%s" 4
.IX Item "Switch (?(condition)... contains too many branches before << HE%s"
(F) A (?(condition)if-clause|else-clause) construct can have at most two
branches (the if-clause and the else-clause). If you want one or both to
contain alternation, such as using \f(CW\*(C`this|that|other\*(C'\fR, enclose it in
clustering parentheses:
.Sp
.Vb 1
\&    (?(condition)(?:this|that|other)|else-clause)
.Ve
The << \s-1HERE\s0 shows in the regular expression about where the problem was
discovered. See the perlre manpage.
.Ip "Switch condition not recognized before << \s-1HERE\s0 in regex m/%s/" 4
.IX Item "Switch condition not recognized before << HERE in regex m/%s/"
(F) If the argument to the (?(...)if-clause|else-clause) construct is a
number, it can be only a number. The << \s-1HERE\s0 shows in the regular expression
about where the problem was discovered. See the perlre manpage.
.Ip "switching effective \f(CW%s\fR is not implemented" 4
.IX Item "switching effective %s is not implemented"
(F) While under the \f(CW\*(C`use filetest\*(C'\fR pragma, we cannot switch the real
and effective uids or gids.
.Ip "syntax error" 4
.IX Item "syntax error"
(F) Probably means you had a syntax error.  Common reasons include:
.Sp
.Vb 6
\&    A keyword is misspelled.
\&    A semicolon is missing.
\&    A comma is missing.
\&    An opening or closing parenthesis is missing.
\&    An opening or closing brace is missing.
\&    A closing quote is missing.
.Ve
Often there will be another error message associated with the syntax
error giving more information.  (Sometimes it helps to turn on \fB\-w\fR.)
The error message itself often tells you where it was in the line when
it decided to give up.  Sometimes the actual error is several tokens
before this, because Perl is good at understanding random input.
Occasionally the line number may be misleading, and once in a blue moon
the only way to figure out what's triggering the error is to call
\&\f(CW\*(C`perl \-c\*(C'\fR repeatedly, chopping away half the program each time to see
if the error went away.  Sort of the cybernetic version of 20\ questions.
.Ip "syntax error at line \f(CW%d:\fR `%s' unexpected" 4
.IX Item "syntax error at line %d: `%s' unexpected"
(A) You've accidentally run your script through the Bourne shell instead
of Perl.  Check the #! line, or manually feed your script into Perl
yourself.
.Ip "%s syntax \s-1OK\s0" 4
.IX Item "%s syntax OK"
(F) The final summary message when a \f(CW\*(C`perl \-c\*(C'\fR succeeds.
.Ip "System V \f(CW%s\fR is not implemented on this machine" 4
.IX Item "System V %s is not implemented on this machine"
(F) You tried to do something with a function beginning with \*(L"sem\*(R",
\&\*(L"shm\*(R", or \*(L"msg\*(R" but that System V \s-1IPC\s0 is not implemented in your
machine.  In some machines the functionality can exist but be
unconfigured.  Consult your system support.
.Ip "\fIsyswrite()\fR on closed filehandle \f(CW%s\fR" 4
.IX Item "syswrite() on closed filehandle %s"
(W closed) The filehandle you're writing to got itself closed sometime
before now.  Check your logic flow.
.Ip "Target of goto is too deeply nested" 4
.IX Item "Target of goto is too deeply nested"
(F) You tried to use \f(CW\*(C`goto\*(C'\fR to reach a label that was too deeply nested
for Perl to reach.  Perl is doing you a favor by refusing.
.Ip "\fItell()\fR on unopened filehandle" 4
.IX Item "tell() on unopened filehandle"
(W unopened) You tried to use the \fItell()\fR function on a filehandle that
was either never opened or has since been closed.
.Ip "That use of $[ is unsupported" 4
.IX Item "That use of $[ is unsupported"
(F) Assignment to \f(CW\*(C`$[\*(C'\fR is now strictly circumscribed, and interpreted
as a compiler directive.  You may say only one of
.Sp
.Vb 6
\&    $[ = 0;
\&    $[ = 1;
\&    ...
\&    local $[ = 0;
\&    local $[ = 1;
\&    ...
.Ve
This is to prevent the problem of one module changing the array base out
from under another module inadvertently.  See the section on "$[" in the perlvar manpage.
.Ip "The \fIcrypt()\fR function is unimplemented due to excessive paranoia" 4
.IX Item "The crypt() function is unimplemented due to excessive paranoia"
(F) Configure couldn't find the \fIcrypt()\fR function on your machine,
probably because your vendor didn't supply it, probably because they
think the U.S. Government thinks it's a secret, or at least that they
will continue to pretend that it is.  And if you quote me on that, I
will deny it.
.Ip "The \f(CW%s\fR function is unimplemented" 4
.IX Item "The %s function is unimplemented"
The function indicated isn't implemented on this architecture, according
to the probings of Configure.
.if n .Ip "The stat preceding \f(CW""""\-l _""""\fR wasn't an lstat" 4
.el .Ip "The stat preceding \f(CW\-l _\fR wasn't an lstat" 4
.IX Item "The stat preceding -l _ wasn't an lstat"
(F) It makes no sense to test the current stat buffer for symbolic
linkhood if the last stat that wrote to the stat buffer already went
past the symlink to get to the real file.  Use an actual filename
instead.
.Ip "This Perl can't reset \s-1CRTL\s0 environ elements (%s)" 4
.IX Item "This Perl can't reset CRTL environ elements (%s)"
.PD 0
.Ip "This Perl can't set \s-1CRTL\s0 environ elements (%s=%s)" 4
.IX Item "This Perl can't set CRTL environ elements (%s=%s)"
.PD
(W internal) Warnings peculiar to \s-1VMS\s0.  You tried to change or delete an
element of the \s-1CRTL\s0's internal environ array, but your copy of Perl
wasn't built with a \s-1CRTL\s0 that contained the \fIsetenv()\fR function.  You'll
need to rebuild Perl with a \s-1CRTL\s0 that does, or redefine
\&\fI\s-1PERL_ENV_TABLES\s0\fR (see the perlvms manpage) so that the environ array isn't the
target of the change to
\&\f(CW%ENV\fR which produced the warning.
.Ip "times not implemented" 4
.IX Item "times not implemented"
(F) Your version of the C library apparently doesn't do \fItimes()\fR.  I
suspect you're not running on Unix.
.Ip "Too few args to syscall" 4
.IX Item "Too few args to syscall"
(F) There has to be at least one argument to \fIsyscall()\fR to specify the
system call to call, silly dilly.
.if n .Ip "Too late for """"\fB\-T\fR"""" option" 4
.el .Ip "Too late for ``\fB\-T\fR'' option" 4
.IX Item "Too late for ""-T" option"
(X) The #! line (or local equivalent) in a Perl script contains the
\&\fB\-T\fR option, but Perl was not invoked with \fB\-T\fR in its command line.
This is an error because, by the time Perl discovers a \fB\-T\fR in a
script, it's too late to properly taint everything from the environment.
So Perl gives up.
.Sp
If the Perl script is being executed as a command using the #!
mechanism (or its local equivalent), this error can usually be fixed by
editing the #! line so that the \fB\-T\fR option is a part of Perl's first
argument: e.g. change \f(CW\*(C`perl \-n \-T\*(C'\fR to \f(CW\*(C`perl \-T \-n\*(C'\fR.
.Sp
If the Perl script is being executed as \f(CW\*(C`perl scriptname\*(C'\fR, then the
\&\fB\-T\fR option must appear on the command line: \f(CW\*(C`perl \-T scriptname\*(C'\fR.
.if n .Ip "Too late for """"\-%s"""" option" 4
.el .Ip "Too late for ``\-%s'' option" 4
.IX Item "Too late for "-%s option"
(X) The #! line (or local equivalent) in a Perl script contains the
\&\fB\-M\fR or \fB\-m\fR option.  This is an error because \fB\-M\fR and \fB\-m\fR options
are not intended for use inside scripts.  Use the \f(CW\*(C`use\*(C'\fR pragma instead.
.Ip "Too late to run \f(CW%s\fR block" 4
.IX Item "Too late to run %s block"
(W void) A \s-1CHECK\s0 or \s-1INIT\s0 block is being defined during run time proper,
when the opportunity to run them has already passed.  Perhaps you are
loading a file with \f(CW\*(C`require\*(C'\fR or \f(CW\*(C`do\*(C'\fR when you should be using \f(CW\*(C`use\*(C'\fR
instead.  Or perhaps you should put the \f(CW\*(C`require\*(C'\fR or \f(CW\*(C`do\*(C'\fR inside a
\&\s-1BEGIN\s0 block.
.Ip "Too many args to syscall" 4
.IX Item "Too many args to syscall"
(F) Perl supports a maximum of only 14 args to \fIsyscall()\fR.
.Ip "Too many arguments for \f(CW%s\fR" 4
.IX Item "Too many arguments for %s"
(F) The function requires fewer arguments than you specified.
.Ip "Too many )'s" 4
.IX Item "Too many )'s"
(A) You've accidentally run your script through \fBcsh\fR instead of Perl.
Check the #! line, or manually feed your script into Perl yourself.
.Ip "Too many ('s" 4
.IX Item "Too many ('s"
.PD 0
.Ip "trailing \e in regexp" 4
.IX Item "trailing  in regexp"
.PD
(F) The regular expression ends with an unbackslashed backslash.
Backslash it.   See the perlre manpage.
.Ip "Transliteration pattern not terminated" 4
.IX Item "Transliteration pattern not terminated"
(F) The lexer couldn't find the interior delimiter of a tr/// or tr[][]
or y/// or y[][] construct.  Missing the leading \f(CW\*(C`$\*(C'\fR from variables
\&\f(CW\*(C`$tr\*(C'\fR or \f(CW\*(C`$y\*(C'\fR may cause this error.
.Ip "Transliteration replacement not terminated" 4
.IX Item "Transliteration replacement not terminated"
(F) The lexer couldn't find the final delimiter of a tr/// or tr[][]
construct.
.Ip "truncate not implemented" 4
.IX Item "truncate not implemented"
(F) Your machine doesn't implement a file truncation mechanism that
Configure knows about.
.Ip "Type of arg \f(CW%d\fR to \f(CW%s\fR must be \f(CW%s\fR (not \f(CW%s\fR)" 4
.IX Item "Type of arg %d to %s must be %s (not %s)"
(F) This function requires the argument in that position to be of a
certain type.  Arrays must be \f(CW@NAME\fR or \f(CW\*(C`@{EXPR}\*(C'\fR.  Hashes must be
\&\f(CW%NAME\fR or \f(CW\*(C`%{EXPR}\*(C'\fR.  No implicit dereferencing is allowed\*(--use the
{\s-1EXPR\s0} forms as an explicit dereference.  See the perlref manpage.
.Ip "umask: argument is missing initial 0" 4
.IX Item "umask: argument is missing initial 0"
(W umask) A umask of 222 is incorrect.  It should be 0222, because octal
literals always start with 0 in Perl, as in C.
.Ip "umask not implemented" 4
.IX Item "umask not implemented"
(F) Your machine doesn't implement the umask function and you tried to
use it to restrict permissions for yourself (\s-1EXPR\s0 & 0700).
.if n .Ip "Unable to create sub named """"%s""""" 4
.el .Ip "Unable to create sub named ``%s''" 4
.IX Item "Unable to create sub named "%s"
(F) You attempted to create or access a subroutine with an illegal name.
.Ip "Unbalanced context: \f(CW%d\fR more PUSHes than POPs" 4
.IX Item "Unbalanced context: %d more PUSHes than POPs"
(W internal) The exit code detected an internal inconsistency in how
many execution contexts were entered and left.
.Ip "Unbalanced saves: \f(CW%d\fR more saves than restores" 4
.IX Item "Unbalanced saves: %d more saves than restores"
(W internal) The exit code detected an internal inconsistency in how
many values were temporarily localized.
.Ip "Unbalanced scopes: \f(CW%d\fR more ENTERs than LEAVEs" 4
.IX Item "Unbalanced scopes: %d more ENTERs than LEAVEs"
(W internal) The exit code detected an internal inconsistency in how
many blocks were entered and left.
.Ip "Unbalanced tmps: \f(CW%d\fR more allocs than frees" 4
.IX Item "Unbalanced tmps: %d more allocs than frees"
(W internal) The exit code detected an internal inconsistency in how
many mortal scalars were allocated and freed.
.if n .Ip "Undefined format """"%s"""" called" 4
.el .Ip "Undefined format ``%s'' called" 4
.IX Item "Undefined format "%s called"
(F) The format indicated doesn't seem to exist.  Perhaps it's really in
another package?  See the perlform manpage.
.if n .Ip "Undefined sort subroutine """"%s"""" called" 4
.el .Ip "Undefined sort subroutine ``%s'' called" 4
.IX Item "Undefined sort subroutine "%s called"
(F) The sort comparison routine specified doesn't seem to exist.
Perhaps it's in a different package?  See the sort entry in the perlfunc manpage.
.Ip "Undefined subroutine &%s called" 4
.IX Item "Undefined subroutine &%s called"
(F) The subroutine indicated hasn't been defined, or if it was, it has
since been undefined.
.Ip "Undefined subroutine called" 4
.IX Item "Undefined subroutine called"
(F) The anonymous subroutine you're trying to call hasn't been defined,
or if it was, it has since been undefined.
.Ip "Undefined subroutine in sort" 4
.IX Item "Undefined subroutine in sort"
(F) The sort comparison routine specified is declared but doesn't seem
to have been defined yet.  See the sort entry in the perlfunc manpage.
.if n .Ip "Undefined top format """"%s"""" called" 4
.el .Ip "Undefined top format ``%s'' called" 4
.IX Item "Undefined top format "%s called"
(F) The format indicated doesn't seem to exist.  Perhaps it's really in
another package?  See the perlform manpage.
.Ip "Undefined value assigned to typeglob" 4
.IX Item "Undefined value assigned to typeglob"
(W misc) An undefined value was assigned to a typeglob, a la
\&\f(CW\*(C`*foo = undef\*(C'\fR.  This does nothing.  It's possible that you really mean
\&\f(CW\*(C`undef *foo\*(C'\fR.
.Ip "%s: Undefined variable" 4
.IX Item "%s: Undefined variable"
(A) You've accidentally run your script through \fBcsh\fR instead of Perl.
Check the #! line, or manually feed your script into Perl yourself.
.Ip "unexec of \f(CW%s\fR into \f(CW%s\fR failed!" 4
.IX Item "unexec of %s into %s failed!"
(F) The \fIunexec()\fR routine failed for some reason.  See your local \s-1FSF\s0
representative, who probably put it there in the first place.
.Ip "Unknown \s-1BYTEORDER\s0" 4
.IX Item "Unknown BYTEORDER"
(F) There are no byte-swapping functions for a machine with this byte
order.
.Ip "Unknown switch condition (?(%.2s before << \s-1HERE\s0 in regex m/%s/" 4
.IX Item "Unknown switch condition (?(%.2s before << HERE in regex m/%s/"
(F) The condition of a (?(condition)if-clause|else-clause) construct is not
known. The condition may be lookaround (the condition is true if the
lookaround is true), a (?{...}) construct (the condition is true if the
code evaluates to a true value), or a number (the condition is true if the
set of capturing parentheses named by the number is defined).
.Sp
The << \s-1HERE\s0 shows in the regular expression about where the problem was
discovered.  See the perlre manpage.
.Ip "Unknown \fIopen()\fR mode '%s'" 4
.IX Item "Unknown open() mode '%s'"
(F) The second argument of 3\-argument \fIopen()\fR is not among the list
of valid modes: \f(CW\*(C`<\*(C'\fR, \f(CW\*(C`>\*(C'\fR, \f(CW\*(C`>>\*(C'\fR, \f(CW\*(C`+<\*(C'\fR,
\&\f(CW\*(C`+>\*(C'\fR, \f(CW\*(C`+>>\*(C'\fR, \f(CW\*(C`\-|\*(C'\fR, \f(CW\*(C`|\-\*(C'\fR.
.Ip "Unknown process \f(CW%x\fR sent message to prime_env_iter: \f(CW%s\fR" 4
.IX Item "Unknown process %x sent message to prime_env_iter: %s"
(P) An error peculiar to \s-1VMS\s0.  Perl was reading values for \f(CW%ENV\fR before
iterating over it, and someone else stuck a message in the stream of
data Perl expected.  Someone's very confused, or perhaps trying to
subvert Perl's population of \f(CW%ENV\fR for nefarious purposes.
.Ip "unmatched [ before << \s-1HERE\s0 mark in regex m/%s/" 4
.IX Item "unmatched [ before << HERE mark in regex m/%s/"
(F) The brackets around a character class must match. If you wish to
include a closing bracket in a character class, backslash it or put it
first. See the perlre manpage. The << \s-1HERE\s0 shows in the regular expression about
where the escape was discovered.
.Ip "unmatched ( in regexp before << \s-1HERE\s0 mark in regex m/%s/" 4
.IX Item "unmatched ( in regexp before << HERE mark in regex m/%s/"
(F) Unbackslashed parentheses must always be balanced in regular
expressions.  If you're a vi user, the % key is valuable for finding the
matching parenthesis.  See the perlre manpage.
.Ip "Unmatched right \f(CW%s\fR bracket" 4
.IX Item "Unmatched right %s bracket"
(F) The lexer counted more closing curly or square brackets than opening
ones, so you're probably missing a matching opening bracket.  As a
general rule, you'll find the missing one (so to speak) near the place
you were last editing.
.if n .Ip "Unquoted string """"%s"""" may clash with future reserved word" 4
.el .Ip "Unquoted string ``%s'' may clash with future reserved word" 4
.IX Item "Unquoted string "%s may clash with future reserved word"
(W reserved) You used a bareword that might someday be claimed as a
reserved word.  It's best to put such a word in quotes, or capitalize it
somehow, or insert an underbar into it.  You might also declare it as a
subroutine.
.Ip "Unrecognized character \f(CW%s\fR" 4
.IX Item "Unrecognized character %s"
(F) The Perl parser has no idea what to do with the specified character
in your Perl script (or eval).  Perhaps you tried to run a compressed
script, a binary program, or a directory as a Perl program.
.Ip "/%s/: Unrecognized escape \e\e%c in character class passed through" 4
.IX Item "/%s/: Unrecognized escape %c in character class passed through"
(W regexp) You used a backslash-character combination which is not
recognized by Perl inside character classes.  The character was
understood literally.
.Ip "Unrecognized escape \e\e%c passed through before << \s-1HERE\s0 in m/%s/" 4
.IX Item "Unrecognized escape %c passed through before << HERE in m/%s/"
(W regexp) You used a backslash-character combination which is not
recognized by Perl. This combination appears in an interpolated variable or
a \f(CW\*(C`'\*(C'\fR\-delimited regular expression. The character was understood
literally. The << \s-1HERE\s0 shows in the regular expression about where the escape
was discovered.
.Ip "Unrecognized escape \e\e%c passed through" 4
.IX Item "Unrecognized escape %c passed through"
(W misc) You used a backslash-character combination which is not
recognized by Perl.
.if n .Ip "Unrecognized signal name """"%s""""" 4
.el .Ip "Unrecognized signal name ``%s''" 4
.IX Item "Unrecognized signal name "%s"
(F) You specified a signal name to the \fIkill()\fR function that was not
recognized.  Say \f(CW\*(C`kill \-l\*(C'\fR in your shell to see the valid signal names
on your system.
.Ip "Unrecognized switch: \-%s  (\-h will show valid options)" 4
.IX Item "Unrecognized switch: -%s  (-h will show valid options)"
(F) You specified an illegal option to Perl.  Don't do that.  (If you
think you didn't do that, check the #! line to see if it's supplying the
bad switch on your behalf.)
.Ip "Unsuccessful \f(CW%s\fR on filename containing newline" 4
.IX Item "Unsuccessful %s on filename containing newline"
(W newline) A file operation was attempted on a filename, and that
operation failed, \s-1PROBABLY\s0 because the filename contained a newline,
\&\s-1PROBABLY\s0 because you forgot to \fIchomp()\fR it off.  See the chomp entry in the perlfunc manpage.
.if n .Ip "Unsupported directory function """"%s"""" called" 4
.el .Ip "Unsupported directory function ``%s'' called" 4
.IX Item "Unsupported directory function "%s called"
(F) Your machine doesn't support \fIopendir()\fR and \fIreaddir()\fR.
.Ip "Unsupported function \f(CW%s\fR" 4
.IX Item "Unsupported function %s"
(F) This machine doesn't implement the indicated function, apparently.
At least, Configure doesn't think so.
.Ip "Unsupported function fork" 4
.IX Item "Unsupported function fork"
(F) Your version of executable does not support forking.
.Sp
Note that under some systems, like \s-1OS/2\s0, there may be different flavors
of Perl executables, some of which may support fork, some not. Try
changing the name you call Perl by to \f(CW\*(C`perl_\*(C'\fR, \f(CW\*(C`perl_\|_\*(C'\fR, and so on.
.Ip "Unsupported script encoding" 4
.IX Item "Unsupported script encoding"
(F) Your program file begins with a Unicode Byte Order Mark (\s-1BOM\s0) which
declares it to be in a Unicode encoding that Perl cannot yet read.
.if n .Ip "Unsupported socket function """"%s"""" called" 4
.el .Ip "Unsupported socket function ``%s'' called" 4
.IX Item "Unsupported socket function "%s called"
(F) Your machine doesn't support the Berkeley socket mechanism, or at
least that's what Configure thought.
.Ip "Unterminated attribute list" 4
.IX Item "Unterminated attribute list"
(F) The lexer found something other than a simple identifier at the
start of an attribute, and it wasn't a semicolon or the start of a
block.  Perhaps you terminated the parameter list of the previous
attribute too soon.  See the attributes manpage.
.Ip "Unterminated attribute parameter in attribute list" 4
.IX Item "Unterminated attribute parameter in attribute list"
(F) The lexer saw an opening (left) parenthesis character while parsing
an attribute list, but the matching closing (right) parenthesis
character was not found.  You may need to add (or remove) a backslash
character to get your parentheses to balance.  See the attributes manpage.
.Ip "Unterminated compressed integer" 4
.IX Item "Unterminated compressed integer"
(F) An argument to unpack(\*(L"w\*(R",...) was incompatible with the \s-1BER\s0
compressed integer format and could not be converted to an integer.
See the pack entry in the perlfunc manpage.
.Ip "Unterminated <> operator" 4
.IX Item "Unterminated <> operator"
(F) The lexer saw a left angle bracket in a place where it was expecting
a term, so it's looking for the corresponding right angle bracket, and
not finding it.  Chances are you left some needed parentheses out
earlier in the line, and you really meant a \*(L"less than\*(R".
.Ip "untie attempted while \f(CW%d\fR inner references still exist" 4
.IX Item "untie attempted while %d inner references still exist"
(W untie) A copy of the object returned from \f(CW\*(C`tie\*(C'\fR (or \f(CW\*(C`tied\*(C'\fR) was
still valid when \f(CW\*(C`untie\*(C'\fR was called.
.Ip "Useless use of \f(CW%s\fR in void context" 4
.IX Item "Useless use of %s in void context"
(W void) You did something without a side effect in a context that does
nothing with the return value, such as a statement that doesn't return a
value from a block, or the left side of a scalar comma operator.  Very
often this points not to stupidity on your part, but a failure of Perl
to parse your program the way you thought it would.  For example, you'd
get this if you mixed up your C precedence with Python precedence and
said
.Sp
.Vb 1
\&    $one, $two = 1, 2;
.Ve
when you meant to say
.Sp
.Vb 1
\&    ($one, $two) = (1, 2);
.Ve
Another common error is to use ordinary parentheses to construct a list
reference when you should be using square or curly brackets, for
example, if you say
.Sp
.Vb 1
\&    $array = (1,2);
.Ve
when you should have said
.Sp
.Vb 1
\&    $array = [1,2];
.Ve
The square brackets explicitly turn a list value into a scalar value,
while parentheses do not.  So when a parenthesized list is evaluated in
a scalar context, the comma is treated like C's comma operator, which
throws away the left argument, which is not what you want.  See
the perlref manpage for more on this.
.if n .Ip "Useless use of """"re"""" pragma" 4
.el .Ip "Useless use of ``re'' pragma" 4
.IX Item "Useless use of "re pragma"
(W) You did \f(CW\*(C`use re;\*(C'\fR without any arguments.   That isn't very useful.
.if n .Ip """""use"""" not allowed in expression" 4
.el .Ip "``use'' not allowed in expression" 4
.IX Item ""use not allowed in expression"
(F) The \*(L"use\*(R" keyword is recognized and executed at compile time, and
returns no useful value.  See the perlmod manpage.
.if n .Ip "Use of bare << to mean <<"""""""" is deprecated" 4
.el .Ip "Use of bare << to mean <<``'' is deprecated" 4
.IX Item "Use of bare << to mean <<""" is deprecated"
(D deprecated) You are now encouraged to use the explicitly quoted form
if you wish to use an empty line as the terminator of the here-document.
.Ip "Use of implicit split to \f(CW@_\fR is deprecated" 4
.IX Item "Use of implicit split to @_ is deprecated"
(D deprecated) It makes a lot of work for the compiler when you clobber
a subroutine's argument list, so it's better if you assign the results
of a \fIsplit()\fR explicitly to an array (or list).
.Ip "Use of inherited \s-1AUTOLOAD\s0 for non-method %\fIs()\fR is deprecated" 4
.IX Item "Use of inherited AUTOLOAD for non-method %s() is deprecated"
(D deprecated) As an (ahem) accidental feature, \f(CW\*(C`AUTOLOAD\*(C'\fR subroutines
are looked up as methods (using the \f(CW\*(C`@ISA\*(C'\fR hierarchy) even when the
subroutines to be autoloaded were called as plain functions (e.g.
\&\f(CW\*(C`Foo::bar()\*(C'\fR), not as methods (e.g. \f(CW\*(C`Foo\->bar()\*(C'\fR or \f(CW\*(C`$obj\->bar()\*(C'\fR).
.Sp
This bug will be rectified in future by using method lookup only for
methods' \f(CW\*(C`AUTOLOAD\*(C'\fRs.  However, there is a significant base of existing
code that may be using the old behavior.  So, as an interim step, Perl
currently issues an optional warning when non-methods use inherited
\&\f(CW\*(C`AUTOLOAD\*(C'\fRs.
.Sp
The simple rule is:  Inheritance will not work when autoloading
non-methods.  The simple fix for old code is:  In any module that used
to depend on inheriting \f(CW\*(C`AUTOLOAD\*(C'\fR for non-methods from a base class
named \f(CW\*(C`BaseClass\*(C'\fR, execute \f(CW\*(C`*AUTOLOAD = \e&BaseClass::AUTOLOAD\*(C'\fR during
startup.
.Sp
In code that currently says \f(CW\*(C`use AutoLoader; @ISA = qw(AutoLoader);\*(C'\fR
you should remove AutoLoader from \f(CW@ISA\fR and change \f(CW\*(C`use AutoLoader;\*(C'\fR to
\&\f(CW\*(C`use AutoLoader 'AUTOLOAD';\*(C'\fR.
.Ip "Use of \f(CW%s\fR in printf format not supported" 4
.IX Item "Use of %s in printf format not supported"
(F) You attempted to use a feature of printf that is accessible from
only C.  This usually means there's a better way to do it in Perl.
.Ip "Use of $* is deprecated" 4
.IX Item "Use of $* is deprecated"
(D deprecated) This variable magically turned on multi-line pattern
matching, both for you and for any luckless subroutine that you happen
to call.  You should use the new \f(CW\*(C`//m\*(C'\fR and \f(CW\*(C`//s\*(C'\fR modifiers now to do
that without the dangerous action-at-a-distance effects of \f(CW\*(C`$*\*(C'\fR.
.Ip "Use of \f(CW%s\fR is deprecated" 4
.IX Item "Use of %s is deprecated"
(D deprecated) The construct indicated is no longer recommended for use,
generally because there's a better way to do it, and also because the
old way has bad side effects.
.Ip "Use of $# is deprecated" 4
.IX Item "Use of $# is deprecated"
(D deprecated) This was an ill-advised attempt to emulate a poorly
defined \fBawk\fR feature.  Use an explicit \fIprintf()\fR or \fIsprintf()\fR instead.
.if n .Ip "Use of reserved word """"%s"""" is deprecated" 4
.el .Ip "Use of reserved word ``%s'' is deprecated" 4
.IX Item "Use of reserved word "%s is deprecated"
(D deprecated) The indicated bareword is a reserved word.  Future
versions of perl may use it as a keyword, so you're better off either
explicitly quoting the word in a manner appropriate for its context of
use, or using a different name altogether.  The warning can be
suppressed for subroutine names by either adding a \f(CW\*(C`&\*(C'\fR prefix, or using
a package qualifier, e.g. \f(CW\*(C`&our()\*(C'\fR, or \f(CW\*(C`Foo::our()\*(C'\fR.
.Ip "Use of uninitialized value%s" 4
.IX Item "Use of uninitialized value%s"
(W uninitialized) An undefined value was used as if it were already
defined.  It was interpreted as a "" or a 0, but maybe it was a mistake.
To suppress this warning assign a defined value to your variables.
.Sp
To help you figure out what was undefined, perl tells you what operation
you used the undefined value in.  Note, however, that perl optimizes your
program and the operation displayed in the warning may not necessarily
appear literally in your program.  For example, \f(CW\*(C`"that $foo"\*(C'\fR is
usually optimized into \f(CW\*(C`"that " . $foo\*(C'\fR, and the warning will refer to
the \f(CW\*(C`concatenation (.)\*(C'\fR operator, even though there is no \f(CW\*(C`.\*(C'\fR in your
program.
.if n .Ip "Value of \f(CW%s\fR can be """"0""""; test with \fIdefined()\fR" 4
.el .Ip "Value of \f(CW%s\fR can be ``0''; test with \fIdefined()\fR" 4
.IX Item "Value of %s can be "0; test with defined()"
(W misc) In a conditional expression, you used <\s-1HANDLE\s0>, <*> (glob),
\&\f(CW\*(C`each()\*(C'\fR, or \f(CW\*(C`readdir()\*(C'\fR as a boolean value.  Each of these constructs
can return a value of \*(L"0\*(R"; that would make the conditional expression
false, which is probably not what you intended.  When using these
constructs in conditional expressions, test their values with the
\&\f(CW\*(C`defined\*(C'\fR operator.
.if n .Ip "Value of \s-1CLI\s0 symbol """"%s"""" too long" 4
.el .Ip "Value of \s-1CLI\s0 symbol ``%s'' too long" 4
.IX Item "Value of CLI symbol "%s too long"
(W misc) A warning peculiar to \s-1VMS\s0.  Perl tried to read the value of an
\&\f(CW%ENV\fR element from a \s-1CLI\s0 symbol table, and found a resultant string
longer than 1024 characters.  The return value has been truncated to
1024 characters.
.if n .Ip "Variable """"%s"""" is not imported%s" 4
.el .Ip "Variable ``%s'' is not imported%s" 4
.IX Item "Variable "%s is not imported%s"
(F) While \*(L"use strict\*(R" in effect, you referred to a global variable that
you apparently thought was imported from another module, because
something else of the same name (usually a subroutine) is exported by
that module.  It usually means you put the wrong funny character on the
front of your variable.
.if n .Ip """""%s"""" variable \f(CW%s\fR masks earlier declaration in same \f(CW%s\fR" 4
.el .Ip "``%s'' variable \f(CW%s\fR masks earlier declaration in same \f(CW%s\fR" 4
.IX Item ""%s variable %s masks earlier declaration in same %s"
(W misc) A \*(L"my\*(R" or \*(L"our\*(R" variable has been redeclared in the current
scope or statement, effectively eliminating all access to the previous
instance.  This is almost always a typographical error.  Note that the
earlier variable will still exist until the end of the scope or until
all closure referents to it are destroyed.
.if n .Ip "Variable """"%s"""" may be unavailable" 4
.el .Ip "Variable ``%s'' may be unavailable" 4
.IX Item "Variable "%s may be unavailable"
(W closure) An inner (nested) \fIanonymous\fR subroutine is inside a
\&\fInamed\fR subroutine, and outside that is another subroutine; and the
anonymous (innermost) subroutine is referencing a lexical variable
defined in the outermost subroutine.  For example:
.Sp
.Vb 1
\&   sub outermost { my $a; sub middle { sub { $a } } }
.Ve
If the anonymous subroutine is called or referenced (directly or
indirectly) from the outermost subroutine, it will share the variable as
you would expect.  But if the anonymous subroutine is called or
referenced when the outermost subroutine is not active, it will see the
value of the shared variable as it was before and during the *first*
call to the outermost subroutine, which is probably not what you want.
.Sp
In these circumstances, it is usually best to make the middle subroutine
anonymous, using the \f(CW\*(C`sub {}\*(C'\fR syntax.  Perl has specific support for
shared variables in nested anonymous subroutines; a named subroutine in
between interferes with this feature.
.Ip "Variable syntax" 4
.IX Item "Variable syntax"
(A) You've accidentally run your script through \fBcsh\fR instead
of Perl.  Check the #! line, or manually feed your script into
Perl yourself.
.if n .Ip "Variable """"%s"""" will not stay shared" 4
.el .Ip "Variable ``%s'' will not stay shared" 4
.IX Item "Variable "%s will not stay shared"
(W closure) An inner (nested) \fInamed\fR subroutine is referencing a
lexical variable defined in an outer subroutine.
.Sp
When the inner subroutine is called, it will probably see the value of
the outer subroutine's variable as it was before and during the *first*
call to the outer subroutine; in this case, after the first call to the
outer subroutine is complete, the inner and outer subroutines will no
longer share a common value for the variable.  In other words, the
variable will no longer be shared.
.Sp
Furthermore, if the outer subroutine is anonymous and references a
lexical variable outside itself, then the outer and inner subroutines
will \fInever\fR share the given variable.
.Sp
This problem can usually be solved by making the inner subroutine
anonymous, using the \f(CW\*(C`sub {}\*(C'\fR syntax.  When inner anonymous subs that
reference variables in outer subroutines are called or referenced, they
are automatically rebound to the current values of such variables.
.Ip "Variable length lookbehind not implemented before << \s-1HERE\s0 in \f(CW%s\fR" 4
.IX Item "Variable length lookbehind not implemented before << HERE in %s"
(F) Lookbehind is allowed only for subexpressions whose length is fixed and
known at compile time. The << \s-1HERE\s0 shows in the regular expression about where
the problem was discovered.
.Ip "Version number must be a constant number" 4
.IX Item "Version number must be a constant number"
(P) The attempt to translate a \f(CW\*(C`use Module n.n LIST\*(C'\fR statement into
its equivalent \f(CW\*(C`BEGIN\*(C'\fR block found an internal inconsistency with
the version number.
.Ip "Warning: something's wrong" 4
.IX Item "Warning: something's wrong"
(W) You passed \fIwarn()\fR an empty string (the equivalent of \f(CW\*(C`warn ""\*(C'\fR) or
you called it with no args and \f(CW\*(C`$_\*(C'\fR was empty.
.Ip "Warning: unable to close filehandle \f(CW%s\fR properly" 4
.IX Item "Warning: unable to close filehandle %s properly"
(S) The implicit \fIclose()\fR done by an \fIopen()\fR got an error indication on
the \fIclose()\fR.  This usually indicates your file system ran out of disk
space.
.if n .Ip "Warning: Use of """"%s"""" without parentheses is ambiguous" 4
.el .Ip "Warning: Use of ``%s'' without parentheses is ambiguous" 4
.IX Item "Warning: Use of "%s without parentheses is ambiguous"
(S ambiguous) You wrote a unary operator followed by something that
looks like a binary operator that could also have been interpreted as a
term or unary operator.  For instance, if you know that the rand
function has a default argument of 1.0, and you write
.Sp
.Vb 1
\&    rand + 5;
.Ve
you may \s-1THINK\s0 you wrote the same thing as
.Sp
.Vb 1
\&    rand() + 5;
.Ve
but in actual fact, you got
.Sp
.Vb 1
\&    rand(+5);
.Ve
So put in parentheses to say what you really mean.
.Ip "Wide character in \f(CW%s\fR" 4
.IX Item "Wide character in %s"
(F) Perl met a wide character (>255) when it wasn't expecting one.
.Ip "\fIwrite()\fR on closed filehandle \f(CW%s\fR" 4
.IX Item "write() on closed filehandle %s"
(W closed) The filehandle you're writing to got itself closed sometime
before now.  Check your logic flow.
.Ip "X outside of string" 4
.IX Item "X outside of string"
(F) You had a pack template that specified a relative position before
the beginning of the string being unpacked.  See the pack entry in the perlfunc manpage.
.Ip "x outside of string" 4
.IX Item "x outside of string"
(F) You had a pack template that specified a relative position after
the end of the string being unpacked.  See the pack entry in the perlfunc manpage.
.if n .Ip "Xsub """"%s"""" called in sort" 4
.el .Ip "Xsub ``%s'' called in sort" 4
.IX Item "Xsub "%s called in sort"
(F) The use of an external subroutine as a sort comparison is not yet
supported.
.Ip "Xsub called in sort" 4
.IX Item "Xsub called in sort"
(F) The use of an external subroutine as a sort comparison is not yet
supported.
.if n .Ip "You can't use \f(CW""""\-l""""\fR on a filehandle" 4
.el .Ip "You can't use \f(CW\-l\fR on a filehandle" 4
.IX Item "You can't use -l on a filehandle"
(F) A filehandle represents an opened file, and when you opened the file
it already went past any symlink you are presumably trying to look for.
Use a filename instead.
.Ip "\s-1YOU\s0 \s-1HAVEN\s0'T \s-1DISABLED\s0 \s-1SET-ID\s0 \s-1SCRIPTS\s0 \s-1IN\s0 \s-1THE\s0 \s-1KERNEL\s0 \s-1YET\s0!" 4
.IX Item "YOU HAVEN'T DISABLED SET-ID SCRIPTS IN THE KERNEL YET!"
(F) And you probably never will, because you probably don't have the
sources to your kernel, and your vendor probably doesn't give a rip
about what you want.  Your best bet is to use the wrapsuid script in the
eg directory to put a setuid C wrapper around your script.
.if n .Ip "You need to quote """"%s""""" 4
.el .Ip "You need to quote ``%s''" 4
.IX Item "You need to quote "%s"
(W syntax) You assigned a bareword as a signal handler name.
Unfortunately, you already have a subroutine of that name declared,
which means that Perl 5 will try to call the subroutine when the
assignment is executed, which is probably not what you want.  (If it \s-1IS\s0
what you want, put an & in front.)
