.\" Automatically generated by Pod::Man version 1.15
.\" Fri Apr 20 12:58:32 2001
.\"
.\" Standard preamble:
.\" ======================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R

.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used
.\" to do unbreakable dashes and therefore won't be available.  \*(C` and
.\" \*(C' expand to `' in nroff, nothing in troff, for use with C<>
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr
.\" for titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and
.\" index entries marked with X<> in POD.  Of course, you'll have to process
.\" the output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it
.\" makes way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.bd B 3
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ======================================================================
.\"
.IX Title "PERLDEBGUTS 1"
.TH PERLDEBGUTS 1 "perl v5.6.1" "2001-04-08" "Perl Programmers Reference Guide"
.UC
.SH "NAME"
perldebguts \- Guts of Perl debugging 
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is not the \fIperldebug\fR\|(1) manpage, which tells you how to use
the debugger.  This manpage describes low-level details ranging
between difficult and impossible for anyone who isn't incredibly
intimate with Perl's guts to understand.  Caveat lector.
.SH "Debugger Internals"
.IX Header "Debugger Internals"
Perl has special debugging hooks at compile-time and run-time used
to create debugging environments.  These hooks are not to be confused
with the \fIperl \-Dxxx\fR command described in the perlrun manpage, which is
usable only if a special Perl is built per the instructions in the
\&\fI\s-1INSTALL\s0\fR podpage in the Perl source tree.
.PP
For example, whenever you call Perl's built-in \f(CW\*(C`caller\*(C'\fR function
from the package \s-1DB\s0, the arguments that the corresponding stack
frame was called with are copied to the \f(CW@DB::args\fR array.  The
general mechanisms is enabled by calling Perl with the \fB\-d\fR switch, the
following additional features are enabled (cf. the section on "$^P" in the perlvar manpage):
.Ip "\(bu" 4
Perl inserts the contents of \f(CW\*(C`$ENV{PERL5DB}\*(C'\fR (or \f(CW\*(C`BEGIN {require
\&'perl5db.pl'}\*(C'\fR if not present) before the first line of your program.
.Ip "\(bu" 4
Each array \f(CW\*(C`@{"_<$filename"}\*(C'\fR holds the lines of \f(CW$filename\fR for a
file compiled by Perl.  The same for \f(CW\*(C`eval\*(C'\fRed strings that contain
subroutines, or which are currently being executed.  The \f(CW$filename\fR
for \f(CW\*(C`eval\*(C'\fRed strings looks like \f(CW\*(C`(eval 34)\*(C'\fR.   Code assertions
in regexes look like \f(CW\*(C`(re_eval 19)\*(C'\fR.  
.Sp
Values in this array are magical in numeric context: they compare
equal to zero only if the line is not breakable.
.Ip "\(bu" 4
Each hash \f(CW\*(C`%{"_<$filename"}\*(C'\fR contains breakpoints and actions keyed
by line number.  Individual entries (as opposed to the whole hash)
are settable.  Perl only cares about Boolean true here, although
the values used by \fIperl5db.pl\fR have the form
\&\f(CW\*(C`"$break_condition\e0$action"\*(C'\fR.  
.Sp
The same holds for evaluated strings that contain subroutines, or
which are currently being executed.  The \f(CW$filename\fR for \f(CW\*(C`eval\*(C'\fRed strings
looks like \f(CW\*(C`(eval 34)\*(C'\fR or  \f(CW\*(C`(re_eval 19)\*(C'\fR.
.Ip "\(bu" 4
Each scalar \f(CW\*(C`${"_<$filename"}\*(C'\fR contains \f(CW\*(C`"_<$filename"\*(C'\fR.  This is
also the case for evaluated strings that contain subroutines, or
which are currently being executed.  The \f(CW$filename\fR for \f(CW\*(C`eval\*(C'\fRed
strings looks like \f(CW\*(C`(eval 34)\*(C'\fR or \f(CW\*(C`(re_eval 19)\*(C'\fR.
.Ip "\(bu" 4
After each \f(CW\*(C`require\*(C'\fRd file is compiled, but before it is executed,
\&\f(CW\*(C`DB::postponed(*{"_<$filename"})\*(C'\fR is called if the subroutine
\&\f(CW\*(C`DB::postponed\*(C'\fR exists.  Here, the \f(CW$filename\fR is the expanded name of
the \f(CW\*(C`require\*(C'\fRd file, as found in the values of \f(CW%INC\fR.
.Ip "\(bu" 4
After each subroutine \f(CW\*(C`subname\*(C'\fR is compiled, the existence of
\&\f(CW\*(C`$DB::postponed{subname}\*(C'\fR is checked.  If this key exists,
\&\f(CW\*(C`DB::postponed(subname)\*(C'\fR is called if the \f(CW\*(C`DB::postponed\*(C'\fR subroutine
also exists.
.Ip "\(bu" 4
A hash \f(CW\*(C`%DB::sub\*(C'\fR is maintained, whose keys are subroutine names
and whose values have the form \f(CW\*(C`filename:startline\-endline\*(C'\fR.
\&\f(CW\*(C`filename\*(C'\fR has the form \f(CW\*(C`(eval 34)\*(C'\fR for subroutines defined inside
\&\f(CW\*(C`eval\*(C'\fRs, or \f(CW\*(C`(re_eval 19)\*(C'\fR for those within regex code assertions.
.Ip "\(bu" 4
When the execution of your program reaches a point that can hold a
breakpoint, the \f(CW\*(C`DB::DB()\*(C'\fR subroutine is called any of the variables
\&\f(CW$DB::trace\fR, \f(CW$DB::single\fR, or \f(CW$DB::signal\fR is true.  These variables
are not \f(CW\*(C`local\*(C'\fRizable.  This feature is disabled when executing
inside \f(CW\*(C`DB::DB()\*(C'\fR, including functions called from it 
unless \f(CW\*(C`$^D & (1<<30)\*(C'\fR is true.
.Ip "\(bu" 4
When execution of the program reaches a subroutine call, a call to
\&\f(CW\*(C`&DB::sub\*(C'\fR(\fIargs\fR) is made instead, with \f(CW\*(C`$DB::sub\*(C'\fR holding the
name of the called subroutine.  This doesn't happen if the subroutine
was compiled in the \f(CW\*(C`DB\*(C'\fR package.)
.PP
Note that if \f(CW\*(C`&DB::sub\*(C'\fR needs external data for it to work, no
subroutine call is possible until this is done.  For the standard
debugger, the  \f(CW\*(C`$DB::deep\*(C'\fR variable (how many levels of recursion
deep into the debugger you can go before a mandatory break) gives
an example of such a dependency.
.Sh "Writing Your Own Debugger"
.IX Subsection "Writing Your Own Debugger"
The minimal working debugger consists of one line
.PP
.Vb 1
\&  sub DB::DB {}
.Ve
which is quite handy as contents of \f(CW\*(C`PERL5DB\*(C'\fR environment
variable:
.PP
.Vb 1
\&  $ PERL5DB="sub DB::DB {}" perl -d your-script
.Ve
Another brief debugger, slightly more useful, could be created
with only the line:
.PP
.Vb 1
\&  sub DB::DB {print ++$i; scalar <STDIN>}
.Ve
This debugger would print the sequential number of encountered
statement, and would wait for you to hit a newline before continuing.
.PP
The following debugger is quite functional:
.PP
.Vb 5
\&  {
\&    package DB;
\&    sub DB  {}
\&    sub sub {print ++$i, " $sub\en"; &$sub}
\&  }
.Ve
It prints the sequential number of subroutine call and the name of the
called subroutine.  Note that \f(CW\*(C`&DB::sub\*(C'\fR should be compiled into the
package \f(CW\*(C`DB\*(C'\fR.
.PP
At the start, the debugger reads your rc file (\fI./.perldb\fR or
\&\fI~/.perldb\fR under Unix), which can set important options.  This file may
define a subroutine \f(CW\*(C`&afterinit\*(C'\fR to be executed after the debugger is
initialized.
.PP
After the rc file is read, the debugger reads the \s-1PERLDB_OPTS\s0
environment variable and parses this as the remainder of a \f(CW\*(C`O ...\*(C'\fR
line as one might enter at the debugger prompt.
.PP
The debugger also maintains magical internal variables, such as
\&\f(CW\*(C`@DB::dbline\*(C'\fR, \f(CW\*(C`%DB::dbline\*(C'\fR, which are aliases for
\&\f(CW\*(C`@{"::_<current_file"}\*(C'\fR \f(CW\*(C`%{"::_<current_file"}\*(C'\fR.  Here \f(CW\*(C`current_file\*(C'\fR
is the currently selected file, either explicitly chosen with the
debugger's \f(CW\*(C`f\*(C'\fR command, or implicitly by flow of execution.
.PP
Some functions are provided to simplify customization.  See
the Options entry in the perldebug manpage for description of options parsed by
\&\f(CW\*(C`DB::parse_options(string)\*(C'\fR.  The function \f(CW\*(C`DB::dump_trace(skip[,
count])\*(C'\fR skips the specified number of frames and returns a list
containing information about the calling frames (all of them, if
\&\f(CW\*(C`count\*(C'\fR is missing).  Each entry is reference to a hash with
keys \f(CW\*(C`context\*(C'\fR (either \f(CW\*(C`.\*(C'\fR, \f(CW\*(C`$\*(C'\fR, or \f(CW\*(C`@\*(C'\fR), \f(CW\*(C`sub\*(C'\fR (subroutine
name, or info about \f(CW\*(C`eval\*(C'\fR), \f(CW\*(C`args\*(C'\fR (\f(CW\*(C`undef\*(C'\fR or a reference to
an array), \f(CW\*(C`file\*(C'\fR, and \f(CW\*(C`line\*(C'\fR.
.PP
The function \f(CW\*(C`DB::print_trace(FH, skip[, count[, short]])\*(C'\fR prints
formatted info about caller frames.  The last two functions may be
convenient as arguments to \f(CW\*(C`<\*(C'\fR, \f(CW\*(C`<<\*(C'\fR commands.
.PP
Note that any variables and functions that are not documented in
this manpages (or in the perldebug manpage) are considered for internal   
use only, and as such are subject to change without notice.
.SH "Frame Listing Output Examples"
.IX Header "Frame Listing Output Examples"
The \f(CW\*(C`frame\*(C'\fR option can be used to control the output of frame 
information.  For example, contrast this expression trace:
.PP
.Vb 2
\& $ perl -de 42
\& Stack dump during die enabled outside of evals.
.Ve
.Vb 2
\& Loading DB routines from perl5db.pl patch level 0.94
\& Emacs support available.
.Ve
.Vb 1
\& Enter h or `h h' for help.
.Ve
.Vb 2
\& main::(-e:1):   0
\&   DB<1> sub foo { 14 }
.Ve
.Vb 1
\&   DB<2> sub bar { 3 }
.Ve
.Vb 5
\&   DB<3> t print foo() * bar()
\& main::((eval 172):3):   print foo() + bar();
\& main::foo((eval 168):2):
\& main::bar((eval 170):2):
\& 42
.Ve
with this one, once the \f(CW\*(C`O\*(C'\fRption \f(CW\*(C`frame=2\*(C'\fR has been set:
.PP
.Vb 11
\&   DB<4> O f=2
\&                frame = '2'
\&   DB<5> t print foo() * bar()
\& 3:      foo() * bar()
\& entering main::foo
\&  2:     sub foo { 14 };
\& exited main::foo
\& entering main::bar
\&  2:     sub bar { 3 };
\& exited main::bar
\& 42
.Ve
By way of demonstration, we present below a laborious listing
resulting from setting your \f(CW\*(C`PERLDB_OPTS\*(C'\fR environment variable to
the value \f(CW\*(C`f=n N\*(C'\fR, and running \fIperl \-d \-V\fR from the command line.
Examples use various values of \f(CW\*(C`n\*(C'\fR are shown to give you a feel
for the difference between settings.  Long those it may be, this
is not a complete listing, but only excerpts.
.Ip "1" 4
.IX Item "1"
.Vb 13
\&  entering main::BEGIN
\&   entering Config::BEGIN
\&    Package lib/Exporter.pm.
\&    Package lib/Carp.pm.
\&   Package lib/Config.pm.
\&   entering Config::TIEHASH
\&   entering Exporter::import
\&    entering Exporter::export
\&  entering Config::myconfig
\&   entering Config::FETCH
\&   entering Config::FETCH
\&   entering Config::FETCH
\&   entering Config::FETCH
.Ve
.Ip "2" 4
.IX Item "2"
.Vb 19
\&  entering main::BEGIN
\&   entering Config::BEGIN
\&    Package lib/Exporter.pm.
\&    Package lib/Carp.pm.
\&   exited Config::BEGIN
\&   Package lib/Config.pm.
\&   entering Config::TIEHASH
\&   exited Config::TIEHASH
\&   entering Exporter::import
\&    entering Exporter::export
\&    exited Exporter::export
\&   exited Exporter::import
\&  exited main::BEGIN
\&  entering Config::myconfig
\&   entering Config::FETCH
\&   exited Config::FETCH
\&   entering Config::FETCH
\&   exited Config::FETCH
\&   entering Config::FETCH
.Ve
.Ip "4" 4
.IX Item "4"
.Vb 15
\&  in  $=main::BEGIN() from /dev/null:0
\&   in  $=Config::BEGIN() from lib/Config.pm:2
\&    Package lib/Exporter.pm.
\&    Package lib/Carp.pm.
\&   Package lib/Config.pm.
\&   in  $=Config::TIEHASH('Config') from lib/Config.pm:644
\&   in  $=Exporter::import('Config', 'myconfig', 'config_vars') from /dev/null:0
\&    in  $=Exporter::export('Config', 'main', 'myconfig', 'config_vars') from li
\&  in  @=Config::myconfig() from /dev/null:0
\&   in  $=Config::FETCH(ref(Config), 'package') from lib/Config.pm:574
\&   in  $=Config::FETCH(ref(Config), 'baserev') from lib/Config.pm:574
\&   in  $=Config::FETCH(ref(Config), 'PERL_VERSION') from lib/Config.pm:574
\&   in  $=Config::FETCH(ref(Config), 'PERL_SUBVERSION') from lib/Config.pm:574
\&   in  $=Config::FETCH(ref(Config), 'osname') from lib/Config.pm:574
\&   in  $=Config::FETCH(ref(Config), 'osvers') from lib/Config.pm:574
.Ve
.Ip "6" 4
.IX Item "6"
.Vb 21
\&  in  $=main::BEGIN() from /dev/null:0
\&   in  $=Config::BEGIN() from lib/Config.pm:2
\&    Package lib/Exporter.pm.
\&    Package lib/Carp.pm.
\&   out $=Config::BEGIN() from lib/Config.pm:0
\&   Package lib/Config.pm.
\&   in  $=Config::TIEHASH('Config') from lib/Config.pm:644
\&   out $=Config::TIEHASH('Config') from lib/Config.pm:644
\&   in  $=Exporter::import('Config', 'myconfig', 'config_vars') from /dev/null:0
\&    in  $=Exporter::export('Config', 'main', 'myconfig', 'config_vars') from lib/
\&    out $=Exporter::export('Config', 'main', 'myconfig', 'config_vars') from lib/
\&   out $=Exporter::import('Config', 'myconfig', 'config_vars') from /dev/null:0
\&  out $=main::BEGIN() from /dev/null:0
\&  in  @=Config::myconfig() from /dev/null:0
\&   in  $=Config::FETCH(ref(Config), 'package') from lib/Config.pm:574
\&   out $=Config::FETCH(ref(Config), 'package') from lib/Config.pm:574
\&   in  $=Config::FETCH(ref(Config), 'baserev') from lib/Config.pm:574
\&   out $=Config::FETCH(ref(Config), 'baserev') from lib/Config.pm:574
\&   in  $=Config::FETCH(ref(Config), 'PERL_VERSION') from lib/Config.pm:574
\&   out $=Config::FETCH(ref(Config), 'PERL_VERSION') from lib/Config.pm:574
\&   in  $=Config::FETCH(ref(Config), 'PERL_SUBVERSION') from lib/Config.pm:574
.Ve
.Ip "14" 4
.IX Item "14"
.Vb 18
\&  in  $=main::BEGIN() from /dev/null:0
\&   in  $=Config::BEGIN() from lib/Config.pm:2
\&    Package lib/Exporter.pm.
\&    Package lib/Carp.pm.
\&   out $=Config::BEGIN() from lib/Config.pm:0
\&   Package lib/Config.pm.
\&   in  $=Config::TIEHASH('Config') from lib/Config.pm:644
\&   out $=Config::TIEHASH('Config') from lib/Config.pm:644
\&   in  $=Exporter::import('Config', 'myconfig', 'config_vars') from /dev/null:0
\&    in  $=Exporter::export('Config', 'main', 'myconfig', 'config_vars') from lib/E
\&    out $=Exporter::export('Config', 'main', 'myconfig', 'config_vars') from lib/E
\&   out $=Exporter::import('Config', 'myconfig', 'config_vars') from /dev/null:0
\&  out $=main::BEGIN() from /dev/null:0
\&  in  @=Config::myconfig() from /dev/null:0
\&   in  $=Config::FETCH('Config=HASH(0x1aa444)', 'package') from lib/Config.pm:574
\&   out $=Config::FETCH('Config=HASH(0x1aa444)', 'package') from lib/Config.pm:574
\&   in  $=Config::FETCH('Config=HASH(0x1aa444)', 'baserev') from lib/Config.pm:574
\&   out $=Config::FETCH('Config=HASH(0x1aa444)', 'baserev') from lib/Config.pm:574
.Ve
.Ip "30" 4
.IX Item "30"
.Vb 15
\&  in  $=CODE(0x15eca4)() from /dev/null:0
\&   in  $=CODE(0x182528)() from lib/Config.pm:2
\&    Package lib/Exporter.pm.
\&   out $=CODE(0x182528)() from lib/Config.pm:0
\&   scalar context return from CODE(0x182528): undef
\&   Package lib/Config.pm.
\&   in  $=Config::TIEHASH('Config') from lib/Config.pm:628
\&   out $=Config::TIEHASH('Config') from lib/Config.pm:628
\&   scalar context return from Config::TIEHASH:   empty hash
\&   in  $=Exporter::import('Config', 'myconfig', 'config_vars') from /dev/null:0
\&    in  $=Exporter::export('Config', 'main', 'myconfig', 'config_vars') from lib/Exporter.pm:171
\&    out $=Exporter::export('Config', 'main', 'myconfig', 'config_vars') from lib/Exporter.pm:171
\&    scalar context return from Exporter::export: ''
\&   out $=Exporter::import('Config', 'myconfig', 'config_vars') from /dev/null:0
\&   scalar context return from Exporter::import: ''
.Ve
.PP
In all cases shown above, the line indentation shows the call tree.
If bit 2 of \f(CW\*(C`frame\*(C'\fR is set, a line is printed on exit from a
subroutine as well.  If bit 4 is set, the arguments are printed
along with the caller info.  If bit 8 is set, the arguments are
printed even if they are tied or references.  If bit 16 is set, the
return value is printed, too.
.PP
When a package is compiled, a line like this
.PP
.Vb 1
\&    Package lib/Carp.pm.
.Ve
is printed with proper indentation.
.SH "Debugging regular expressions"
.IX Header "Debugging regular expressions"
There are two ways to enable debugging output for regular expressions.
.PP
If your perl is compiled with \f(CW\*(C`\-DDEBUGGING\*(C'\fR, you may use the
\&\fB\-Dr\fR flag on the command line.
.PP
Otherwise, one can \f(CW\*(C`use re 'debug'\*(C'\fR, which has effects at
compile time and run time.  It is not lexically scoped.
.Sh "Compile-time output"
.IX Subsection "Compile-time output"
The debugging output at compile time looks like this:
.PP
.Vb 20
\&  compiling RE `[bc]d(ef*g)+h[ij]k$'
\&  size 43 first at 1
\&     1: ANYOF(11)
\&    11: EXACT <d>(13)
\&    13: CURLYX {1,32767}(27)
\&    15:   OPEN1(17)
\&    17:     EXACT <e>(19)
\&    19:     STAR(22)
\&    20:       EXACT <f>(0)
\&    22:     EXACT <g>(24)
\&    24:   CLOSE1(26)
\&    26:   WHILEM(0)
\&    27: NOTHING(28)
\&    28: EXACT <h>(30)
\&    30: ANYOF(40)
\&    40: EXACT <k>(42)
\&    42: EOL(43)
\&    43: END(0)
\&  anchored `de' at 1 floating `gh' at 3..2147483647 (checking floating)
\&                                    stclass `ANYOF' minlen 7
.Ve
The first line shows the pre-compiled form of the regex.  The second
shows the size of the compiled form (in arbitrary units, usually
4\-byte words) and the label \fIid\fR of the first node that does a
match.
.PP
The last line (split into two lines above) contains optimizer
information.  In the example shown, the optimizer found that the match 
should contain a substring \f(CW\*(C`de\*(C'\fR at offset 1, plus substring \f(CW\*(C`gh\*(C'\fR
at some offset between 3 and infinity.  Moreover, when checking for
these substrings (to abandon impossible matches quickly), Perl will check
for the substring \f(CW\*(C`gh\*(C'\fR before checking for the substring \f(CW\*(C`de\*(C'\fR.  The
optimizer may also use the knowledge that the match starts (at the
\&\f(CW\*(C`first\*(C'\fR \fIid\fR) with a character class, and the match cannot be
shorter than 7 chars.
.PP
The fields of interest which may appear in the last line are
.if n .Ip "\f(CW""""anchored""""\fR \fI\s-1STRING\s0\fR \f(CW""""at""""\fR \fI\s-1POS\s0\fR" 4
.el .Ip "\f(CWanchored\fR \fI\s-1STRING\s0\fR \f(CWat\fR \fI\s-1POS\s0\fR" 4
.IX Item "anchored STRING at POS"
.PD 0
.if n .Ip "\f(CW""""floating""""\fR \fI\s-1STRING\s0\fR \f(CW""""at""""\fR \fI\s-1POS1\s0..POS2\fR" 4
.el .Ip "\f(CWfloating\fR \fI\s-1STRING\s0\fR \f(CWat\fR \fI\s-1POS1\s0..POS2\fR" 4
.IX Item "floating STRING at POS1..POS2"
.PD
See above.
.if n .Ip "\f(CW""""matching floating/anchored""""\fR" 4
.el .Ip "\f(CWmatching floating/anchored\fR" 4
.IX Item "matching floating/anchored"
Which substring to check first.
.if n .Ip "\f(CW""""minlen""""\fR" 4
.el .Ip "\f(CWminlen\fR" 4
.IX Item "minlen"
The minimal length of the match.
.if n .Ip "\f(CW""""stclass""""\fR \fI\s-1TYPE\s0\fR" 4
.el .Ip "\f(CWstclass\fR \fI\s-1TYPE\s0\fR" 4
.IX Item "stclass TYPE"
Type of first matching node.
.if n .Ip "\f(CW""""noscan""""\fR" 4
.el .Ip "\f(CWnoscan\fR" 4
.IX Item "noscan"
Don't scan for the found substrings.
.if n .Ip "\f(CW""""isall""""\fR" 4
.el .Ip "\f(CWisall\fR" 4
.IX Item "isall"
Means that the optimizer info is all that the regular
expression contains, and thus one does not need to enter the regex engine at
all.
.if n .Ip "\f(CW""""GPOS""""\fR" 4
.el .Ip "\f(CWGPOS\fR" 4
.IX Item "GPOS"
Set if the pattern contains \f(CW\*(C`\eG\*(C'\fR.
.if n .Ip "\f(CW""""plus""""\fR" 4
.el .Ip "\f(CWplus\fR" 4
.IX Item "plus"
Set if the pattern starts with a repeated char (as in \f(CW\*(C`x+y\*(C'\fR).
.if n .Ip "\f(CW""""implicit""""\fR" 4
.el .Ip "\f(CWimplicit\fR" 4
.IX Item "implicit"
Set if the pattern starts with \f(CW\*(C`.*\*(C'\fR.
.if n .Ip "\f(CW""""with eval""""\fR" 4
.el .Ip "\f(CWwith eval\fR" 4
.IX Item "with eval"
Set if the pattern contain eval-groups, such as \f(CW\*(C`(?{ code })\*(C'\fR and
\&\f(CW\*(C`(??{ code })\*(C'\fR.
.if n .Ip "\f(CW""""anchored(TYPE)""""\fR" 4
.el .Ip "\f(CWanchored(TYPE)\fR" 4
.IX Item "anchored(TYPE)"
If the pattern may match only at a handful of places, (with \f(CW\*(C`TYPE\*(C'\fR
being \f(CW\*(C`BOL\*(C'\fR, \f(CW\*(C`MBOL\*(C'\fR, or \f(CW\*(C`GPOS\*(C'\fR.  See the table below.
.PP
If a substring is known to match at end-of-line only, it may be
followed by \f(CW\*(C`$\*(C'\fR, as in \f(CW\*(C`floating `k'$\*(C'\fR.
.PP
The optimizer-specific info is used to avoid entering (a slow) regex
engine on strings that will not definitely match.  If \f(CW\*(C`isall\*(C'\fR flag
is set, a call to the regex engine may be avoided even when the optimizer
found an appropriate place for the match.
.PP
The rest of the output contains the list of \fInodes\fR of the compiled
form of the regex.  Each line has format 
.PP
\&\f(CW\*(C`   \*(C'\fR\fIid\fR: \fI\s-1TYPE\s0\fR \fI\s-1OPTIONAL-INFO\s0\fR (\fInext-id\fR)
.Sh "Types of nodes"
.IX Subsection "Types of nodes"
Here are the possible types, with short descriptions:
.PP
.Vb 1
\&    # TYPE arg-description [num-args] [longjump-len] DESCRIPTION
.Ve
.Vb 3
\&    # Exit points
\&    END         no      End of program.
\&    SUCCEED     no      Return from a subroutine, basically.
.Ve
.Vb 13
\&    # Anchors:
\&    BOL         no      Match "" at beginning of line.
\&    MBOL        no      Same, assuming multiline.
\&    SBOL        no      Same, assuming singleline.
\&    EOS         no      Match "" at end of string.
\&    EOL         no      Match "" at end of line.
\&    MEOL        no      Same, assuming multiline.
\&    SEOL        no      Same, assuming singleline.
\&    BOUND       no      Match "" at any word boundary
\&    BOUNDL      no      Match "" at any word boundary
\&    NBOUND      no      Match "" at any word non-boundary
\&    NBOUNDL     no      Match "" at any word non-boundary
\&    GPOS        no      Matches where last m//g left off.
.Ve
.Vb 14
\&    # [Special] alternatives
\&    ANY         no      Match any one character (except newline).
\&    SANY        no      Match any one character.
\&    ANYOF       sv      Match character in (or not in) this class.
\&    ALNUM       no      Match any alphanumeric character
\&    ALNUML      no      Match any alphanumeric char in locale
\&    NALNUM      no      Match any non-alphanumeric character
\&    NALNUML     no      Match any non-alphanumeric char in locale
\&    SPACE       no      Match any whitespace character
\&    SPACEL      no      Match any whitespace char in locale
\&    NSPACE      no      Match any non-whitespace character
\&    NSPACEL     no      Match any non-whitespace char in locale
\&    DIGIT       no      Match any numeric character
\&    NDIGIT      no      Match any non-numeric character
.Ve
.Vb 9
\&    # BRANCH    The set of branches constituting a single choice are hooked
\&    #           together with their "next" pointers, since precedence prevents
\&    #           anything being concatenated to any individual branch.  The
\&    #           "next" pointer of the last BRANCH in a choice points to the
\&    #           thing following the whole choice.  This is also where the
\&    #           final "next" pointer of each individual branch points; each
\&    #           branch starts with the operand node of a BRANCH node.
\&    #
\&    BRANCH      node    Match this alternative, or the next...
.Ve
.Vb 4
\&    # BACK      Normal "next" pointers all implicitly point forward; BACK
\&    #           exists to make loop structures possible.
\&    # not used
\&    BACK        no      Match "", "next" ptr points backward.
.Ve
.Vb 4
\&    # Literals
\&    EXACT       sv      Match this string (preceded by length).
\&    EXACTF      sv      Match this string, folded (prec. by length).
\&    EXACTFL     sv      Match this string, folded in locale (w/len).
.Ve
.Vb 4
\&    # Do nothing
\&    NOTHING     no      Match empty string.
\&    # A variant of above which delimits a group, thus stops optimizations
\&    TAIL        no      Match empty string. Can jump here from outside.
.Ve
.Vb 7
\&    # STAR,PLUS '?', and complex '*' and '+', are implemented as circular
\&    #           BRANCH structures using BACK.  Simple cases (one character
\&    #           per match) are implemented with STAR and PLUS for speed
\&    #           and to minimize recursive plunges.
\&    #
\&    STAR        node    Match this (simple) thing 0 or more times.
\&    PLUS        node    Match this (simple) thing 1 or more times.
.Ve
.Vb 5
\&    CURLY       sv 2    Match this simple thing {n,m} times.
\&    CURLYN      no 2    Match next-after-this simple thing 
\&    #                   {n,m} times, set parens.
\&    CURLYM      no 2    Match this medium-complex thing {n,m} times.
\&    CURLYX      sv 2    Match this complex thing {n,m} times.
.Ve
.Vb 2
\&    # This terminator creates a loop structure for CURLYX
\&    WHILEM      no      Do curly processing and see if rest matches.
.Ve
.Vb 3
\&    # OPEN,CLOSE,GROUPP ...are numbered at compile time.
\&    OPEN        num 1   Mark this point in input as start of #n.
\&    CLOSE       num 1   Analogous to OPEN.
.Ve
.Vb 3
\&    REF         num 1   Match some already matched string
\&    REFF        num 1   Match already matched string, folded
\&    REFFL       num 1   Match already matched string, folded in loc.
.Ve
.Vb 6
\&    # grouping assertions
\&    IFMATCH     off 1 2 Succeeds if the following matches.
\&    UNLESSM     off 1 2 Fails if the following matches.
\&    SUSPEND     off 1 1 "Independent" sub-regex.
\&    IFTHEN      off 1 1 Switch, should be preceded by switcher .
\&    GROUPP      num 1   Whether the group matched.
.Ve
.Vb 3
\&    # Support for long regex
\&    LONGJMP     off 1 1 Jump far away.
\&    BRANCHJ     off 1 1 BRANCH with long offset.
.Ve
.Vb 2
\&    # The heavy worker
\&    EVAL        evl 1   Execute some Perl code.
.Ve
.Vb 3
\&    # Modifiers
\&    MINMOD      no      Next operator is not greedy.
\&    LOGICAL     no      Next opcode should set the flag only.
.Ve
.Vb 2
\&    # This is not used yet
\&    RENUM       off 1 1 Group with independently numbered parens.
.Ve
.Vb 3
\&    # This is not really a node, but an optimized away piece of a "long" node.
\&    # To simplify debugging output, we mark it as if it were a node
\&    OPTIMIZED   off     Placeholder for dump.
.Ve
.Sh "Run-time output"
.IX Subsection "Run-time output"
First of all, when doing a match, one may get no run-time output even
if debugging is enabled.  This means that the regex engine was never
entered and that all of the job was therefore done by the optimizer.
.PP
If the regex engine was entered, the output may look like this:
.PP
.Vb 25
\&  Matching `[bc]d(ef*g)+h[ij]k$' against `abcdefg__gh__'
\&    Setting an EVAL scope, savestack=3
\&     2 <ab> <cdefg__gh_>    |  1: ANYOF
\&     3 <abc> <defg__gh_>    | 11: EXACT <d>
\&     4 <abcd> <efg__gh_>    | 13: CURLYX {1,32767}
\&     4 <abcd> <efg__gh_>    | 26:   WHILEM
\&                                0 out of 1..32767  cc=effff31c
\&     4 <abcd> <efg__gh_>    | 15:     OPEN1
\&     4 <abcd> <efg__gh_>    | 17:     EXACT <e>
\&     5 <abcde> <fg__gh_>    | 19:     STAR
\&                             EXACT <f> can match 1 times out of 32767...
\&    Setting an EVAL scope, savestack=3
\&     6 <bcdef> <g__gh__>    | 22:       EXACT <g>
\&     7 <bcdefg> <__gh__>    | 24:       CLOSE1
\&     7 <bcdefg> <__gh__>    | 26:       WHILEM
\&                                    1 out of 1..32767  cc=effff31c
\&    Setting an EVAL scope, savestack=12
\&     7 <bcdefg> <__gh__>    | 15:         OPEN1
\&     7 <bcdefg> <__gh__>    | 17:         EXACT <e>
\&       restoring \e1 to 4(4)..7
\&                                    failed, try continuation...
\&     7 <bcdefg> <__gh__>    | 27:         NOTHING
\&     7 <bcdefg> <__gh__>    | 28:         EXACT <h>
\&                                    failed...
\&                                failed...
.Ve
The most significant information in the output is about the particular \fInode\fR
of the compiled regex that is currently being tested against the target string.
The format of these lines is
.PP
\&\f(CW\*(C`    \*(C'\fR\fI\s-1STRING-OFFSET\s0\fR <\fI\s-1PRE-STRING\s0\fR> <\fI\s-1POST-STRING\s0\fR>   |\fI\s-1ID\s0\fR:  \fI\s-1TYPE\s0\fR
.PP
The \fI\s-1TYPE\s0\fR info is indented with respect to the backtracking level.
Other incidental information appears interspersed within.
.SH "Debugging Perl memory usage"
.IX Header "Debugging Perl memory usage"
Perl is a profligate wastrel when it comes to memory use.  There
is a saying that to estimate memory usage of Perl, assume a reasonable
algorithm for memory allocation, multiply that estimate by 10, and
while you still may miss the mark, at least you won't be quite so
astonished.  This is not absolutely true, but may provide a good
grasp of what happens.
.PP
Assume that an integer cannot take less than 20 bytes of memory, a
float cannot take less than 24 bytes, a string cannot take less
than 32 bytes (all these examples assume 32\-bit architectures, the
result are quite a bit worse on 64\-bit architectures).  If a variable
is accessed in two of three different ways (which require an integer,
a float, or a string), the memory footprint may increase yet another
20 bytes.  A sloppy \fImalloc\fR\|(3) implementation can inflate these
numbers dramatically.
.PP
On the opposite end of the scale, a declaration like
.PP
.Vb 1
\&  sub foo;
.Ve
may take up to 500 bytes of memory, depending on which release of Perl
you're running.
.PP
Anecdotal estimates of source-to-compiled code bloat suggest an
eightfold increase.  This means that the compiled form of reasonable
(normally commented, properly indented etc.) code will take
about eight times more space in memory than the code took
on disk.
.PP
There are two Perl-specific ways to analyze memory usage:
\&\f(CW$ENV\fR{\s-1PERL_DEBUG_MSTATS\s0} and \fB\-DL\fR command-line switch.  The first
is available only if Perl is compiled with Perl's \fImalloc()\fR; the
second only if Perl was built with \f(CW\*(C`\-DDEBUGGING\*(C'\fR.  See the
instructions for how to do this in the \fI\s-1INSTALL\s0\fR podpage at 
the top level of the Perl source tree.
.if n .Sh "Using \f(CW""$ENV{PERL_DEBUG_MSTATS}""\fP"
.el .Sh "Using \f(CW$ENV{PERL_DEBUG_MSTATS}\fP"
.IX Subsection "Using $ENV{PERL_DEBUG_MSTATS}"
If your perl is using Perl's \fImalloc()\fR and was compiled with the
necessary switches (this is the default), then it will print memory
usage statistics after compiling your code when \f(CW\*(C`$ENV{PERL_DEBUG_MSTATS}
> 1\*(C'\fR, and before termination of the program when \f(CW\*(C`$ENV{PERL_DEBUG_MSTATS} >= 1\*(C'\fR.  The report format is similar to
the following example:
.PP
.Vb 13
\&  $ PERL_DEBUG_MSTATS=2 perl -e "require Carp"
\&  Memory allocation statistics after compilation: (buckets 4(4)..8188(8192)
\&     14216 free:   130   117    28     7     9   0   2     2   1 0 0
\&                437    61    36     0     5
\&     60924 used:   125   137   161    55     7   8   6    16   2 0 1
\&                 74   109   304    84    20
\&  Total sbrk(): 77824/21:119. Odd ends: pad+heads+chain+tail: 0+636+0+2048.
\&  Memory allocation statistics after execution:   (buckets 4(4)..8188(8192)
\&     30888 free:   245    78    85    13     6   2   1     3   2 0 1
\&                315   162    39    42    11
\&    175816 used:   265   176  1112   111    26  22  11    27   2 1 1
\&                196   178  1066   798    39
\&  Total sbrk(): 215040/47:145. Odd ends: pad+heads+chain+tail: 0+2192+0+6144.
.Ve
It is possible to ask for such a statistic at arbitrary points in
your execution using the \fImstat()\fR function out of the standard
Devel::Peek module.
.PP
Here is some explanation of that format:
.if n .Ip "\f(CW""""buckets SMALLEST(APPROX)..GREATEST(APPROX)""""\fR" 4
.el .Ip "\f(CWbuckets SMALLEST(APPROX)..GREATEST(APPROX)\fR" 4
.IX Item "buckets SMALLEST(APPROX)..GREATEST(APPROX)"
Perl's \fImalloc()\fR uses bucketed allocations.  Every request is rounded
up to the closest bucket size available, and a bucket is taken from
the pool of buckets of that size.
.Sp
The line above describes the limits of buckets currently in use.
Each bucket has two sizes: memory footprint and the maximal size
of user data that can fit into this bucket.  Suppose in the above
example that the smallest bucket were size 4.  The biggest bucket
would have usable size 8188, and the memory footprint would be 8192.
.Sp
In a Perl built for debugging, some buckets may have negative usable
size.  This means that these buckets cannot (and will not) be used.
For larger buckets, the memory footprint may be one page greater
than a power of 2.  If so, case the corresponding power of two is
printed in the \f(CW\*(C`APPROX\*(C'\fR field above.
.Ip "Free/Used" 4
.IX Item "Free/Used"
The 1 or 2 rows of numbers following that correspond to the number
of buckets of each size between \f(CW\*(C`SMALLEST\*(C'\fR and \f(CW\*(C`GREATEST\*(C'\fR.  In
the first row, the sizes (memory footprints) of buckets are powers
of two\*(--or possibly one page greater.  In the second row, if present,
the memory footprints of the buckets are between the memory footprints
of two buckets \*(L"above\*(R".
.Sp
For example, suppose under the previous example, the memory footprints
were
.Sp
.Vb 2
\&     free:    8     16    32    64    128  256 512 1024 2048 4096 8192
\&           4     12    24    48    80
.Ve
With non-\f(CW\*(C`DEBUGGING\*(C'\fR perl, the buckets starting from \f(CW\*(C`128\*(C'\fR have
a 4\-byte overhead, and thus a 8192\-long bucket may take up to
8188\-byte allocations.
.if n .Ip "\f(CW""""Total sbrk(): SBRKed/SBRKs:CONTINUOUS""""\fR" 4
.el .Ip "\f(CWTotal sbrk(): SBRKed/SBRKs:CONTINUOUS\fR" 4
.IX Item "Total sbrk(): SBRKed/SBRKs:CONTINUOUS"
The first two fields give the total amount of memory perl \fIsbrk\fR\|(2)ed
(ess-broken? :\-) and number of \fIsbrk\fR\|(2)s used.  The third number is
what perl thinks about continuity of returned chunks.  So long as
this number is positive, \fImalloc()\fR will assume that it is probable
that \fIsbrk\fR\|(2) will provide continuous memory.
.Sp
Memory allocated by external libraries is not counted.
.if n .Ip "\f(CW""""pad: 0""""\fR" 4
.el .Ip "\f(CWpad: 0\fR" 4
.IX Item "pad: 0"
The amount of \fIsbrk\fR\|(2)ed memory needed to keep buckets aligned.
.if n .Ip "\f(CW""""heads: 2192""""\fR" 4
.el .Ip "\f(CWheads: 2192\fR" 4
.IX Item "heads: 2192"
Although memory overhead of bigger buckets is kept inside the bucket, for
smaller buckets, it is kept in separate areas.  This field gives the
total size of these areas.
.if n .Ip "\f(CW""""chain: 0""""\fR" 4
.el .Ip "\f(CWchain: 0\fR" 4
.IX Item "chain: 0"
\&\fImalloc()\fR may want to subdivide a bigger bucket into smaller buckets.
If only a part of the deceased bucket is left unsubdivided, the rest
is kept as an element of a linked list.  This field gives the total
size of these chunks.
.if n .Ip "\f(CW""""tail: 6144""""\fR" 4
.el .Ip "\f(CWtail: 6144\fR" 4
.IX Item "tail: 6144"
To minimize the number of \fIsbrk\fR\|(2)s, \fImalloc()\fR asks for more memory.  This
field gives the size of the yet unused part, which is \fIsbrk\fR\|(2)ed, but
never touched.
.Sh "Example of using \fB\-DL\fP switch"
.IX Subsection "Example of using -DL switch"
Below we show how to analyse memory usage by 
.PP
.Vb 1
\&  do 'lib/auto/POSIX/autosplit.ix';
.Ve
The file in question contains a header and 146 lines similar to
.PP
.Vb 1
\&  sub getcwd;
.Ve
\&\fB\s-1WARNING\s0\fR: The discussion below supposes 32\-bit architecture.  In 
newer releases of Perl, memory usage of the constructs discussed
here is greatly improved, but the story discussed below is a real-life
story.  This story is mercilessly terse, and assumes rather more than cursory
knowledge of Perl internals.  Type space to continue, `q' to quit. 
(Actually, you just want to skip to the next section.)
.PP
Here is the itemized list of Perl allocations performed during parsing
of this file:
.PP
.Vb 11
\& !!! "after" at test.pl line 3.
\&    Id  subtot   4   8  12  16  20  24  28  32  36  40  48  56  64  72  80 80+
\&  0 02   13752   .   .   .   . 294   .   .   .   .   .   .   .   .   .   .   4
\&  0 54    5545   .   .   8 124  16   .   .   .   1   1   .   .   .   .   .   3
\&  5 05      32   .   .   .   .   .   .   .   1   .   .   .   .   .   .   .   .
\&  6 02    7152   .   .   .   .   .   .   .   .   .   . 149   .   .   .   .   .
\&  7 02    3600   .   .   .   .   . 150   .   .   .   .   .   .   .   .   .   .
\&  7 03      64   .  -1   .   1   .   .   2   .   .   .   .   .   .   .   .   .
\&  7 04    7056   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   7
\&  7 17   38404   .   .   .   .   .   .   .   1   .   . 442 149   .   . 147   .
\&  9 03    2078  17 249  32   .   .   .   .   2   .   .   .   .   .   .   .   .
.Ve
To see this list, insert two \f(CW\*(C`warn('!...')\*(C'\fR statements around the call:
.PP
.Vb 3
\&  warn('!');
\&  do 'lib/auto/POSIX/autosplit.ix';
\&  warn('!!! "after"');
.Ve
and run it with Perl's \fB\-DL\fR option.  The first \fIwarn()\fR will print
memory allocation info before parsing the file and will memorize
the statistics at this point (we ignore what it prints).  The second
\&\fIwarn()\fR prints increments with respect to these memorized data.  This
is the printout shown above.
.PP
Different \fIId\fRs on the left correspond to different subsystems of
the perl interpreter.  They are just the first argument given to
the perl memory allocation \s-1API\s0 named \fINew()\fR.  To find what \f(CW\*(C`9 03\*(C'\fR
means, just \fBgrep\fR the perl source for \f(CW\*(C`903\*(C'\fR.  You'll find it in
\&\fIutil.c\fR, function \fIsavepvn()\fR.  (I know, you wonder why we told you
to \fBgrep\fR and then gave away the answer.  That's because grepping
the source is good for the soul.)  This function is used to store
a copy of an existing chunk of memory.  Using a C debugger, one can
see that the function was called either directly from \fIgv_init()\fR or
via \fIsv_magic()\fR, and that \fIgv_init()\fR is called from \fIgv_fetchpv()\fR\*(--which
was itself called from \fInewSUB()\fR.  Please stop to catch your breath now.
.PP
\&\fB\s-1NOTE\s0\fR: To reach this point in the debugger and skip the calls to
\&\fIsavepvn()\fR during the compilation of the main program, you should
set a C breakpoint
in \fIPerl_warn()\fR, continue until this point is reached, and \fIthen\fR set
a C breakpoint in \fIPerl_savepvn()\fR.  Note that you may need to skip a
handful of \fIPerl_savepvn()\fR calls that do not correspond to mass production
of CVs (there are more \f(CW\*(C`903\*(C'\fR allocations than 146 similar lines of
\&\fIlib/auto/POSIX/autosplit.ix\fR).  Note also that \f(CW\*(C`Perl_\*(C'\fR prefixes are
added by macroization code in perl header files to avoid conflicts
with external libraries.
.PP
Anyway, we see that \f(CW\*(C`903\*(C'\fR ids correspond to creation of globs, twice
per glob \- for glob name, and glob stringification magic.
.PP
Here are explanations for other \fIId\fRs above: 
.if n .Ip "\f(CW""""717""""\fR" 4
.el .Ip "\f(CW717\fR" 4
.IX Item "717"
Creates bigger \f(CW\*(C`XPV*\*(C'\fR structures.  In the case above, it
creates 3 \f(CW\*(C`AV\*(C'\fRs per subroutine, one for a list of lexical variable
names, one for a scratchpad (which contains lexical variables and
\&\f(CW\*(C`targets\*(C'\fR), and one for the array of scratchpads needed for
recursion.  
.Sp
It also creates a \f(CW\*(C`GV\*(C'\fR and a \f(CW\*(C`CV\*(C'\fR per subroutine, all called from
\&\fIstart_subparse()\fR.
.if n .Ip "\f(CW""""002""""\fR" 4
.el .Ip "\f(CW002\fR" 4
.IX Item "002"
Creates a C array corresponding to the \f(CW\*(C`AV\*(C'\fR of scratchpads and the
scratchpad itself.  The first fake entry of this scratchpad is
created though the subroutine itself is not defined yet.
.Sp
It also creates C arrays to keep data for the stash.  This is one \s-1HV\s0,
but it grows; thus, there are 4 big allocations: the big chunks are not
freed, but are kept as additional arenas for \f(CW\*(C`SV\*(C'\fR allocations.
.if n .Ip "\f(CW""""054""""\fR" 4
.el .Ip "\f(CW054\fR" 4
.IX Item "054"
Creates a \f(CW\*(C`HEK\*(C'\fR for the name of the glob for the subroutine.  This
name is a key in a \fIstash\fR.
.Sp
Big allocations with this \fIId\fR correspond to allocations of new
arenas to keep \f(CW\*(C`HE\*(C'\fR.
.if n .Ip "\f(CW""""602""""\fR" 4
.el .Ip "\f(CW602\fR" 4
.IX Item "602"
Creates a \f(CW\*(C`GP\*(C'\fR for the glob for the subroutine.
.if n .Ip "\f(CW""""702""""\fR" 4
.el .Ip "\f(CW702\fR" 4
.IX Item "702"
Creates the \f(CW\*(C`MAGIC\*(C'\fR for the glob for the subroutine.
.if n .Ip "\f(CW""""704""""\fR" 4
.el .Ip "\f(CW704\fR" 4
.IX Item "704"
Creates \fIarenas\fR which keep SVs.
.Sh "\fB\-DL\fP details"
.IX Subsection "-DL details"
If Perl is run with \fB\-DL\fR option, then \fIwarn()\fRs that start with `!'
behave specially.  They print a list of \fIcategories\fR of memory
allocations, and statistics of allocations of different sizes for
these categories.
.PP
If \fIwarn()\fR string starts with
.if n .Ip "\f(CW""""!!!""""\fR" 4
.el .Ip "\f(CW!!!\fR" 4
.IX Item "!!!"
print changed categories only, print the differences in counts of allocations.
.if n .Ip "\f(CW""""!!""""\fR" 4
.el .Ip "\f(CW!!\fR" 4
.IX Item "!!"
print grown categories only; print the absolute values of counts, and totals.
.if n .Ip "\f(CW""""!""""\fR" 4
.el .Ip "\f(CW!\fR" 4
.IX Item "!"
print nonempty categories, print the absolute values of counts and totals.
.Sh "Limitations of \fB\-DL\fP statistics"
.IX Subsection "Limitations of -DL statistics"
If an extension or external library does not use the Perl \s-1API\s0 to
allocate memory, such allocations are not counted.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
the perldebug manpage,
the perlguts manpage,
the perlrun manpage
the re manpage,
and
the Devel::Dprof manpage.
