.\" Automatically generated by Pod::Man version 1.15
.\" Mon Apr 23 13:05:46 2001
.\"
.\" Standard preamble:
.\" ======================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R

.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used
.\" to do unbreakable dashes and therefore won't be available.  \*(C` and
.\" \*(C' expand to `' in nroff, nothing in troff, for use with C<>
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr
.\" for titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and
.\" index entries marked with X<> in POD.  Of course, you'll have to process
.\" the output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it
.\" makes way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.bd B 3
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ======================================================================
.\"
.IX Title "YAPP 1"
.TH YAPP 1 "perl v5.6.1" "2001-02-11" "User Contributed Perl Documentation"
.UC
.SH "NAME"
yapp \- A perl frontend to the Parse::Yapp module
.SH "SYNOPSYS"
.IX Header "SYNOPSYS"
yapp [options] \fIgrammar\fR[.yp]
.PP
yapp \fI\-V\fR
.PP
yapp \fI\-h\fR
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
yapp is a frontend to the Parse::Yapp module, which lets you compile
Parse::Yapp grammar input files into Perl \fILALR\fR\|(1) \s-1OO\s0 parser modules.
.SH "OPTIONS"
.IX Header "OPTIONS"
Options, as of today, are all optionals :\-)
.Ip "\fI\-v\fR" 4
.IX Item "-v"
Creates a file \fIgrammar\fR.output describing your parser. It will
show you a summary of conflicts, rules, the \s-1DFA\s0 (Deterministic
Finite Automaton) states and overall usage of the parser.
.Ip "\fI\-s\fR" 4
.IX Item "-s"
Create a standalone module in which the driver is included.
Note that if you have more than one parser module called from
a program, to have it standalone, you need this option only
for one of your parser module.
.Ip "\fI\-n\fR" 4
.IX Item "-n"
Disable source file line numbering embedded in your parser module.
I don't know why one should need it, but it's there.
.Ip "\fI\-m module\fR" 4
.IX Item "-m module"
Gives your parser module the package name (or name space or module name or
class name or whatever-you-call-it) of \fImodule\fR.  It defaults to \fIgrammar\fR
.Ip "\fI\-o outfile\fR" 4
.IX Item "-o outfile"
The compiled output file will be named \fIoutfile\fR for your parser module.
It defaults to \fIgrammar\fR.pm or, if you specified the option
\&\fI\-m A::Module::Name\fR (see below), to \fIName.pm\fR.
.Ip "\fI\-t filename\fR" 4
.IX Item "-t filename"
The \fI\-t filename\fR option allows you to specify a file which should be 
used as template for generating the parser output.  The default is to 
use the internal template defined in \fIParse::Yapp::Output.pm\fR.
For how to write your own template and which substitutions are available,
have a look to the module \fIParse::Yapp::Output.pm\fR : it should be obvious. 
.Ip "\fI\-b shebang\fR" 4
.IX Item "-b shebang"
If you work on systems that understand so called \fIshebangs\fR, and your
generated parser is directly an executable script, you can specifie one
with the \fI\-b\fR option, ie:
.Sp
.Vb 1
\&    yapp -b '/usr/local/bin/perl -w' -o myscript.pl myscript.yp
.Ve
This will output a file called \fImyscript.pl\fR whose very first line is:
.Sp
.Vb 1
\&    #!/usr/local/bin/perl -w
.Ve
The argument is mandatory, but if you specify an empty string, the value
of \fI$Config{perlpath}\fR will be used instead.
.Ip "\fIgrammar\fR" 4
.IX Item "grammar"
The input grammar file. If no suffix is given, and the file does not exists,
an attempt to open the file with a suffix of  \fI.yp\fR is tried before exiting.
.Ip "\fI\-V\fR" 4
.IX Item "-V"
Display current version of Parse::Yapp and gracefully exits.
.Ip "\fI\-h\fR" 4
.IX Item "-h"
Display the usage screen.
.SH "BUGS"
.IX Header "BUGS"
None known now :\-)
.SH "AUTHOR"
.IX Header "AUTHOR"
Francois Desarmenien <francois@fdesar.net>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
(c) Copyright 1998\-1999 Francois Desarmenien, all rights reserved.
See \fIParse::Yapp\fR\|(3) for legal use and distribution rights
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIParse::Yapp\fR\|(3) \fIPerl\fR\|(1) \fIyacc\fR\|(1) \fIbison\fR\|(1)
