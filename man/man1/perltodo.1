.\" Automatically generated by Pod::Man version 1.15
.\" Fri Apr 20 13:04:43 2001
.\"
.\" Standard preamble:
.\" ======================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R

.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used
.\" to do unbreakable dashes and therefore won't be available.  \*(C` and
.\" \*(C' expand to `' in nroff, nothing in troff, for use with C<>
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr
.\" for titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and
.\" index entries marked with X<> in POD.  Of course, you'll have to process
.\" the output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it
.\" makes way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.bd B 3
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ======================================================================
.\"
.IX Title "PERLTODO 1"
.TH PERLTODO 1 "perl v5.6.1" "2001-03-19" "Perl Programmers Reference Guide"
.UC
.SH "NAME"
perltodo \- Perl \s-1TO-DO\s0 List
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is a list of wishes for Perl.  It is maintained by Nathan
Torkington for the Perl porters.  Send updates to
\&\fIperl5\-porters@perl.org\fR.  If you want to work on any of these
projects, be sure to check the perl5\-porters archives for past ideas,
flames, and propaganda.  This will save you time and also prevent you
from implementing something that Larry has already vetoed.  One set
of archives may be found at:
.PP
.Vb 1
\&    http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/
.Ve
.SH "Infrastructure"
.IX Header "Infrastructure"
.Sh "Mailing list archives"
.IX Subsection "Mailing list archives"
Chaim suggests contacting egroup and asking them to archive the other
perl.org mailing lists.  Probably not advocacy, but definitely
perl6\-porters, etc.
.Sh "Bug tracking system"
.IX Subsection "Bug tracking system"
Richard Foley \fIrichard@perl.org\fR is writing one.  We looked at
several, like gnats and the Debian system, but at the time we
investigated them, none met our needs.  Since then, Jitterbug has
matured, and may be worth reinvestigation.
.PP
The system we've developed is the recipient of perlbug mail, and any
followups it generates from perl5\-porters.  New bugs are entered
into a mysql database, and sent on to
perl5\-porters with the subject line rewritten to include a \*(L"ticket
number\*(R" (unique \s-1ID\s0 for the new bug).  If the incoming message already
had a ticket number in the subject line, then the message is logged
against that bug.  There is a separate email interface (not forwarding
to p5p) that permits porters to claim, categorize, and close tickets.
.PP
There is also a web interface to the system at http://bugs.perl.org.
.PP
The current delay in implementation is caused by perl.org lockups.
One suspect is the mail handling system, possibly going into loops.
.PP
We still desperately need a bugmaster, someone who will look at
every new \*(L"bug\*(R" and kill those that we already know about, those
that are not bugs at all, etc.
.Sh "Regression Tests"
.IX Subsection "Regression Tests"
The test suite for Perl serves two needs: ensuring features work, and
ensuring old bugs have not been reintroduced.  Both need work.
.PP
Brent LaVelle (lavelle@metronet.com) has stepped forward to work on
performance tests and improving the size of the test suite.
.Ip "Coverage" 4
.IX Item "Coverage"
Do the tests that come with Perl exercise every line (or every block,
or ...)  of the Perl interpreter, and if not then how can we make them
do so?
.Ip "Regression" 4
.IX Item "Regression"
No bug fixes should be made without a corresponding testsuite addition.
This needs a dedicated enforcer, as the current pumpking is either too
lazy or too stupid or both and lets enforcement wander all over the
map.  :\-)
.Ip "_\|_DIE_\|_" 4
.IX Item "__DIE__"
Tests that fail need to be of a form that can be readily mailed
to perlbug and diagnosed with minimal back-and-forth's to determine
which test failed, due to what cause, etc.
.Ip "suidperl" 4
.IX Item "suidperl"
We need regression/sanity tests for suidperl
.Ip "The 25% slowdown from perl4 to perl5" 4
.IX Item "The 25% slowdown from perl4 to perl5"
This value may or may not be accurate, but it certainly is
eye-catching.  For some things perl5 is faster than perl4, but often
the reliability and extensibility have come at a cost of speed.  The
benchmark suite that Gisle released earlier has been hailed as both a
fantastic solution and as a source of entirely meaningless figures.
Do we need to test \*(L"real applications\*(R"?  Can you do so?  Anyone have
machines to dedicate to the task?  Identify the things that have grown
slower, and see if there's a way to make them faster.
.SH "Configure"
.IX Header "Configure"
Andy Dougherty maintain(ed|s) a list of \*(L"todo\*(R" items for the configure
that comes with Perl.  See Porting/pumpkin.pod in the latest
source release.
.Sh "Install \s-1HTML\s0"
.IX Subsection "Install HTML"
Have \*(L"make install\*(R" give you the option to install \s-1HTML\s0 as well.  This
would be part of Configure.  Andy Wardley (certified Perl studmuffin)
will look into the current problems of \s-1HTML\s0 installation\*(--is
\&'installhtml' preventing this from happening cleanly, or is pod2html
the problem?  If the latter, Brad Appleton's pod work may fix the
problem for free.
.SH "Perl Language"
.IX Header "Perl Language"
.Sh "64\-bit Perl"
.IX Subsection "64-bit Perl"
Verify complete 64 bit support so that the value of sysseek, or \f(CW\*(C`\-s\*(C'\fR, or
\&\fIstat()\fR, or tell can fit into a perl number without losing precision.
Work with the perl-64bit mailing list on perl.org.
.Sh "Prototypes"
.IX Subsection "Prototypes"
.Ip "Named prototypes" 4
.IX Item "Named prototypes"
Add proper named prototypes that actually work usefully.
.Ip "Indirect objects" 4
.IX Item "Indirect objects"
Fix prototype bug that forgets indirect objects.
.Ip "Method calls" 4
.IX Item "Method calls"
Prototypes for method calls.
.Ip "Context" 4
.IX Item "Context"
Return context prototype declarations.
.Ip "Scoped subs" 4
.IX Item "Scoped subs"
lexically-scoped subs, e.g. my sub
.SH "Perl Internals"
.IX Header "Perl Internals"
.Sh "magic_setisa"
.IX Subsection "magic_setisa"
\&\f(CW\*(C`magic_setisa\*(C'\fR should be made to update \f(CW%FIELDS\fR [???]
.Sh "Garbage Collection"
.IX Subsection "Garbage Collection"
There was talk of a mark-and-sweep garbage collector at \s-1TPC2\s0, but the
(to users) unpredictable nature of its behaviour put some off.
Sarathy, I believe, did the work.  Here's what he has to say:
.PP
Yeah, I hope to implement it someday too.  The points that were
raised in \s-1TPC2\s0 were all to do with calling \fIDESTROY()\fR methods, but
I think we can accommodate that by extending \fIbless()\fR to stash
extra information for objects so we track their lifetime accurately
for those that want their \fIDESTROY()\fR to be predictable (this will be
a speed hit, naturally, and will therefore be optional, naturally. :)
.PP
[N.B. Don't even ask me about this now!  When I have the time to
write a cogent summary, I'll post it.]
.Sh "Reliable signals"
.IX Subsection "Reliable signals"
Sarathy and Dan Sugalski are working on this.  Chip posted a patch
earlier, but it was not accepted into 5.005.  The issue is tricky,
because it has the potential to greatly slow down the core.
.PP
There are at least three things to consider:
.Ip "Alternate \fIrunops()\fR for signal despatch" 4
.IX Item "Alternate runops() for signal despatch"
Sarathy and Dan are discussed this on perl5\-porters.
.Ip "Figure out how to \fIdie()\fR in delayed sighandler" 4
.IX Item "Figure out how to die() in delayed sighandler"
.PD 0
.Ip "Add tests for Thread::Signal" 4
.IX Item "Add tests for Thread::Signal"
.Ip "Automatic tests against \s-1CPAN\s0" 4
.IX Item "Automatic tests against CPAN"
.PD
Is there some way to automatically build all/most of \s-1CPAN\s0 with
the new Perl and check that the modules there pass all the tests?
.Sh "Interpolated regex performance bugs"
.IX Subsection "Interpolated regex performance bugs"
.Vb 7
\&  while (<>) {
\&    $found = 0;
\&    foreach $pat (@patterns) {
\&      $found++ if /$pat/o;
\&    }
\&    print if $found;
\&  }
.Ve
The qr// syntax added in 5.005 has solved this problem, but
it needs more thorough documentation.
.Sh "Memory leaks from failed eval/regcomp"
.IX Subsection "Memory leaks from failed eval/regcomp"
The only known memory leaks in Perl are in failed code or regexp
compilation.  Fix this.  Hugo Van Der Sanden will attempt this but
won't have tuits until January 1999.
.Sh "Make \s-1XS\s0 easier to use"
.IX Subsection "Make XS easier to use"
There was interest in \s-1SWIG\s0 from porters, but nothing has happened
lately.
.Sh "Make embedded Perl easier to use"
.IX Subsection "Make embedded Perl easier to use"
This is probably difficult for the same reasons that \*(L"\s-1XS\s0 For Dummies\*(R"
will be difficult.
.Sh "Namespace cleanup"
.IX Subsection "Namespace cleanup"
.Vb 4
\&    CPP-space:    restrict CPP symbols exported from headers
\&    header-space: move into CORE/perl/
\&    API-space:    begin list of things that constitute public api
\&    env-space:    Configure should use PERL_CONFIG instead of CONFIG etc.
.Ve
.Sh "\s-1MULTIPLICITY\s0"
.IX Subsection "MULTIPLICITY"
Complete work on safe recursive interpreters \f(CW\*(C`Perl\->new()\*(C'\fR.
Sarathy says that a reference implementation exists.
.Sh "MacPerl"
.IX Subsection "MacPerl"
Chris Nandor and Matthias Neeracher are working on better integrating
MacPerl into the Perl distribution.
.SH "Documentation"
.IX Header "Documentation"
There's a lot of documentation that comes with Perl.  The quantity of
documentation makes it difficult for users to know which section of
which manpage to read in order to solve their problem.  Tom
Christiansen has done much of the documentation work in the past.
.Sh "A clear division into tutorial and reference"
.IX Subsection "A clear division into tutorial and reference"
Some manpages (e.g., perltoot and perlreftut) clearly set out to
educate the reader about a subject.  Other manpages (e.g., perlsub)
are references for which there is no tutorial, or are references with
a slight tutorial bent.  If things are either tutorial or reference,
then the reader knows which manpage to read to learn about a subject,
and which manpage to read to learn all about an aspect of that
subject.  Part of the solution to this is:
.Sh "Remove the artificial distinction between operators and functions"
.IX Subsection "Remove the artificial distinction between operators and functions"
History shows us that users, and often porters, aren't clear on the
operator-function distinction.  The present split in reference
material between perlfunc and perlop hinders user navigation.  Given
that perlfunc is by far the larger of the two, move operator reference
into perlfunc.
.Sh "More tutorials"
.IX Subsection "More tutorials"
More documents of a tutorial nature could help.  Here are some
candidates:
.Ip "Regular expressions" 4
.IX Item "Regular expressions"
Robin Berjon (r.berjon@ltconsulting.net) has volunteered.
.Ip "I/O" 4
.IX Item "I/O"
Mark-Jason Dominus (mjd@plover.com) has an outline for perliotut.
.Ip "pack/unpack" 4
.IX Item "pack/unpack"
This is badly needed.  There has been some discussion on the
subject on perl5\-porters.
.Ip "Debugging" 4
.IX Item "Debugging"
Ronald Kimball (rjk@linguist.dartmouth.edu) has volunteered.
.Sh "Include a search tool"
.IX Subsection "Include a search tool"
perldoc should be able to 'grep' fulltext indices of installed \s-1POD\s0
files.  This would let people say:
.PP
.Vb 1
\&  perldoc -find printing numbers with commas
.Ve
and get back the perlfaq entry on 'commify'.
.PP
This solution, however, requires documentation to contain the keywords
the user is searching for.  Even when the users know what they're
looking for, often they can't spell it.
.Sh "Include a locate tool"
.IX Subsection "Include a locate tool"
perldoc should be able to help people find the manpages on a
particular high-level subject:
.PP
.Vb 1
\&  perldoc -find web
.Ve
would tell them manpages, web pages, and books with material on web
programming.  Similarly \f(CW\*(C`perldoc \-find databases\*(C'\fR, \f(CW\*(C`perldoc \-find
references\*(C'\fR and so on.
.PP
We need something in the vicinity of:
.PP
.Vb 4
\&  % perl -help random stuff
\&  No documentation for perl function `random stuff' found
\&  The following entry in perlfunc.pod matches /random/a:
\&    =item rand EXPR
.Ve
.Vb 1
\&    =item rand
.Ve
.Vb 4
\&    Returns a random fractional number greater than or equal to C<0> and less
\&    than the value of EXPR.  (EXPR should be positive.)  If EXPR is
\&    omitted, the value C<1> is used.  Automatically calls C<srand()> unless
\&    C<srand()> has already been called.  See also C<srand()>.
.Ve
.Vb 27
\&    (Note: If your rand function consistently returns numbers that are too
\&    large or too small, then your version of Perl was probably compiled
\&    with the wrong number of RANDBITS.)
\&  The following pod pages seem to have /stuff/a:
\&    perlfunc.pod        (7 hits)
\&    perlfaq7.pod        (6 hits)
\&    perlmod.pod         (4 hits)
\&    perlsyn.pod         (3 hits)
\&    perlfaq8.pod        (2 hits)
\&    perlipc.pod         (2 hits)
\&    perl5004delta.pod   (1 hit)
\&    perl5005delta.pod   (1 hit)
\&    perlcall.pod        (1 hit)
\&    perldelta.pod       (1 hit)
\&    perlfaq3.pod        (1 hit)
\&    perlfaq5.pod        (1 hit)
\&    perlhist.pod        (1 hit)
\&    perlref.pod         (1 hit)
\&    perltoc.pod         (1 hit)
\&    perltrap.pod        (1 hit)
\&  Proceed to open perlfunc.pod? [y] n
\&  Do you want to speak perl interactively? [y] n
\&  Should I dial 911? [y] n
\&  Do you need psychiatric help? [y] y
\&  <PELIZA> Hi, what bothers you today?
\&           A Python programmer in the next cubby is driving me nuts!
\&  <PELIZA> Hmm, thats fixable.  Just [rest censored]
.Ve
.Sh "Separate function manpages by default"
.IX Subsection "Separate function manpages by default"
Perl should install 'manpages' for every function/operator into the
3pl or 3p manual section.  By default.  The splitman program in the
Perl source distribution does the work of turning big perlfunc into
little 3p pages.
.Sh "Users can't find the manpages"
.IX Subsection "Users can't find the manpages"
Make \f(CW\*(C`perldoc\*(C'\fR tell users what they need to add to their .login or
\&.cshrc to set their \s-1MANPATH\s0 correctly.
.Sh "Install \s-1ALL\s0 Documentation"
.IX Subsection "Install ALL Documentation"
Make the standard documentation kit include the \s-1VMS\s0, \s-1OS/2\s0, Win32,
Threads, etc information.  installperl and pod/Makefile should know
enough to copy \s-1README\s0.foo to perlfoo.pod before building everything,
when appropriate.
.Sh "Outstanding issues to be documented"
.IX Subsection "Outstanding issues to be documented"
Tom has a list of 5.005_5* features or changes that require
documentation.
.PP
Create one document that coherently explains the delta between the
last camel release and the current release.  perldelta was supposed
to be that, but no longer.  The things in perldelta never seemed to
get placed in the right places in the real manpages, either.  This
needs work.
.Sh "Adapt www.linuxhq.com for Perl"
.IX Subsection "Adapt www.linuxhq.com for Perl"
This should help glorify documentation and get more people involved in
perl development.
.Sh "Replace man with a perl program"
.IX Subsection "Replace man with a perl program"
Can we reimplement man in Perl?  Tom has a start.  I believe some of
the Linux systems distribute a manalike.  Alternatively, build on
perldoc to remove the unfeatures like \*(L"is slow\*(R" and \*(L"has no apropos\*(R".
.Sh "Unicode tutorial"
.IX Subsection "Unicode tutorial"
We could use more work on helping people understand Perl's new
Unicode support that Larry has created.
.SH "Modules"
.IX Header "Modules"
.Sh "Update the \s-1POSIX\s0 extension to conform with the \s-1POSIX\s0 1003.1 Edition 2"
.IX Subsection "Update the POSIX extension to conform with the POSIX 1003.1 Edition 2"
The current state of the \s-1POSIX\s0 extension is as of Edition 1, 1991,
whereas the Edition 2 came out in 1996.  \s-1ISO/IEC\s0 \fI9945:1\-1996\fR\|(E),
\&\s-1ANSI/IEEE\s0 Std 1003.1, 1996 Edition. \s-1ISBN\s0 1\-55937\-573\-6.  The updates
were legion: threads, \s-1IPC\s0, and real time extensions.
.Sh "Module versions"
.IX Subsection "Module versions"
Automate the checking of versions in the standard distribution so
it's easy for a pumpking to check whether \s-1CPAN\s0 has a newer version
that we should be including?
.Sh "New modules"
.IX Subsection "New modules"
Which modules should be added to the standard distribution?  This ties
in with the \s-1SDK\s0 discussed on the perl-sdk list at perl.org.
.Sh "Profiler"
.IX Subsection "Profiler"
Make the profiler (Devel::DProf) part of the standard release, and
document it well.
.Sh "Tie Modules"
.IX Subsection "Tie Modules"
.Ip "VecArray" 4
.IX Item "VecArray"
Implement array using \fIvec()\fR.  Nathan Torkington has working code to
do this.
.Ip "SubstrArray" 4
.IX Item "SubstrArray"
Implement array using \fIsubstr()\fR
.Ip "VirtualArray" 4
.IX Item "VirtualArray"
Implement array using a file
.Ip "ShiftSplice" 4
.IX Item "ShiftSplice"
Defines shift et al in terms of splice method
.Sh "Procedural options"
.IX Subsection "Procedural options"
Support procedural interfaces for the common cases of Perl's
gratuitously \s-1OOO\s0 modules.  Tom objects to \*(L"use \s-1IO:\s0:File\*(R" reading many
thousands of lines of code.
.Sh "\s-1RPC\s0"
.IX Subsection "RPC"
Write a module for transparent, portable remote procedure calls.  (Not
core).  This touches on the \s-1CORBA\s0 and \s-1ILU\s0 work.
.Sh "y2k localtime/gmtime"
.IX Subsection "y2k localtime/gmtime"
Write a module, Y2k::Catch, which overloads localtime and gmtime's
returned year value and catches \*(L"bad\*(R" attempts to use it.
.Sh "Export File::Find variables"
.IX Subsection "Export File::Find variables"
Make File::Find export \f(CW\*(C`$name\*(C'\fR etc manually, at least if asked to.
.Sh "Ioctl"
.IX Subsection "Ioctl"
Finish a proper Ioctl module.
.Sh "Debugger attach/detach"
.IX Subsection "Debugger attach/detach"
Permit a user to debug an already-running program.
.Sh "Regular Expression debugger"
.IX Subsection "Regular Expression debugger"
Create a visual profiler/debugger tool that stepped you through the
execution of a regular expression point by point.  Ilya has a module
to color-code and display regular expression parses and executions.
There's something at http://tkworld.org/ that might be a good start,
it's a Tk/Tcl \s-1RE\s0 wizard, that builds regexen of many flavours.
.Sh "Alternative \s-1RE\s0 Syntax"
.IX Subsection "Alternative RE Syntax"
Make an alternative regular expression syntax that is accessed through
a module.  For instance,
.PP
.Vb 6
\&  use RE;
\&  $re = start_of_line()
\&      ->literal("1998/10/08")
\&      ->optional( whitespace() )
\&      ->literal("[")
\&      ->remember( many( or( "-", digit() ) ) );
.Ve
.Vb 3
\&  if (/$re/) {
\&    print "time is $1\en";
\&  }
.Ve
Newbies to regular expressions typically only use a subset of the full
language.  Perhaps you wouldn't have to implement the full feature set.
.Sh "Bundled modules"
.IX Subsection "Bundled modules"
Nicholas Clark (nick@flirble.org) had a patch for storing modules in
zipped format.  This needs exploring and concluding.
.Sh "Expect"
.IX Subsection "Expect"
Adopt \s-1IO:\s0:Tty, make it as portable as Don Libes' \*(L"expect\*(R" (can we link
against expect code?), and perfect a Perl version of expect.  \s-1IO:\s0:Tty
and expect could then be distributed as part of the core distribution,
replacing Comm.pl and other hacks.
.Sh "\s-1GUI:\s0:Native"
.IX Subsection "GUI::Native"
A simple-to-use interface to native graphical abilities would
be welcomed.  Oh, Perl's access Tk is nice enough, and reasonably
portable, but it's not particularly as fast as one would like.
Simple access to the mouse's cut buffer or mouse-presses shouldn't
required loading a few terabytes of Tk code.
.Sh "Update semibroken auxiliary tools; h2ph, a2p, etc."
.IX Subsection "Update semibroken auxiliary tools; h2ph, a2p, etc."
Kurt Starsinic is working on h2ph.  mjd has fixed bugs in a2p in the
past.  a2p apparently doesn't work on nawk and gawk extensions.
Graham Barr has an Include module that does h2ph work at runtime.
.Sh "pod2html"
.IX Subsection "pod2html"
A short-term fix: pod2html generates absolute \s-1HTML\s0 links.  Make it
generate relative links.
.Sh "Podchecker"
.IX Subsection "Podchecker"
Something like lint for Pod would be good.  Something that catches
common errors as well as gross ones.  Brad Appleton is putting
together something as part of his PodParser work.
.SH "Tom's Wishes"
.IX Header "Tom's Wishes"
.Sh "Webperl"
.IX Subsection "Webperl"
Design a webperl environment that's as tightly integrated and as
easy-to-use as Perl's current command-line environment.
.Sh "Mobile agents"
.IX Subsection "Mobile agents"
More work on a safe and secure execution environment for mobile
agents would be neat; the Safe.pm module is a start, but there's a
still a lot to be done in that area.  Adopt Penguin?
.Sh "\s-1POSIX\s0 on non-POSIX"
.IX Subsection "POSIX on non-POSIX"
Standard programming constructs for non-POSIX systems would help a
lot of programmers stuck on primitive, legacy systems.  For example,
Microsoft still hasn't made a usable \s-1POSIX\s0 interface on their clunky
systems, which means that standard operations such as \fIalarm()\fR and
\&\fIfork()\fR, both critical for sophisticated client-server programming,
must both be kludged around.
.PP
I'm unsure whether Tom means to emulate \fIalarm\fR\|( )and \fIfork()\fR, or merely
to provide a document like perlport.pod to say which features are
portable and which are not.
.Sh "Portable installations"
.IX Subsection "Portable installations"
Figure out a portable semi-gelled installation, that is, one without
full paths.  Larry has said that he's thinking about this.  Ilya
pointed out that \fIperllib_mangle()\fR is good for this.
.SH "Win32 Stuff"
.IX Header "Win32 Stuff"
.Sh "Rename new headers to be consistent with the rest"
.IX Subsection "Rename new headers to be consistent with the rest"
.Sh "Sort out the \fIspawnvp()\fP mess"
.IX Subsection "Sort out the spawnvp() mess"
.Sh "Work out \s-1DLL\s0 versioning"
.IX Subsection "Work out DLL versioning"
.Sh "Style-check"
.IX Subsection "Style-check"
.SH "Would be nice to have"
.IX Header "Would be nice to have"
.if n .Ip "\f(CW""""pack """"(stuff)*""""""""\fR" 4
.el .Ip "\f(CWpack ``(stuff)*''\fR" 4
.IX Item "pack ""(stuff)*""
.PD 0
.Ip "Contiguous bitfields in pack/unpack" 4
.IX Item "Contiguous bitfields in pack/unpack"
.Ip "lexperl" 4
.IX Item "lexperl"
.Ip "Bundled perl preprocessor" 4
.IX Item "Bundled perl preprocessor"
.Ip "Use posix calls internally where possible" 4
.IX Item "Use posix calls internally where possible"
.Ip "format \s-1BOTTOM\s0" 4
.IX Item "format BOTTOM"
.Ip "\-i rename file only when successfully changed" 4
.IX Item "-i rename file only when successfully changed"
.Ip "All \s-1ARGV\s0 input should act like <>" 4
.IX Item "All ARGV input should act like <>"
.Ip "report \s-1HANDLE\s0 [formats]." 4
.IX Item "report HANDLE [formats]."
.Ip "support in perlmain to rerun debugger" 4
.IX Item "support in perlmain to rerun debugger"
.Ip "lvalue functions" 4
.IX Item "lvalue functions"
.PD
Tuomas Lukka, on behalf of the \s-1PDL\s0 project, greatly desires this and
Ilya has a patch for it (probably against an older version of Perl).
Tuomas points out that what \s-1PDL\s0 really wants is lvalue \fImethods\fR,
not just subs.
.SH "Possible pragmas"
.IX Header "Possible pragmas"
.Sh "'less'"
.IX Subsection "'less'"
(use less memory, \s-1CPU\s0)
.SH "Optimizations"
.IX Header "Optimizations"
.Sh "constant function cache"
.IX Subsection "constant function cache"
.Sh "foreach(reverse...)"
.IX Subsection "foreach(reverse...)"
.Sh "Cache eval tree"
.IX Subsection "Cache eval tree"
Unless lexical outer scope used (mark in &compiling?).
.Sh "rcatmaybe"
.IX Subsection "rcatmaybe"
.Sh "Shrink opcode tables"
.IX Subsection "Shrink opcode tables"
Via multiple implementations selected in peep.
.Sh "Cache hash value"
.IX Subsection "Cache hash value"
Not a win, according to Guido.
.Sh "Optimize away \f(CW@_\fP where possible"
.IX Subsection "Optimize away @_ where possible"
.Sh "Optimize sort by { \f(CW$a\fP <=> \f(CW$b\fP }"
.IX Subsection "Optimize sort by { $a <=> $b }"
Greg Bacon added several more sort optimizations.  These have
made it into 5.005_55, thanks to Hans Mulder.
.Sh "Rewrite regexp parser for better integrated optimization"
.IX Subsection "Rewrite regexp parser for better integrated optimization"
The regexp parser was rewritten for 5.005.  Ilya's the regexp guru.
.SH "Vague possibilities"
.IX Header "Vague possibilities"
.Ip "ref function in list context" 4
.IX Item "ref function in list context"
This seems impossible to do without substantially breaking code.
.Ip "make tr/// return histogram in list context?" 4
.IX Item "make tr/// return histogram in list context?"
.PD 0
.Ip "Loop control on do{} et al" 4
.IX Item "Loop control on do{} et al"
.Ip "Explicit switch statements" 4
.IX Item "Explicit switch statements"
.PD
Nobody has yet managed to come up with a switch syntax that would
allow for mixed hash, constant, regexp checks.  Submit implementation
with syntax, please.
.Ip "compile to real threaded code" 4
.IX Item "compile to real threaded code"
.PD 0
.Ip "structured types" 4
.IX Item "structured types"
.Ip "Modifiable \f(CW$1\fR et al" 4
.IX Item "Modifiable $1 et al"
.PD
The intent is for this to be a means of editing the matched portions of
the target string.
.SH "To Do Or Not To Do"
.IX Header "To Do Or Not To Do"
These are things that have been discussed in the past and roundly
criticized for being of questionable value.
.if n .Sh "Making \fImy()\fP work on ""package"" variables"
.el .Sh "Making \fImy()\fP work on ``package'' variables"
.IX Subsection "Making my() work on "package variables"
Being able to say my($Foo::Bar), something that sounds ludicrous and
the 5.6 pumpking has mocked.
.if n .Sh """or"" testing defined not truth"
.el .Sh "``or'' testing defined not truth"
.IX Subsection ""or testing defined not truth"
We tell people that \f(CW\*(C`||\*(C'\fR can be used to give a default value to a
variable:
.PP
.Vb 1
\&    $children = shift || 5;             # default is 5 children
.Ve
which is almost (but not):
.PP
.Vb 2
\&    $children = shift;
\&    $children = 5 unless $children;
.Ve
but if the first argument was given and is \*(L"0\*(R", then it will be
considered false by \f(CW\*(C`||\*(C'\fR and \f(CW\*(C`5\*(C'\fR used instead.  Really we want
an \f(CW\*(C`||\*(C'\fR\-like operator that behaves like:
.PP
.Vb 2
\&    $children = shift;
\&    $children = 5 unless defined $children;
.Ve
Namely, a \f(CW\*(C`||\*(C'\fR that tests defined-ness rather than truth.  One was
discussed, and a patch submitted, but the objections were many.  While
there were objections, many still feel the need.  At least it was
decided that \f(CW\*(C`??\*(C'\fR is the best name for the operator.
.if n .Sh """dynamic"" lexicals"
.el .Sh "``dynamic'' lexicals"
.IX Subsection ""dynamic lexicals"
.Vb 4
\&  my $x;
\&  sub foo {
\&    local $x;
\&  }
.Ve
Localizing, as Tim Bunce points out, is a separate concept from
whether the variable is global or lexical.  Chip Salzenberg had
an implementation once, but Larry thought it had potential to
confuse.
.if n .Sh """class""\-based, rather than package-based ""lexicals"""
.el .Sh "``class''\-based, rather than package-based ``lexicals''"
.IX Subsection ""class-based, rather than package-based lexicals"
This is like what the Alias module provides, but the variables would
be lexicals reserved by perl at compile-time, which really are indices
pointing into the pseudo-hash object visible inside every method so
declared.
.SH "Threading"
.IX Header "Threading"
.Sh "Modules"
.IX Subsection "Modules"
Which of the standard modules are thread-safe?  Which \s-1CPAN\s0 modules?
How easy is it to fix those non-safe modules?
.Sh "Testing"
.IX Subsection "Testing"
Threading is still experimental.  Every reproducible bug identifies
something else for us to fix.  Find and submit more of these problems.
.Sh "$AUTOLOAD"
.IX Subsection "$AUTOLOAD"
.Sh "exit/die"
.IX Subsection "exit/die"
Consistent semantics for exit/die in threads.
.Sh "External threads"
.IX Subsection "External threads"
Better support for externally created threads.
.Sh "Thread::Pool"
.IX Subsection "Thread::Pool"
.Sh "thread-safety"
.IX Subsection "thread-safety"
Spot-check globals like statcache and global GVs for thread-safety.
"\fBPart done\fR", says Sarathy.
.Sh "Per-thread GVs"
.IX Subsection "Per-thread GVs"
According to Sarathy, this would make \f(CW@_\fR be the same in threaded
and non-threaded, as well as helping solve problems like filehandles
(the same filehandle currently cannot be used in two threads).
.SH "Compiler"
.IX Header "Compiler"
.Sh "Optimization"
.IX Subsection "Optimization"
The compiler's back-end code-generators for creating bytecode or
compilable C code could use optimization work.
.Sh "Byteperl"
.IX Subsection "Byteperl"
Figure out how and where byteperl will be built for the various
platforms.
.Sh "Precompiled modules"
.IX Subsection "Precompiled modules"
Save byte-compiled modules on disk.
.Sh "Executables"
.IX Subsection "Executables"
Auto-produce executable.
.Sh "Typed lexicals"
.IX Subsection "Typed lexicals"
Typed lexicals should affect B::CC::load_pad.
.Sh "Win32"
.IX Subsection "Win32"
Workarounds to help Win32 dynamic loading.
.Sh "\s-1END\s0 blocks"
.IX Subsection "END blocks"
\&\s-1END\s0 blocks need saving in compiled output, now that \s-1CHECK\s0 blocks
are available.
.Sh "_AUTOLOAD"
.IX Subsection "_AUTOLOAD"
_AUTOLOAD prodding.
.Sh "comppadlist"
.IX Subsection "comppadlist"
Fix comppadlist (names in comppad_name can have fake SvCUR
from where newASSIGNOP steals the field).
.Sh "Cached compilation"
.IX Subsection "Cached compilation"
Can we install modules as bytecode?
.SH "Recently Finished Tasks"
.IX Header "Recently Finished Tasks"
.Sh "Figure a way out of $^(capital letter)"
.IX Subsection "Figure a way out of $^(capital letter)"
Figure out a clean way to extend $^(capital letter) beyond
the 26 alphabets.  (${^WORD} maybe?)
.PP
Mark-Jason Dominus sent a patch which went into 5.005_56.
.Sh "Filenames"
.IX Subsection "Filenames"
Keep filenames in the distribution and in the standard module set
be 8.3 friendly where feasible.  Good luck changing the standard
modules, though.
.Sh "Foreign lines"
.IX Subsection "Foreign lines"
Perl should be more generous in accepting foreign line terminations.
Mostly \fBdone\fR in 5.005.
.Sh "Namespace cleanup"
.IX Subsection "Namespace cleanup"
.Vb 2
\&    symbol-space: "pl_" prefix for all global vars
\&                  "Perl_" prefix for all functions
.Ve
.Vb 1
\&    CPP-space:    stop malloc()/free() pollution unless asked
.Ve
.Sh "\s-1ISA\s0.pm"
.IX Subsection "ISA.pm"
Rename and alter \s-1ISA\s0.pm.  \fBDone\fR.  It is now base.pm.
.Sh "gettimeofday"
.IX Subsection "gettimeofday"
See Time::HiRes.
.Sh "autocroak?"
.IX Subsection "autocroak?"
This is the Fatal.pm module, so any builtin that does
not return success automatically \fIdie()\fRs.  If you're feeling brave, tie
this in with the unified exceptions scheme.
