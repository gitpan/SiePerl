.\" Automatically generated by Pod::Man version 1.15
.\" Fri Apr 20 13:06:04 2001
.\"
.\" Standard preamble:
.\" ======================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R

.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used
.\" to do unbreakable dashes and therefore won't be available.  \*(C` and
.\" \*(C' expand to `' in nroff, nothing in troff, for use with C<>
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr
.\" for titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and
.\" index entries marked with X<> in POD.  Of course, you'll have to process
.\" the output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it
.\" makes way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.bd B 3
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ======================================================================
.\"
.IX Title "PERLWIN32 1"
.TH PERLWIN32 1 "perl v5.6.1" "2001-03-03" "Perl Programmers Reference Guide"
.UC
.SH "NAME"
perlwin32 \- Perl under Win32
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
These are instructions for building Perl under Windows (9x, \s-1NT\s0 and
2000).
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Before you start, you should glance through the \s-1README\s0 file
found in the top-level directory to which the Perl distribution
was extracted.  Make sure you read and understand the terms under
which this software is being distributed.
.PP
Also make sure you read the BUGS AND CAVEATS entry elsewhere in this document below for the
known limitations of this port.
.PP
The \s-1INSTALL\s0 file in the perl top-level has much information that is
only relevant to people building Perl on Unix-like systems.  In
particular, you can safely ignore any information that talks about
\&\*(L"Configure\*(R".
.PP
You may also want to look at two other options for building
a perl that will work on Windows \s-1NT:\s0  the \s-1README\s0.cygwin and
\&\s-1README\s0.os2 files, each of which give a different set of rules to
build a Perl that will work on Win32 platforms.  Those two methods
will probably enable you to build a more Unix-compatible perl, but
you will also need to download and use various other build-time and
run-time support software described in those files.
.PP
This set of instructions is meant to describe a so-called \*(L"native\*(R"
port of Perl to Win32 platforms.  The resulting Perl requires no
additional software to run (other than what came with your operating
system).  Currently, this port is capable of using one of the
following compilers:
.PP
.Vb 3
\&      Borland C++               version 5.02 or later
\&      Microsoft Visual C++      version 4.2 or later
\&      Mingw32 with GCC          version 2.95.2 or better
.Ve
The last of these is a high quality freeware compiler.  Support
for it is still experimental.  (Older versions of \s-1GCC\s0 are known
not to work.)
.PP
This port currently supports MakeMaker (the set of modules that
is used to build extensions to perl).  Therefore, you should be
able to build and install most extensions found in the \s-1CPAN\s0 sites.
See the Usage Hints entry elsewhere in this document below for general hints about this.
.Sh "Setting Up"
.IX Subsection "Setting Up"
.Ip "Make" 4
.IX Item "Make"
You need a \*(L"make\*(R" program to build the sources.  If you are using
Visual \*(C+ under Windows \s-1NT\s0 or 2000, nmake will work.  All other
builds need dmake.
.Sp
dmake is a freely available make that has very nice macro features
and parallelability.
.Sp
A port of dmake for Windows is available from:
.Sp
.Vb 1
\&    http://www.cpan.org/authors/id/GSAR/dmake-4.1pl1-win32.zip
.Ve
(This is a fixed version of the original dmake sources obtained from
http://www.wticorp.com/dmake/.  As of version 4.1PL1, the original
sources did not build as shipped and had various other problems.
A patch is included in the above fixed version.)
.Sp
Fetch and install dmake somewhere on your path (follow the instructions
in the \s-1README\s0.NOW file).
.Sp
There exists a minor coexistence problem with dmake and Borland \*(C+
compilers.  Namely, if a distribution has C files named with mixed
case letters, they will be compiled into appropriate .obj-files named
with all lowercase letters, and every time dmake is invoked
to bring files up to date, it will try to recompile such files again.
For example, Tk distribution has a lot of such files, resulting in
needless recompiles everytime dmake is invoked.  To avoid this, you
may use the script \*(L"sncfnmcs.pl\*(R" after a successful build.  It is
available in the win32 subdirectory of the Perl source distribution.
.Ip "Command Shell" 4
.IX Item "Command Shell"
Use the default \*(L"cmd\*(R" shell that comes with \s-1NT\s0.  Some versions of the
popular 4DOS/NT shell have incompatibilities that may cause you trouble.
If the build fails under that shell, try building again with the cmd
shell.
.Sp
The nmake Makefile also has known incompatibilities with the
\&\*(L"command.com\*(R" shell that comes with Windows 9x.  You will need to
use dmake and makefile.mk to build under Windows 9x.
.Sp
The surest way to build it is on Windows \s-1NT\s0, using the cmd shell.
.Sp
Make sure the path to the build directory does not contain spaces.  The
build usually works in this circumstance, but some tests will fail.
.Ip "Borland \*(C+" 4
.IX Item "Borland "
If you are using the Borland compiler, you will need dmake.
(The make that Borland supplies is seriously crippled and will not
work for MakeMaker builds.)
.Sp
See the Make entry elsewhere in this document above.
.Ip "Microsoft Visual \*(C+" 4
.IX Item "Microsoft Visual "
The nmake that comes with Visual \*(C+ will suffice for building.
You will need to run the \s-1VCVARS32\s0.BAT file, usually found somewhere
like C:\eMSDEV4.2\eBIN.  This will set your build environment.
.Sp
You can also use dmake to build using Visual \*(C+; provided, however,
you set \s-1OSRELEASE\s0 to \*(L"microsft\*(R" (or whatever the directory name
under which the Visual C dmake configuration lives) in your environment
and edit win32/config.vc to change \*(L"make=nmake\*(R" into \*(L"make=dmake\*(R".  The
latter step is only essential if you want to use dmake as your default
make for building extensions using MakeMaker.
.Ip "Mingw32 with \s-1GCC\s0" 4
.IX Item "Mingw32 with GCC"
\&\s-1GCC-2\s0.95.2 binaries can be downloaded from:
.Sp
.Vb 1
\&    ftp://ftp.xraylith.wisc.edu/pub/khan/gnu-win32/mingw32/
.Ve
You also need dmake.  See the Make entry elsewhere in this document above on how to get it.
.Sp
The \s-1GCC-2\s0.95.2 bundle comes with Mingw32 libraries and headers.
.Sp
Make sure you install the binaries that work with \s-1MSVCRT\s0.DLL as indicated
in the \s-1README\s0 for the \s-1GCC\s0 bundle.  You may need to set up a few environment
variables (usually ran from a batch file).
.Sp
There are a couple of problems with the version of gcc-2.95.2\-msvcrt.exe
released 7 November 1999:
.RS 4
.Ip "\(bu" 4
It left out a fix for certain command line quotes.  To fix this, be sure
to download and install the file fixes/quote-fix-msvcrt.exe from the above
ftp location.
.Ip "\(bu" 4
The definition of the fpos_t type in stdio.h may be wrong.  If your
stdio.h has this problem, you will see an exception when running the
test t/lib/io_xs.t.  To fix this, change the typedef for fpos_t from
\&\*(L"long\*(R" to \*(L"long long\*(R" in the file i386\-mingw32msvc/include/stdio.h,
and rebuild.
.RE
.RS 4
.Sp
A potentially simpler to install (but probably soon-to-be-outdated) bundle
of the above package with the mentioned fixes already applied is available
here:
.Sp
.Vb 2
\&    http://downloads.ActiveState.com/pub/staff/gsar/gcc-2.95.2-msvcrt.zip
\&    ftp://ftp.ActiveState.com/pub/staff/gsar/gcc-2.95.2-msvcrt.zip
.Ve
.RE
.Sh "Building"
.IX Subsection "Building"
.Ip "\(bu" 4
Make sure you are in the \*(L"win32\*(R" subdirectory under the perl toplevel.
This directory contains a \*(L"Makefile\*(R" that will work with
versions of nmake that come with Visual \*(C+, and a dmake \*(L"makefile.mk\*(R"
that will work for all supported compilers.  The defaults in the dmake
makefile are setup to build using the \s-1GCC\s0 compiler.
.Ip "\(bu" 4
Edit the makefile.mk (or Makefile, if you're using nmake) and change 
the values of \s-1INST_DRV\s0 and \s-1INST_TOP\s0.   You can also enable various
build flags.  These are explained in the makefiles.
.Sp
You will have to make sure that \s-1CCTYPE\s0 is set correctly and that 
\&\s-1CCHOME\s0 points to wherever you installed your compiler.
.Sp
The default value for \s-1CCHOME\s0 in the makefiles for Visual \*(C+
may not be correct for some versions.  Make sure the default exists
and is valid.
.Sp
If you have either the source or a library that contains \fIdes_fcrypt()\fR,
enable the appropriate option in the makefile.  \fIdes_fcrypt()\fR is not
bundled with the distribution due to \s-1US\s0 Government restrictions
on the export of cryptographic software.  Nevertheless, this routine
is part of the \*(L"libdes\*(R" library (written by Eric Young) which is widely
available worldwide, usually along with SSLeay (for example, 
\&\*(L"ftp://fractal.mta.ca/pub/crypto/SSLeay/DES/\*(R").  Set \s-1CRYPT_SRC\s0 to the
name of the file that implements \fIdes_fcrypt()\fR.  Alternatively, if
you have built a library that contains \fIdes_fcrypt()\fR, you can set
\&\s-1CRYPT_LIB\s0 to point to the library name.  The location above contains
many versions of the \*(L"libdes\*(R" library, all with slightly different
implementations of \fIdes_fcrypt()\fR.  Older versions have a single,
self-contained file (fcrypt.c) that implements \fIcrypt()\fR, so they may be
easier to use.  A patch against the fcrypt.c found in libdes-3.06 is
in des_fcrypt.patch.
.Sp
Perl will also build without \fIdes_fcrypt()\fR, but the \fIcrypt()\fR builtin will
fail at run time.
.Sp
Be sure to read the instructions near the top of the makefiles carefully.
.Ip "\(bu" 4
Type \*(L"dmake\*(R" (or \*(L"nmake\*(R" if you are using that make).
.Sp
This should build everything.  Specifically, it will create perl.exe,
perl56.dll at the perl toplevel, and various other extension dll's
under the lib\eauto directory.  If the build fails for any reason, make
sure you have done the previous steps correctly.
.Sh "Testing"
.IX Subsection "Testing"
Type \*(L"dmake test\*(R" (or \*(L"nmake test\*(R").  This will run most of the tests from
the testsuite (many tests will be skipped).
.PP
There should be no test failures when running under Windows \s-1NT\s0 4.0 or
Windows 2000.  Many tests \fIwill\fR fail under Windows 9x due to the inferior
command shell.
.PP
Some test failures may occur if you use a command shell other than the
native \*(L"cmd.exe\*(R", or if you are building from a path that contains
spaces.  So don't do that.
.PP
If you are running the tests from a emacs shell window, you may see
failures in op/stat.t.  Run \*(L"dmake test-notty\*(R" in that case.
.PP
If you're using the Borland compiler, you may see a failure in op/taint.t
arising from the inability to find the Borland Runtime DLLs on the system
default path.  You will need to copy the DLLs reported by the messages
from where Borland chose to install it, into the Windows system directory
(usually somewhere like C:\eWINNT\eSYSTEM32) and rerun the test.
.PP
If you're using Borland compiler versions 5.2 and below, you may run into
problems finding the correct header files when building extensions.  For
example, building the \*(L"Tk\*(R" extension may fail because both perl and Tk
contain a header file called \*(L"patchlevel.h\*(R".  The latest Borland compiler
(v5.5) is free of this misbehaviour, and it even supports an
option \-VI- for backward (bugward) compatibility for using the old Borland
search algorithm  to locate header files.
.PP
Please report any other failures as described under the BUGS AND CAVEATS entry elsewhere in this document.
.Sh "Installation"
.IX Subsection "Installation"
Type \*(L"dmake install\*(R" (or \*(L"nmake install\*(R").  This will put the newly
built perl and the libraries under whatever \f(CW\*(C`INST_TOP\*(C'\fR points to in the
Makefile.  It will also install the pod documentation under
\&\f(CW\*(C`$INST_TOP\e$VERSION\elib\epod\*(C'\fR and \s-1HTML\s0 versions of the same under
\&\f(CW\*(C`$INST_TOP\e$VERSION\elib\epod\ehtml\*(C'\fR.  To use the Perl you just installed,
you will need to add two components to your \s-1PATH\s0 environment variable,
\&\f(CW\*(C`$INST_TOP\e$VERSION\ebin\*(C'\fR and \f(CW\*(C`$INST_TOP\e$VERSION\ebin\e$ARCHNAME\*(C'\fR.
For example:
.PP
.Vb 1
\&    set PATH c:\eperl\e5.6.0\ebin;c:\eperl\e5.6.0\ebin\eMSWin32-x86;%PATH%
.Ve
If you opt to comment out \s-1INST_VER\s0 and \s-1INST_ARCH\s0 in the makefiles, the
installation structure is much simpler.  In that case, it will be
sufficient to add a single entry to the path, for instance:
.PP
.Vb 1
\&    set PATH c:\eperl\ebin;%PATH%
.Ve
.Sh "Usage Hints"
.IX Subsection "Usage Hints"
.Ip "Environment Variables" 4
.IX Item "Environment Variables"
The installation paths that you set during the build get compiled
into perl, so you don't have to do anything additional to start
using that perl (except add its location to your \s-1PATH\s0 variable).
.Sp
If you put extensions in unusual places, you can set \s-1PERL5LIB\s0
to a list of paths separated by semicolons where you want perl
to look for libraries.  Look for descriptions of other environment
variables you can set in the perlrun manpage.
.Sp
You can also control the shell that perl uses to run \fIsystem()\fR and
backtick commands via \s-1PERL5SHELL\s0.  See the perlrun manpage.
.Sp
Perl does not depend on the registry, but it can look up certain default
values if you choose to put them there.  Perl attempts to read entries from
\&\f(CW\*(C`HKEY_CURRENT_USER\eSoftware\ePerl\*(C'\fR and \f(CW\*(C`HKEY_LOCAL_MACHINE\eSoftware\ePerl\*(C'\fR.
Entries in the former override entries in the latter.  One or more of the
following entries (of type \s-1REG_SZ\s0 or \s-1REG_EXPAND_SZ\s0) may be set:
.Sp
.Vb 7
\&    lib-$]              version-specific standard library path to add to @INC
\&    lib                 standard library path to add to @INC
\&    sitelib-$]          version-specific site library path to add to @INC
\&    sitelib             site library path to add to @INC
\&    vendorlib-$]        version-specific vendor library path to add to @INC
\&    vendorlib           vendor library path to add to @INC
\&    PERL*               fallback for all %ENV lookups that begin with "PERL"
.Ve
Note the \f(CW\*(C`$]\*(C'\fR in the above is not literal.  Substitute whatever version
of perl you want to honor that entry, e.g. \f(CW\*(C`5.6.0\*(C'\fR.  Paths must be
separated with semicolons, as usual on win32.
.Ip "File Globbing" 4
.IX Item "File Globbing"
By default, perl handles file globbing using the File::Glob extension,
which provides portable globbing.
.Sp
If you want perl to use globbing that emulates the quirks of \s-1DOS\s0
filename conventions, you might want to consider using File::DosGlob
to override the internal \fIglob()\fR implementation.  See the File::DosGlob manpage for
details.
.Ip "Using perl from the command line" 4
.IX Item "Using perl from the command line"
If you are accustomed to using perl from various command-line
shells found in \s-1UNIX\s0 environments, you will be less than pleased
with what Windows offers by way of a command shell.
.Sp
The crucial thing to understand about the Windows environment is that
the command line you type in is processed twice before Perl sees it.
First, your command shell (usually \s-1CMD\s0.EXE on Windows \s-1NT\s0, and
\&\s-1COMMAND\s0.COM on Windows 9x) preprocesses the command line, to handle
redirection, environment variable expansion, and location of the
executable to run. Then, the perl executable splits the remaining
command line into individual arguments, using the C runtime library
upon which Perl was built.
.Sp
It is particularly important to note that neither the shell nor the C
runtime do any wildcard expansions of command-line arguments (so
wildcards need not be quoted).  Also, the quoting behaviours of the
shell and the C runtime are rudimentary at best (and may, if you are
using a non-standard shell, be inconsistent).  The only (useful) quote
character is the double quote (").  It can be used to protect spaces
and other special characters in arguments.
.Sp
The Windows \s-1NT\s0 documentation has almost no description of how the
quoting rules are implemented, but here are some general observations
based on experiments: The C runtime breaks arguments at spaces and
passes them to programs in argc/argv.  Double quotes can be used to
prevent arguments with spaces in them from being split up.  You can
put a double quote in an argument by escaping it with a backslash and
enclosing the whole argument within double quotes.  The backslash and
the pair of double quotes surrounding the argument will be stripped by
the C runtime.
.Sp
The file redirection characters \*(L"<\*(R", \*(L">\*(R", and \*(L"|\*(R" can be quoted by
double quotes (although there are suggestions that this may not always
be true).  Single quotes are not treated as quotes by the shell or
the C runtime, they don't get stripped by the shell (just to make
this type of quoting completely useless).  The caret \*(L"^\*(R" has also
been observed to behave as a quoting character, but this appears
to be a shell feature, and the caret is not stripped from the command
line, so Perl still sees it (and the C runtime phase does not treat
the caret as a quote character).
.Sp
Here are some examples of usage of the \*(L"cmd\*(R" shell:
.Sp
This prints two doublequotes:
.Sp
.Vb 1
\&    perl -e "print '\e"\e"' "
.Ve
This does the same:
.Sp
.Vb 1
\&    perl -e "print \e"\e\e\e"\e\e\e"\e" "
.Ve
This prints \*(L"bar\*(R" and writes \*(L"foo\*(R" to the file \*(L"blurch\*(R":
.Sp
.Vb 1
\&    perl -e "print 'foo'; print STDERR 'bar'" > blurch
.Ve
This prints \*(L"foo\*(R" (\*(L"bar\*(R" disappears into nowhereland):
.Sp
.Vb 1
\&    perl -e "print 'foo'; print STDERR 'bar'" 2> nul
.Ve
This prints \*(L"bar\*(R" and writes \*(L"foo\*(R" into the file \*(L"blurch\*(R":
.Sp
.Vb 1
\&    perl -e "print 'foo'; print STDERR 'bar'" 1> blurch
.Ve
This pipes \*(L"foo\*(R" to the \*(L"less\*(R" pager and prints \*(L"bar\*(R" on the console:
.Sp
.Vb 1
\&    perl -e "print 'foo'; print STDERR 'bar'" | less
.Ve
This pipes \*(L"foo\enbar\en\*(R" to the less pager:
.Sp
.Vb 1
\&    perl -le "print 'foo'; print STDERR 'bar'" 2>&1 | less
.Ve
This pipes \*(L"foo\*(R" to the pager and writes \*(L"bar\*(R" in the file \*(L"blurch\*(R":
.Sp
.Vb 1
\&    perl -e "print 'foo'; print STDERR 'bar'" 2> blurch | less
.Ve
Discovering the usefulness of the \*(L"command.com\*(R" shell on Windows 9x
is left as an exercise to the reader :)
.Sp
One particularly pernicious problem with the 4NT command shell for
Windows \s-1NT\s0 is that it (nearly) always treats a % character as indicating
that environment variable expansion is needed.  Under this shell, it is
therefore important to always double any % characters which you want
Perl to see (for example, for hash variables), even when they are
quoted.
.Ip "Building Extensions" 4
.IX Item "Building Extensions"
The Comprehensive Perl Archive Network (\s-1CPAN\s0) offers a wealth
of extensions, some of which require a C compiler to build.
Look in http://www.cpan.org/ for more information on \s-1CPAN\s0.
.Sp
Note that not all of the extensions available from \s-1CPAN\s0 may work
in the Win32 environment; you should check the information at
http://testers.cpan.org/ before investing too much effort into
porting modules that don't readily build.
.Sp
Most extensions (whether they require a C compiler or not) can
be built, tested and installed with the standard mantra:
.Sp
.Vb 4
\&    perl Makefile.PL
\&    $MAKE
\&    $MAKE test
\&    $MAKE install
.Ve
where \f(CW$MAKE\fR is whatever 'make' program you have configured perl to
use.  Use \*(L"perl \-V:make\*(R" to find out what this is.  Some extensions
may not provide a testsuite (so \*(L"$MAKE test\*(R" may not do anything or
fail), but most serious ones do.
.Sp
It is important that you use a supported 'make' program, and
ensure Config.pm knows about it.  If you don't have nmake, you can
either get dmake from the location mentioned earlier or get an
old version of nmake reportedly available from:
.Sp
.Vb 1
\&    ftp://ftp.microsoft.com/Softlib/MSLFILES/nmake15.exe
.Ve
Another option is to use the make written in Perl, available from
\&\s-1CPAN:\s0
.Sp
.Vb 1
\&    http://www.cpan.org/authors/id/NI-S/Make-0.03.tar.gz
.Ve
You may also use dmake.  See the Make entry elsewhere in this document above on how to get it.
.Sp
Note that MakeMaker actually emits makefiles with different syntax
depending on what 'make' it thinks you are using.  Therefore, it is
important that one of the following values appears in Config.pm:
.Sp
.Vb 4
\&    make='nmake'        # MakeMaker emits nmake syntax
\&    make='dmake'        # MakeMaker emits dmake syntax
\&    any other value     # MakeMaker emits generic make syntax
\&                            (e.g GNU make, or Perl make)
.Ve
If the value doesn't match the 'make' program you want to use,
edit Config.pm to fix it.
.Sp
If a module implements XSUBs, you will need one of the supported
C compilers.  You must make sure you have set up the environment for
the compiler for command-line compilation.
.Sp
If a module does not build for some reason, look carefully for
why it failed, and report problems to the module author.  If
it looks like the extension building support is at fault, report
that with full details of how the build failed using the perlbug
utility.
.Ip "Command-line Wildcard Expansion" 4
.IX Item "Command-line Wildcard Expansion"
The default command shells on \s-1DOS\s0 descendant operating systems (such
as they are) usually do not expand wildcard arguments supplied to
programs.  They consider it the application's job to handle that.
This is commonly achieved by linking the application (in our case,
perl) with startup code that the C runtime libraries usually provide.
However, doing that results in incompatible perl versions (since the
behavior of the argv expansion code differs depending on the
compiler, and it is even buggy on some compilers).  Besides, it may
be a source of frustration if you use such a perl binary with an
alternate shell that *does* expand wildcards.
.Sp
Instead, the following solution works rather well. The nice things
about it are 1) you can start using it right away; 2) it is more 
powerful, because it will do the right thing with a pattern like
*/*/*.c; 3) you can decide whether you do/don't want to use it; and
4) you can extend the method to add any customizations (or even 
entirely different kinds of wildcard expansion).
.Sp
.Vb 20
\&        C:\e> copy con c:\eperl\elib\eWild.pm
\&        # Wild.pm - emulate shell @ARGV expansion on shells that don't
\&        use File::DosGlob;
\&        @ARGV = map {
\&                      my @g = File::DosGlob::glob($_) if /[*?]/;
\&                      @g ? @g : $_;
\&                    } @ARGV;
\&        1;
\&        ^Z
\&        C:\e> set PERL5OPT=-MWild
\&        C:\e> perl -le "for (@ARGV) { print }" */*/perl*.c
\&        p4view/perl/perl.c
\&        p4view/perl/perlio.c
\&        p4view/perl/perly.c
\&        perl5.005/win32/perlglob.c
\&        perl5.005/win32/perllib.c
\&        perl5.005/win32/perlglob.c
\&        perl5.005/win32/perllib.c
\&        perl5.005/win32/perlglob.c
\&        perl5.005/win32/perllib.c
.Ve
Note there are two distinct steps there: 1) You'll have to create
Wild.pm and put it in your perl lib directory. 2) You'll need to
set the \s-1PERL5OPT\s0 environment variable.  If you want argv expansion
to be the default, just set \s-1PERL5OPT\s0 in your default startup
environment.
.Sp
If you are using the Visual C compiler, you can get the C runtime's
command line wildcard expansion built into perl binary.  The resulting
binary will always expand unquoted command lines, which may not be
what you want if you use a shell that does that for you.  The expansion
done is also somewhat less powerful than the approach suggested above.
.Ip "Win32 Specific Extensions" 4
.IX Item "Win32 Specific Extensions"
A number of extensions specific to the Win32 platform are available
from \s-1CPAN\s0.  You may find that many of these extensions are meant to
be used under the Activeware port of Perl, which used to be the only
native port for the Win32 platform.  Since the Activeware port does not
have adequate support for Perl's extension building tools, these
extensions typically do not support those tools either and, therefore,
cannot be built using the generic steps shown in the previous section.
.Sp
To ensure smooth transitioning of existing code that uses the
ActiveState port, there is a bundle of Win32 extensions that contains
all of the ActiveState extensions and most other Win32 extensions from
\&\s-1CPAN\s0 in source form, along with many added bugfixes, and with MakeMaker
support.  This bundle is available at:
.Sp
.Vb 1
\&   http://www.cpan.org/authors/id/GSAR/libwin32-0.151.zip
.Ve
See the \s-1README\s0 in that distribution for building and installation
instructions.  Look for later versions that may be available at the
same location.
.Ip "Running Perl Scripts" 4
.IX Item "Running Perl Scripts"
Perl scripts on \s-1UNIX\s0 use the \*(L"#!\*(R" (a.k.a \*(L"shebang\*(R") line to
indicate to the \s-1OS\s0 that it should execute the file using perl.
Win32 has no comparable means to indicate arbitrary files are
executables.
.Sp
Instead, all available methods to execute plain text files on
Win32 rely on the file \*(L"extension\*(R".  There are three methods
to use this to execute perl scripts:
.RS 4
.Ip "1" 8
.IX Item "1"
There is a facility called \*(L"file extension associations\*(R" that will
work in Windows \s-1NT\s0 4.0.  This can be manipulated via the two
commands \*(L"assoc\*(R" and \*(L"ftype\*(R" that come standard with Windows \s-1NT\s0
4.0.  Type \*(L"ftype /?\*(R" for a complete example of how to set this
up for perl scripts (Say what?  You thought Windows \s-1NT\s0 wasn't
perl-ready? :).
.Ip "2" 8
.IX Item "2"
Since file associations don't work everywhere, and there are
reportedly bugs with file associations where it does work, the
old method of wrapping the perl script to make it look like a
regular batch file to the \s-1OS\s0, may be used.  The install process
makes available the \*(L"pl2bat.bat\*(R" script which can be used to wrap
perl scripts into batch files.  For example:
.Sp
.Vb 1
\&        pl2bat foo.pl
.Ve
will create the file \*(L"\s-1FOO\s0.BAT\*(R".  Note \*(L"pl2bat\*(R" strips any
\&.pl suffix and adds a .bat suffix to the generated file.
.Sp
If you use the 4DOS/NT or similar command shell, note that
\&\*(L"pl2bat\*(R" uses the \*(L"%*\*(R" variable in the generated batch file to
refer to all the command line arguments, so you may need to make
sure that construct works in batch files.  As of this writing,
4DOS/NT users will need a \*(L"ParameterChar = *\*(R" statement in their
4NT.INI file or will need to execute \*(L"setdos /p*\*(R" in the 4DOS/NT
startup file to enable this to work.
.Ip "3" 8
.IX Item "3"
Using \*(L"pl2bat\*(R" has a few problems:  the file name gets changed,
so scripts that rely on \f(CW\*(C`$0\*(C'\fR to find what they must do may not
run properly; running \*(L"pl2bat\*(R" replicates the contents of the
original script, and so this process can be maintenance intensive
if the originals get updated often.  A different approach that
avoids both problems is possible.
.Sp
A script called \*(L"runperl.bat\*(R" is available that can be copied
to any filename (along with the .bat suffix).  For example,
if you call it \*(L"foo.bat\*(R", it will run the file \*(L"foo\*(R" when it is
executed.  Since you can run batch files on Win32 platforms simply
by typing the name (without the extension), this effectively
runs the file \*(L"foo\*(R", when you type either \*(L"foo\*(R" or \*(L"foo.bat\*(R".
With this method, \*(L"foo.bat\*(R" can even be in a different location
than the file \*(L"foo\*(R", as long as \*(L"foo\*(R" is available somewhere on
the \s-1PATH\s0.  If your scripts are on a filesystem that allows symbolic
links, you can even avoid copying \*(L"runperl.bat\*(R".
.Sp
Here's a diversion:  copy \*(L"runperl.bat\*(R" to \*(L"runperl\*(R", and type
\&\*(L"runperl\*(R".  Explain the observed behavior, or lack thereof. :)
Hint: .gnidnats llits er'uoy fi ,\*(L"lrepnur\*(R" eteled :tniH
.RE
.RS 4
.RE
.Ip "Miscellaneous Things" 4
.IX Item "Miscellaneous Things"
A full set of \s-1HTML\s0 documentation is installed, so you should be
able to use it if you have a web browser installed on your
system.
.Sp
\&\f(CW\*(C`perldoc\*(C'\fR is also a useful tool for browsing information contained
in the documentation, especially in conjunction with a pager
like \f(CW\*(C`less\*(C'\fR (recent versions of which have Win32 support).  You may
have to set the \s-1PAGER\s0 environment variable to use a specific pager.
\&\*(L"perldoc \-f foo\*(R" will print information about the perl operator
\&\*(L"foo\*(R".
.Sp
If you find bugs in perl, you can run \f(CW\*(C`perlbug\*(C'\fR to create a
bug report (you may have to send it manually if \f(CW\*(C`perlbug\*(C'\fR cannot
find a mailer on your system).
.SH "BUGS AND CAVEATS"
.IX Header "BUGS AND CAVEATS"
Some of the built-in functions do not act exactly as documented in
the perlfunc manpage, and a few are not implemented at all.  To avoid
surprises, particularly if you have had prior exposure to Perl
in other operating environments or if you intend to write code
that will be portable to other environments.  See the perlport manpage
for a reasonably definitive list of these differences.
.PP
Not all extensions available from \s-1CPAN\s0 may build or work properly
in the Win32 environment.  See the Building Extensions entry elsewhere in this document.
.PP
Most \f(CW\*(C`socket()\*(C'\fR related calls are supported, but they may not
behave as on Unix platforms.  See the perlport manpage for the full list.
.PP
Signal handling may not behave as on Unix platforms (where it
doesn't exactly \*(L"behave\*(R", either :).  For instance, calling \f(CW\*(C`die()\*(C'\fR
or \f(CW\*(C`exit()\*(C'\fR from signal handlers will cause an exception, since most
implementations of \f(CW\*(C`signal()\*(C'\fR on Win32 are severely crippled.
Thus, signals may work only for simple things like setting a flag
variable in the handler.  Using signals under this port should
currently be considered unsupported.
.PP
Please send detailed descriptions of any problems and solutions that 
you may find to <\fIperlbug@perl.com\fR>, along with the output produced
by \f(CW\*(C`perl \-V\*(C'\fR.
.SH "AUTHORS"
.IX Header "AUTHORS"
.Ip "Gary Ng <71564.1743@CompuServe.COM>" 4
.IX Item "Gary Ng <71564.1743@CompuServe.COM>"
.PD 0
.Ip "Gurusamy Sarathy <gsar@activestate.com>" 4
.IX Item "Gurusamy Sarathy <gsar@activestate.com>"
.Ip "Nick Ing-Simmons <nick@ni-s.u-net.com>" 4
.IX Item "Nick Ing-Simmons <nick@ni-s.u-net.com>"
.PD
.PP
This document is maintained by Gurusamy Sarathy.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
the perl manpage
.SH "HISTORY"
.IX Header "HISTORY"
This port was originally contributed by Gary Ng around 5.003_24,
and borrowed from the Hip Communications port that was available
at the time.  Various people have made numerous and sundry hacks
since then.
.PP
Borland support was added in 5.004_01 (Gurusamy Sarathy).
.PP
GCC/mingw32 support was added in 5.005 (Nick Ing-Simmons).
.PP
Support for \s-1PERL_OBJECT\s0 was added in 5.005 (ActiveState Tool Corp).
.PP
Support for \fIfork()\fR emulation was added in 5.6 (ActiveState Tool Corp).
.PP
Win9x support was added in 5.6 (Benjamin Stuhl).
.PP
Last updated: 1 April 2001
