.\" Automatically generated by Pod::Man version 1.15
.\" Fri Apr 20 12:57:35 2001
.\"
.\" Standard preamble:
.\" ======================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R

.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used
.\" to do unbreakable dashes and therefore won't be available.  \*(C` and
.\" \*(C' expand to `' in nroff, nothing in troff, for use with C<>
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr
.\" for titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and
.\" index entries marked with X<> in POD.  Of course, you'll have to process
.\" the output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it
.\" makes way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.bd B 3
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ======================================================================
.\"
.IX Title "PERL 1"
.TH PERL 1 "perl v5.6.1" "2001-04-08" "Perl Programmers Reference Guide"
.UC
.SH "NAME"
perl \- Practical Extraction and Report Language
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
\&\fBperl\fR	[\ \fB\-sTuU\fR\ ] [\ \fB\-hv\fR\ ]\ [\ \fB\-V\fR[:\fIconfigvar\fR]\ ]
    [\ \fB\-cw\fR\ ]\ [\ \fB\-d\fR[:\fIdebugger\fR]\ ]\ [\ \fB\-D\fR[\fInumber/list\fR]\ ]
    [\ \fB\-pna\fR\ ]\ [\ \fB\-F\fR\fIpattern\fR\ ]\ [\ \fB\-l\fR[\fIoctal\fR]\ ]\ [\ \fB\-0\fR[\fIoctal\fR]\ ]
    [\ \fB\-I\fR\fIdir\fR\ ]\ [\ \fB\-m\fR[\fB-\fR]\fImodule\fR\ ]\ [\ \fB\-M\fR[\fB-\fR]\fI'module...'\fR\ ]
    [\ \fB\-P\fR\ ] [\ \fB\-S\fR\ ] [\ \fB\-x\fR[\fIdir\fR]\ ]
    [\ \fB\-i\fR[\fIextension\fR]\ ] [\ \fB\-e\fR\ \fI'command'\fR\ ]\ [\ \fB\--\fR\ ]\ [\ \fIprogramfile\fR\ ]\ [\ \fIargument\fR\ ]...
.PP
For ease of access, the Perl manual has been split up into several sections:
.PP
.Vb 4
\&    perl                Perl overview (this section)
\&    perlfaq             Perl frequently asked questions
\&    perltoc             Perl documentation table of contents
\&    perlbook            Perl book information
.Ve
.Vb 11
\&    perlsyn             Perl syntax
\&    perldata            Perl data structures
\&    perlop              Perl operators and precedence
\&    perlsub             Perl subroutines
\&    perlfunc            Perl builtin functions
\&    perlreftut          Perl references short introduction
\&    perldsc             Perl data structures intro
\&    perlrequick         Perl regular expressions quick start
\&    perlpod             Perl plain old documentation
\&    perlstyle           Perl style guide
\&    perltrap            Perl traps for the unwary
.Ve
.Vb 5
\&    perlrun             Perl execution and options
\&    perldiag            Perl diagnostic messages
\&    perllexwarn         Perl warnings and their control
\&    perldebtut          Perl debugging tutorial
\&    perldebug           Perl debugging
.Ve
.Vb 4
\&    perlvar             Perl predefined variables
\&    perllol             Perl data structures: arrays of arrays
\&    perlopentut         Perl open() tutorial
\&    perlretut           Perl regular expressions tutorial
.Ve
.Vb 2
\&    perlre              Perl regular expressions, the rest of the story
\&    perlref             Perl references, the rest of the story
.Ve
.Vb 1
\&    perlform            Perl formats
.Ve
.Vb 6
\&    perlboot            Perl OO tutorial for beginners
\&    perltoot            Perl OO tutorial, part 1
\&    perltootc           Perl OO tutorial, part 2
\&    perlobj             Perl objects
\&    perlbot             Perl OO tricks and examples
\&    perltie             Perl objects hidden behind simple variables
.Ve
.Vb 4
\&    perlipc             Perl interprocess communication
\&    perlfork            Perl fork() information
\&    perlnumber          Perl number semantics
\&    perlthrtut          Perl threads tutorial
.Ve
.Vb 4
\&    perlport            Perl portability guide
\&    perllocale          Perl locale support
\&    perlunicode         Perl unicode support
\&    perlebcdic          Considerations for running Perl on EBCDIC platforms
.Ve
.Vb 1
\&    perlsec             Perl security
.Ve
.Vb 4
\&    perlmod             Perl modules: how they work
\&    perlmodlib          Perl modules: how to write and use
\&    perlmodinstall      Perl modules: how to install from CPAN
\&    perlnewmod          Perl modules: preparing a new module for distribution
.Ve
.Vb 9
\&    perlfaq1            General Questions About Perl
\&    perlfaq2            Obtaining and Learning about Perl
\&    perlfaq3            Programming Tools
\&    perlfaq4            Data Manipulation
\&    perlfaq5            Files and Formats
\&    perlfaq6            Regexes
\&    perlfaq7            Perl Language Issues
\&    perlfaq8            System Interaction
\&    perlfaq9            Networking
.Ve
.Vb 1
\&    perlcompile         Perl compiler suite intro
.Ve
.Vb 15
\&    perlembed           Perl ways to embed perl in your C or C++ application
\&    perldebguts         Perl debugging guts and tips
\&    perlxstut           Perl XS tutorial
\&    perlxs              Perl XS application programming interface
\&    perlclib            Internal replacements for standard C library functions
\&    perlguts            Perl internal functions for those doing extensions
\&    perlcall            Perl calling conventions from C
\&    perlutil            utilities packaged with the Perl distribution
\&    perlfilter          Perl source filters
\&    perldbmfilter       Perl DBM filters
\&    perlapi             Perl API listing (autogenerated)
\&    perlintern          Perl internal functions (autogenerated)
\&    perlapio            Perl internal IO abstraction interface
\&    perltodo            Perl things to do
\&    perlhack            Perl hackers guide
.Ve
.Vb 4
\&    perlhist            Perl history records
\&    perldelta           Perl changes since previous version
\&    perl5005delta       Perl changes in version 5.005
\&    perl5004delta       Perl changes in version 5.004
.Ve
.Vb 17
\&    perlaix             Perl notes for AIX
\&    perlamiga           Perl notes for Amiga
\&    perlbs2000          Perl notes for POSIX-BC BS2000
\&    perlcygwin          Perl notes for Cygwin
\&    perldos             Perl notes for DOS
\&    perlepoc            Perl notes for EPOC
\&    perlhpux            Perl notes for HP-UX
\&    perlmachten         Perl notes for Power MachTen
\&    perlmacos           Perl notes for Mac OS (Classic)
\&    perlmpeix           Perl notes for MPE/iX
\&    perlos2             Perl notes for OS/2
\&    perlos390           Perl notes for OS/390
\&    perlsolaris         Perl notes for Solaris
\&    perlvmesa           Perl notes for VM/ESA
\&    perlvms             Perl notes for VMS
\&    perlvos             Perl notes for Stratus VOS
\&    perlwin32           Perl notes for Windows
.Ve
(If you're intending to read these straight through for the first time,
the suggested order will tend to reduce the number of forward references.)
.PP
By default, the manpages listed above are installed in the 
\&\fI/usr/local/man/\fR directory.  
.PP
Extensive additional documentation for Perl modules is available.  The
default configuration for perl will place this additional documentation
in the \fI/usr/local/lib/perl5/man\fR directory (or else in the \fIman\fR
subdirectory of the Perl library directory).  Some of this additional
documentation is distributed standard with Perl, but you'll also find
documentation for third-party modules there.
.PP
You should be able to view Perl's documentation with your \fIman\fR\|(1)
program by including the proper directories in the appropriate start-up
files, or in the \s-1MANPATH\s0 environment variable.  To find out where the
configuration has installed the manpages, type:
.PP
.Vb 1
\&    perl -V:man.dir
.Ve
If the directories have a common stem, such as \fI/usr/local/man/man1\fR
and \fI/usr/local/man/man3\fR, you need only to add that stem
(\fI/usr/local/man\fR) to your \fIman\fR\|(1) configuration files or your \s-1MANPATH\s0
environment variable.  If they do not share a stem, you'll have to add
both stems.
.PP
If that doesn't work for some reason, you can still use the
supplied \fIperldoc\fR script to view module information.  You might
also look into getting a replacement man program.
.PP
If something strange has gone wrong with your program and you're not
sure where you should look for help, try the \fB\-w\fR switch first.  It
will often point out exactly where the trouble is.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Perl is a language optimized for scanning arbitrary
text files, extracting information from those text files, and printing
reports based on that information.  It's also a good language for many
system management tasks.  The language is intended to be practical
(easy to use, efficient, complete) rather than beautiful (tiny,
elegant, minimal).
.PP
Perl combines (in the author's opinion, anyway) some of the best
features of C, \fBsed\fR, \fBawk\fR, and \fBsh\fR, so people familiar with
those languages should have little difficulty with it.  (Language
historians will also note some vestiges of \fBcsh\fR, Pascal, and even
\&\s-1BASIC-PLUS\s0.)  Expression syntax corresponds closely to C
expression syntax.  Unlike most Unix utilities, Perl does not
arbitrarily limit the size of your data\*(--if you've got the memory,
Perl can slurp in your whole file as a single string.  Recursion is of
unlimited depth.  And the tables used by hashes (sometimes called
\&\*(L"associative arrays\*(R") grow as necessary to prevent degraded
performance.  Perl can use sophisticated pattern matching techniques to
scan large amounts of data quickly.  Although optimized for
scanning text, Perl can also deal with binary data, and can make dbm
files look like hashes.  Setuid Perl scripts are safer than C programs
through a dataflow tracing mechanism that prevents many stupid
security holes.
.PP
If you have a problem that would ordinarily use \fBsed\fR or \fBawk\fR or
\&\fBsh\fR, but it exceeds their capabilities or must run a little faster,
and you don't want to write the silly thing in C, then Perl may be for
you.  There are also translators to turn your \fBsed\fR and \fBawk\fR
scripts into Perl scripts.
.PP
But wait, there's more...
.PP
Begun in 1993 (see the perlhist manpage), Perl version 5 is nearly a complete
rewrite that provides the following additional benefits:
.Ip "\(bu" 4
modularity and reusability using innumerable modules 
.Sp
Described in the perlmod manpage, the perlmodlib manpage, and the perlmodinstall manpage.
.Ip "\(bu" 4
embeddable and extensible 
.Sp
Described in the perlembed manpage, the perlxstut manpage, the perlxs manpage, the perlcall manpage,
the perlguts manpage, and the xsubpp manpage.
.Ip "\(bu" 4
roll-your-own magic variables (including multiple simultaneous \s-1DBM\s0 implementations)
.Sp
Described in the perltie manpage and the AnyDBM_File manpage.
.Ip "\(bu" 4
subroutines can now be overridden, autoloaded, and prototyped
.Sp
Described in the perlsub manpage.
.Ip "\(bu" 4
arbitrarily nested data structures and anonymous functions
.Sp
Described in the perlreftut manpage, the perlref manpage, the perldsc manpage, and the perllol manpage.
.Ip "\(bu" 4
object-oriented programming
.Sp
Described in the perlobj manpage, the perltoot manpage, and the perlbot manpage.
.Ip "\(bu" 4
compilability into C code or Perl bytecode
.Sp
Described in the B manpage and the B::Bytecode manpage.
.Ip "\(bu" 4
support for light-weight processes (threads)
.Sp
Described in the perlthrtut manpage and the Thread manpage.
.Ip "\(bu" 4
support for internationalization, localization, and Unicode 
.Sp
Described in the perllocale manpage and the utf8 manpage.
.Ip "\(bu" 4
lexical scoping
.Sp
Described in the perlsub manpage.
.Ip "\(bu" 4
regular expression enhancements
.Sp
Described in the perlre manpage, with additional examples in the perlop manpage.
.Ip "\(bu" 4
enhanced debugger and interactive Perl environment,
with integrated editor support
.Sp
Described in the perldebug manpage.
.Ip "\(bu" 4
\&\s-1POSIX\s0 1003.1 compliant library
.Sp
Described in the POSIX manpage.
.PP
Okay, that's \fIdefinitely\fR enough hype.
.SH "AVAILABILITY"
.IX Header "AVAILABILITY"
Perl is available for most operating systems, including virtually
all Unix-like platforms.  See the Supported Platforms entry in the perlport manpage
for a listing.
.SH "ENVIRONMENT"
.IX Header "ENVIRONMENT"
See the perlrun manpage.
.SH "AUTHOR"
.IX Header "AUTHOR"
Larry Wall <larry@wall.org>, with the help of oodles of other folks.
.PP
If your Perl success stories and testimonials may be of help to others 
who wish to advocate the use of Perl in their applications, 
or if you wish to simply express your gratitude to Larry and the 
Perl developers, please write to perl-thanks@perl.org .
.SH "FILES"
.IX Header "FILES"
.Vb 1
\& "@INC"                 locations of perl libraries
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.Vb 2
\& a2p    awk to perl translator
\& s2p    sed to perl translator
.Ve
.Vb 2
\& http://www.perl.com/       the Perl Home Page
\& http://www.perl.com/CPAN   the Comprehensive Perl Archive
.Ve
.SH "DIAGNOSTICS"
.IX Header "DIAGNOSTICS"
The \f(CW\*(C`use warnings\*(C'\fR pragma (and the \fB\-w\fR switch) produces some 
lovely diagnostics.
.PP
See the perldiag manpage for explanations of all Perl's diagnostics.  The \f(CW\*(C`use
diagnostics\*(C'\fR pragma automatically turns Perl's normally terse warnings
and errors into these longer forms.
.PP
Compilation errors will tell you the line number of the error, with an
indication of the next token or token type that was to be examined.
(In a script passed to Perl via \fB\-e\fR switches, each
\&\fB\-e\fR is counted as one line.)
.PP
Setuid scripts have additional constraints that can produce error
messages such as \*(L"Insecure dependency\*(R".  See the perlsec manpage.
.PP
Did we mention that you should definitely consider using the \fB\-w\fR
switch?
.SH "BUGS"
.IX Header "BUGS"
The \fB\-w\fR switch is not mandatory.
.PP
Perl is at the mercy of your machine's definitions of various
operations such as type casting, \fIatof()\fR, and floating-point
output with \fIsprintf()\fR.
.PP
If your stdio requires a seek or eof between reads and writes on a
particular stream, so does Perl.  (This doesn't apply to \fIsysread()\fR
and \fIsyswrite()\fR.)
.PP
While none of the built-in data types have any arbitrary size limits
(apart from memory size), there are still a few arbitrary limits:  a
given variable name may not be longer than 251 characters.  Line numbers
displayed by diagnostics are internally stored as short integers,
so they are limited to a maximum of 65535 (higher numbers usually being
affected by wraparound).
.PP
You may mail your bug reports (be sure to include full configuration
information as output by the myconfig program in the perl source
tree, or by \f(CW\*(C`perl \-V\*(C'\fR) to perlbug@perl.org .  If you've succeeded
in compiling perl, the \fBperlbug\fR script in the \fIutils/\fR subdirectory
can be used to help mail in a bug report.
.PP
Perl actually stands for Pathologically Eclectic Rubbish Lister, but
don't tell anyone I said that.
.SH "NOTES"
.IX Header "NOTES"
The Perl motto is \*(L"There's more than one way to do it.\*(R"  Divining
how many more is left as an exercise to the reader.
.PP
The three principal virtues of a programmer are Laziness,
Impatience, and Hubris.  See the Camel Book for why.
