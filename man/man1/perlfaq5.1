.\" Automatically generated by Pod::Man version 1.15
.\" Fri Apr 20 13:00:00 2001
.\"
.\" Standard preamble:
.\" ======================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R

.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used
.\" to do unbreakable dashes and therefore won't be available.  \*(C` and
.\" \*(C' expand to `' in nroff, nothing in troff, for use with C<>
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr
.\" for titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and
.\" index entries marked with X<> in POD.  Of course, you'll have to process
.\" the output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it
.\" makes way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.bd B 3
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ======================================================================
.\"
.IX Title "PERLFAQ5 1"
.TH PERLFAQ5 1 "perl v5.6.1" "2001-04-08" "Perl Programmers Reference Guide"
.UC
.SH "NAME"
perlfaq5 \- Files and Formats ($Revision: 1.38 $, \f(CW$Date:\fR 1999/05/23 16:08:30 $)
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This section deals with I/O and the \*(L"f\*(R" issues: filehandles, flushing,
formats, and footers.
.Sh "How do I flush/unbuffer an output filehandle?  Why must I do this?"
.IX Subsection "How do I flush/unbuffer an output filehandle?  Why must I do this?"
The C standard I/O library (stdio) normally buffers characters sent to
devices.  This is done for efficiency reasons so that there isn't a
system call for each byte.  Any time you use \fIprint()\fR or \fIwrite()\fR in
Perl, you go though this buffering.  \fIsyswrite()\fR circumvents stdio and
buffering.
.PP
In most stdio implementations, the type of output buffering and the size of
the buffer varies according to the type of device.  Disk files are block
buffered, often with a buffer size of more than 2k.  Pipes and sockets
are often buffered with a buffer size between 1/2 and 2k.  Serial devices
(e.g. modems, terminals) are normally line-buffered, and stdio sends
the entire line when it gets the newline.
.PP
Perl does not support truly unbuffered output (except insofar as you can
\&\f(CW\*(C`syswrite(OUT, $char, 1)\*(C'\fR).  What it does instead support is \*(L"command
buffering\*(R", in which a physical write is performed after every output
command.  This isn't as hard on your system as unbuffering, but does
get the output where you want it when you want it.
.PP
If you expect characters to get to your device when you print them there,
you'll want to autoflush its handle.
Use \fIselect()\fR and the \f(CW\*(C`$|\*(C'\fR variable to control autoflushing
(see perlvar/$ and the select entry in the perlfunc manpage):
.PP
.Vb 3
\&    $old_fh = select(OUTPUT_HANDLE);
\&    $| = 1;
\&    select($old_fh);
.Ve
Or using the traditional idiom:
.PP
.Vb 1
\&    select((select(OUTPUT_HANDLE), $| = 1)[0]);
.Ve
Or if don't mind slowly loading several thousand lines of module code
just because you're afraid of the \f(CW\*(C`$|\*(C'\fR variable:
.PP
.Vb 3
\&    use FileHandle;
\&    open(DEV, "+</dev/tty");      # ceci n'est pas une pipe
\&    DEV->autoflush(1);
.Ve
or the newer \s-1IO:\s0:* modules:
.PP
.Vb 3
\&    use IO::Handle;
\&    open(DEV, ">/dev/printer");   # but is this?
\&    DEV->autoflush(1);
.Ve
or even this:
.PP
.Vb 5
\&    use IO::Socket;               # this one is kinda a pipe?
\&    $sock = IO::Socket::INET->new(PeerAddr => 'www.perl.com',
\&                                  PeerPort => 'http(80)',
\&                                  Proto    => 'tcp');
\&    die "$!" unless $sock;
.Ve
.Vb 4
\&    $sock->autoflush();
\&    print $sock "GET / HTTP/1.0" . "\e015\e012" x 2;
\&    $document = join('', <$sock>);
\&    print "DOC IS: $document\en";
.Ve
Note the bizarrely hardcoded carriage return and newline in their octal
equivalents.  This is the \s-1ONLY\s0 way (currently) to assure a proper flush
on all platforms, including Macintosh.  That's the way things work in
network programming: you really should specify the exact bit pattern
on the network line terminator.  In practice, \f(CW\*(C`"\en\en"\*(C'\fR often works,
but this is not portable.
.PP
See the perlfaq9 manpage for other examples of fetching URLs over the web.
.Sh "How do I change one line in a file/delete a line in a file/insert a line in the middle of a file/append to the beginning of a file?"
.IX Subsection "How do I change one line in a file/delete a line in a file/insert a line in the middle of a file/append to the beginning of a file?"
Those are operations of a text editor.  Perl is not a text editor.
Perl is a programming language.  You have to decompose the problem into
low-level calls to read, write, open, close, and seek.
.PP
Although humans have an easy time thinking of a text file as being a
sequence of lines that operates much like a stack of playing cards\*(--or
punch cards\*(--computers usually see the text file as a sequence of bytes.
In general, there's no direct way for Perl to seek to a particular line
of a file, insert text into a file, or remove text from a file.
.PP
(There are exceptions in special circumstances.  You can add or remove
data at the very end of the file.  A sequence of bytes can be replaced
with another sequence of the same length.  The \f(CW\*(C`$DB_RECNO\*(C'\fR array
bindings as documented in the DB_File manpage also provide a direct way of
modifying a file.  Files where all lines are the same length are also
easy to alter.)
.PP
The general solution is to create a temporary copy of the text file with
the changes you want, then copy that over the original.  This assumes
no locking.
.PP
.Vb 3
\&    $old = $file;
\&    $new = "$file.tmp.$$";
\&    $bak = "$file.orig";
.Ve
.Vb 2
\&    open(OLD, "< $old")         or die "can't open $old: $!";
\&    open(NEW, "> $new")         or die "can't open $new: $!";
.Ve
.Vb 5
\&    # Correct typos, preserving case
\&    while (<OLD>) {
\&        s/\eb(p)earl\eb/${1}erl/i;
\&        (print NEW $_)          or die "can't write to $new: $!";
\&    }
.Ve
.Vb 2
\&    close(OLD)                  or die "can't close $old: $!";
\&    close(NEW)                  or die "can't close $new: $!";
.Ve
.Vb 2
\&    rename($old, $bak)          or die "can't rename $old to $bak: $!";
\&    rename($new, $old)          or die "can't rename $new to $old: $!";
.Ve
Perl can do this sort of thing for you automatically with the \f(CW\*(C`\-i\*(C'\fR
command-line switch or the closely-related \f(CW\*(C`$^I\*(C'\fR variable (see
the perlrun manpage for more details).  Note that
\&\f(CW\*(C`\-i\*(C'\fR may require a suffix on some non-Unix systems; see the
platform-specific documentation that came with your port.
.PP
.Vb 2
\&    # Renumber a series of tests from the command line
\&    perl -pi -e 's/(^\es+test\es+)\ed+/ $1 . ++$count /e' t/op/taint.t
.Ve
.Vb 10
\&    # form a script
\&    local($^I, @ARGV) = ('.orig', glob("*.c"));
\&    while (<>) {
\&        if ($. == 1) {
\&            print "This line should appear at the top of each file\en";
\&        }
\&        s/\eb(p)earl\eb/${1}erl/i;        # Correct typos, preserving case
\&        print;
\&        close ARGV if eof;              # Reset $.
\&    }
.Ve
If you need to seek to an arbitrary line of a file that changes
infrequently, you could build up an index of byte positions of where
the line ends are in the file.  If the file is large, an index of
every tenth or hundredth line end would allow you to seek and read
fairly efficiently.  If the file is sorted, try the look.pl library
(part of the standard perl distribution).
.PP
In the unique case of deleting lines at the end of a file, you
can use \fItell()\fR and \fItruncate()\fR.  The following code snippet deletes
the last line of a file without making a copy or reading the
whole file into memory:
.PP
.Vb 3
\&        open (FH, "+< $file");
\&        while ( <FH> ) { $addr = tell(FH) unless eof(FH) }
\&        truncate(FH, $addr);
.Ve
Error checking is left as an exercise for the reader.
.Sh "How do I count the number of lines in a file?"
.IX Subsection "How do I count the number of lines in a file?"
One fairly efficient way is to count newlines in the file. The
following program uses a feature of tr///, as documented in the perlop manpage.
If your text file doesn't end with a newline, then it's not really a
proper text file, so this may report one fewer line than you expect.
.PP
.Vb 6
\&    $lines = 0;
\&    open(FILE, $filename) or die "Can't open `$filename': $!";
\&    while (sysread FILE, $buffer, 4096) {
\&        $lines += ($buffer =~ tr/\en//);
\&    }
\&    close FILE;
.Ve
This assumes no funny games with newline translations.
.Sh "How do I make a temporary file name?"
.IX Subsection "How do I make a temporary file name?"
Use the \f(CW\*(C`new_tmpfile\*(C'\fR class method from the \s-1IO:\s0:File module to get a
filehandle opened for reading and writing.  Use it if you don't
need to know the file's name:
.PP
.Vb 3
\&    use IO::File;
\&    $fh = IO::File->new_tmpfile()
\&        or die "Unable to make new temporary file: $!";
.Ve
If you do need to know the file's name, you can use the \f(CW\*(C`tmpnam\*(C'\fR
function from the \s-1POSIX\s0 module to get a filename that you then open
yourself:
.PP
.Vb 2
\&    use Fcntl;
\&    use POSIX qw(tmpnam);
.Ve
.Vb 4
\&    # try new temporary filenames until we get one that didn't already
\&    # exist;  the check should be unnecessary, but you can't be too careful
\&    do { $name = tmpnam() }
\&        until sysopen(FH, $name, O_RDWR|O_CREAT|O_EXCL);
.Ve
.Vb 3
\&    # install atexit-style handler so that when we exit or die,
\&    # we automatically delete this temporary file
\&    END { unlink($name) or die "Couldn't unlink $name : $!" }
.Ve
.Vb 1
\&    # now go on to use the file ...
.Ve
If you're committed to creating a temporary file by hand, use the
process \s-1ID\s0 and/or the current time-value.  If you need to have many
temporary files in one process, use a counter:
.PP
.Vb 18
\&    BEGIN {
\&        use Fcntl;
\&        my $temp_dir = -d '/tmp' ? '/tmp' : $ENV{TMP} || $ENV{TEMP};
\&        my $base_name = sprintf("%s/%d-%d-0000", $temp_dir, $$, time());
\&        sub temp_file {
\&            local *FH;
\&            my $count = 0;
\&            until (defined(fileno(FH)) || $count++ > 100) {
\&                $base_name =~ s/-(\ed+)$/"-" . (1 + $1)/e;
\&                sysopen(FH, $base_name, O_WRONLY|O_EXCL|O_CREAT);
\&            }
\&            if (defined(fileno(FH))
\&                return (*FH, $base_name);
\&            } else {
\&                return ();
\&            }
\&        }
\&    }
.Ve
.Sh "How can I manipulate fixed-record-length files?"
.IX Subsection "How can I manipulate fixed-record-length files?"
The most efficient way is using \fIpack()\fR and \fIunpack()\fR.  This is faster than
using \fIsubstr()\fR when taking many, many strings.  It is slower for just a few.
.PP
Here is a sample chunk of code to break up and put back together again
some fixed-format input lines, in this case from the output of a normal,
Berkeley-style ps:
.PP
.Vb 13
\&    # sample input line:
\&    #   15158 p5  T      0:00 perl /home/tchrist/scripts/now-what
\&    $PS_T = 'A6 A4 A7 A5 A*';
\&    open(PS, "ps|");
\&    print scalar <PS>; 
\&    while (<PS>) {
\&        ($pid, $tt, $stat, $time, $command) = unpack($PS_T, $_);
\&        for $var (qw!pid tt stat time command!) {
\&            print "$var: <$$var>\en";
\&        }
\&        print 'line=', pack($PS_T, $pid, $tt, $stat, $time, $command),
\&                "\en";
\&    }
.Ve
We've used \f(CW\*(C`$$var\*(C'\fR in a way that forbidden by \f(CW\*(C`use strict 'refs'\*(C'\fR.
That is, we've promoted a string to a scalar variable reference using
symbolic references.  This is ok in small programs, but doesn't scale
well.   It also only works on global variables, not lexicals.
.Sh "How can I make a filehandle local to a subroutine?  How do I pass filehandles between subroutines?  How do I make an array of filehandles?"
.IX Subsection "How can I make a filehandle local to a subroutine?  How do I pass filehandles between subroutines?  How do I make an array of filehandles?"
The fastest, simplest, and most direct way is to localize the typeglob
of the filehandle in question:
.PP
.Vb 1
\&    local *TmpHandle;
.Ve
Typeglobs are fast (especially compared with the alternatives) and
reasonably easy to use, but they also have one subtle drawback.  If you
had, for example, a function named \fITmpHandle()\fR, or a variable named
\&\f(CW%TmpHandle\fR, you just hid it from yourself.
.PP
.Vb 9
\&    sub findme {
\&        local *HostFile;
\&        open(HostFile, "</etc/hosts") or die "no /etc/hosts: $!";
\&        local $_;               # <- VERY IMPORTANT
\&        while (<HostFile>) {
\&            print if /\eb127\e.(0\e.0\e.)?1\eb/;
\&        }
\&        # *HostFile automatically closes/disappears here
\&    }
.Ve
Here's how to use typeglobs in a loop to open and store a bunch of
filehandles.  We'll use as values of the hash an ordered
pair to make it easy to sort the hash in insertion order.
.PP
.Vb 7
\&    @names = qw(motd termcap passwd hosts);
\&    my $i = 0;
\&    foreach $filename (@names) {
\&        local *FH;
\&        open(FH, "/etc/$filename") || die "$filename: $!";
\&        $file{$filename} = [ $i++, *FH ];
\&    }
.Ve
.Vb 6
\&    # Using the filehandles in the array
\&    foreach $name (sort { $file{$a}[0] <=> $file{$b}[0] } keys %file) {
\&        my $fh = $file{$name}[1];
\&        my $line = <$fh>;
\&        print "$name $. $line";
\&    }
.Ve
For passing filehandles to functions, the easiest way is to 
preface them with a star, as in func(*STDIN).  
See the Passing Filehandles entry in the perlfaq7 manpage for details.
.PP
If you want to create many anonymous handles, you should check out the
Symbol, FileHandle, or \s-1IO:\s0:Handle (etc.) modules.  Here's the equivalent
code with Symbol::gensym, which is reasonably light-weight:
.PP
.Vb 6
\&    foreach $filename (@names) {
\&        use Symbol;
\&        my $fh = gensym();
\&        open($fh, "/etc/$filename") || die "open /etc/$filename: $!";
\&        $file{$filename} = [ $i++, $fh ];
\&    }
.Ve
Here's using the semi-object-oriented FileHandle module, which certainly
isn't light-weight:
.PP
.Vb 1
\&    use FileHandle;
.Ve
.Vb 4
\&    foreach $filename (@names) {
\&        my $fh = FileHandle->new("/etc/$filename") or die "$filename: $!";
\&        $file{$filename} = [ $i++, $fh ];
\&    }
.Ve
Please understand that whether the filehandle happens to be a (probably
localized) typeglob or an anonymous handle from one of the modules
in no way affects the bizarre rules for managing indirect handles.
See the next question.
.Sh "How can I use a filehandle indirectly?"
.IX Subsection "How can I use a filehandle indirectly?"
An indirect filehandle is using something other than a symbol
in a place that a filehandle is expected.  Here are ways
to get indirect filehandles:
.PP
.Vb 5
\&    $fh =   SOME_FH;       # bareword is strict-subs hostile
\&    $fh =  "SOME_FH";      # strict-refs hostile; same package only
\&    $fh =  *SOME_FH;       # typeglob
\&    $fh = \e*SOME_FH;       # ref to typeglob (bless-able)
\&    $fh =  *SOME_FH{IO};   # blessed IO::Handle from *SOME_FH typeglob
.Ve
Or, you can use the \f(CW\*(C`new\*(C'\fR method from the FileHandle or \s-1IO\s0 modules to
create an anonymous filehandle, store that in a scalar variable,
and use it as though it were a normal filehandle.
.PP
.Vb 2
\&    use FileHandle;
\&    $fh = FileHandle->new();
.Ve
.Vb 2
\&    use IO::Handle;                     # 5.004 or higher
\&    $fh = IO::Handle->new();
.Ve
Then use any of those as you would a normal filehandle.  Anywhere that
Perl is expecting a filehandle, an indirect filehandle may be used
instead. An indirect filehandle is just a scalar variable that contains
a filehandle.  Functions like \f(CW\*(C`print\*(C'\fR, \f(CW\*(C`open\*(C'\fR, \f(CW\*(C`seek\*(C'\fR, or
the \f(CW\*(C`<FH>\*(C'\fR diamond operator will accept either a read filehandle
or a scalar variable containing one:
.PP
.Vb 4
\&    ($ifh, $ofh, $efh) = (*STDIN, *STDOUT, *STDERR);
\&    print $ofh "Type it: ";
\&    $got = <$ifh>
\&    print $efh "What was that: $got";
.Ve
If you're passing a filehandle to a function, you can write
the function in two ways:
.PP
.Vb 4
\&    sub accept_fh {
\&        my $fh = shift;
\&        print $fh "Sending to indirect filehandle\en";
\&    }
.Ve
Or it can localize a typeglob and use the filehandle directly:
.PP
.Vb 4
\&    sub accept_fh {
\&        local *FH = shift;
\&        print  FH "Sending to localized filehandle\en";
\&    }
.Ve
Both styles work with either objects or typeglobs of real filehandles.
(They might also work with strings under some circumstances, but this
is risky.)
.PP
.Vb 2
\&    accept_fh(*STDOUT);
\&    accept_fh($handle);
.Ve
In the examples above, we assigned the filehandle to a scalar variable
before using it.  That is because only simple scalar variables, not
expressions or subscripts of hashes or arrays, can be used with
built-ins like \f(CW\*(C`print\*(C'\fR, \f(CW\*(C`printf\*(C'\fR, or the diamond operator.  Using
something other than a simple scalar varaible as a filehandle is
illegal and won't even compile:
.PP
.Vb 4
\&    @fd = (*STDIN, *STDOUT, *STDERR);
\&    print $fd[1] "Type it: ";                           # WRONG
\&    $got = <$fd[0]>                                     # WRONG
\&    print $fd[2] "What was that: $got";                 # WRONG
.Ve
With \f(CW\*(C`print\*(C'\fR and \f(CW\*(C`printf\*(C'\fR, you get around this by using a block and
an expression where you would place the filehandle:
.PP
.Vb 3
\&    print  { $fd[1] } "funny stuff\en";
\&    printf { $fd[1] } "Pity the poor %x.\en", 3_735_928_559;
\&    # Pity the poor deadbeef.
.Ve
That block is a proper block like any other, so you can put more
complicated code there.  This sends the message out to one of two places:
.PP
.Vb 3
\&    $ok = -x "/bin/cat";                
\&    print { $ok ? $fd[1] : $fd[2] } "cat stat $ok\en";
\&    print { $fd[ 1+ ($ok || 0) ]  } "cat stat $ok\en";
.Ve
This approach of treating \f(CW\*(C`print\*(C'\fR and \f(CW\*(C`printf\*(C'\fR like object methods
calls doesn't work for the diamond operator.  That's because it's a
real operator, not just a function with a comma-less argument.  Assuming
you've been storing typeglobs in your structure as we did above, you
can use the built-in function named \f(CW\*(C`readline\*(C'\fR to reads a record just
as \f(CW\*(C`<>\*(C'\fR does.  Given the initialization shown above for \f(CW@fd\fR, this
would work, but only because \fIreadline()\fR require a typeglob.  It doesn't
work with objects or strings, which might be a bug we haven't fixed yet.
.PP
.Vb 1
\&    $got = readline($fd[0]);
.Ve
Let it be noted that the flakiness of indirect filehandles is not
related to whether they're strings, typeglobs, objects, or anything else.
It's the syntax of the fundamental operators.  Playing the object
game doesn't help you at all here.
.Sh "How can I set up a footer format to be used with \fIwrite()\fP?"
.IX Subsection "How can I set up a footer format to be used with write()?"
There's no builtin way to do this, but the perlform manpage has a couple of
techniques to make it possible for the intrepid hacker.
.Sh "How can I \fIwrite()\fP into a string?"
.IX Subsection "How can I write() into a string?"
See the Accessing Formatting Internals entry in the perlform manpage for an \fIswrite()\fR function.
.Sh "How can I output my numbers with commas added?"
.IX Subsection "How can I output my numbers with commas added?"
This one will do it for you:
.PP
.Vb 5
\&    sub commify {
\&        local $_  = shift;
\&        1 while s/^([-+]?\ed+)(\ed{3})/$1,$2/;
\&        return $_;
\&    }
.Ve
.Vb 2
\&    $n = 23659019423.2331;
\&    print "GOT: ", commify($n), "\en";
.Ve
.Vb 1
\&    GOT: 23,659,019,423.2331
.Ve
You can't just:
.PP
.Vb 1
\&    s/^([-+]?\ed+)(\ed{3})/$1,$2/g;
.Ve
because you have to put the comma in and then recalculate your
position.
.PP
Alternatively, this code commifies all numbers in a line regardless of
whether they have decimal portions, are preceded by + or \-, or
whatever:
.PP
.Vb 7
\&    # from Andrew Johnson <ajohnson@gpu.srv.ualberta.ca>
\&    sub commify {
\&       my $input = shift;
\&        $input = reverse $input;
\&        $input =~ s<(\ed\ed\ed)(?=\ed)(?!\ed*\e.)><$1,>g;
\&        return scalar reverse $input;
\&    }
.Ve
.Sh "How can I translate tildes (~) in a filename?"
.IX Subsection "How can I translate tildes (~) in a filename?"
Use the <> (\fIglob()\fR) operator, documented in the perlfunc manpage.  Older
versions of Perl require that you have a shell installed that groks
tildes.  Recent perl versions have this feature built in. The
Glob::KGlob module (available from \s-1CPAN\s0) gives more portable glob
functionality.
.PP
Within Perl, you may use this directly:
.PP
.Vb 11
\&        $filename =~ s{
\&          ^ ~             # find a leading tilde
\&          (               # save this in $1
\&              [^/]        # a non-slash character
\&                    *     # repeated 0 or more times (0 means me)
\&          )
\&        }{
\&          $1
\&              ? (getpwnam($1))[7]
\&              : ( $ENV{HOME} || $ENV{LOGDIR} )
\&        }ex;
.Ve
.Sh "How come when I open a file read-write it wipes it out?"
.IX Subsection "How come when I open a file read-write it wipes it out?"
Because you're using something like this, which truncates the file and
\&\fIthen\fR gives you read-write access:
.PP
.Vb 1
\&    open(FH, "+> /path/name");          # WRONG (almost always)
.Ve
Whoops.  You should instead use this, which will fail if the file
doesn't exist.  
.PP
.Vb 1
\&    open(FH, "+< /path/name");          # open for update
.Ve
Using \*(L">\*(R" always clobbers or creates.  Using \*(L"<\*(R" never does
either.  The \*(L"+\*(R" doesn't change this.
.PP
Here are examples of many kinds of file opens.  Those using \fIsysopen()\fR
all assume
.PP
.Vb 1
\&    use Fcntl;
.Ve
To open file for reading:
.PP
.Vb 2
\&    open(FH, "< $path")                                 || die $!;
\&    sysopen(FH, $path, O_RDONLY)                        || die $!;
.Ve
To open file for writing, create new file if needed or else truncate old file:
.PP
.Vb 3
\&    open(FH, "> $path") || die $!;
\&    sysopen(FH, $path, O_WRONLY|O_TRUNC|O_CREAT)        || die $!;
\&    sysopen(FH, $path, O_WRONLY|O_TRUNC|O_CREAT, 0666)  || die $!;
.Ve
To open file for writing, create new file, file must not exist:
.PP
.Vb 2
\&    sysopen(FH, $path, O_WRONLY|O_EXCL|O_CREAT)         || die $!;
\&    sysopen(FH, $path, O_WRONLY|O_EXCL|O_CREAT, 0666)   || die $!;
.Ve
To open file for appending, create if necessary:
.PP
.Vb 3
\&    open(FH, ">> $path") || die $!;
\&    sysopen(FH, $path, O_WRONLY|O_APPEND|O_CREAT)       || die $!;
\&    sysopen(FH, $path, O_WRONLY|O_APPEND|O_CREAT, 0666) || die $!;
.Ve
To open file for appending, file must exist:
.PP
.Vb 1
\&    sysopen(FH, $path, O_WRONLY|O_APPEND)               || die $!;
.Ve
To open file for update, file must exist:
.PP
.Vb 2
\&    open(FH, "+< $path")                                || die $!;
\&    sysopen(FH, $path, O_RDWR)                          || die $!;
.Ve
To open file for update, create file if necessary:
.PP
.Vb 2
\&    sysopen(FH, $path, O_RDWR|O_CREAT)                  || die $!;
\&    sysopen(FH, $path, O_RDWR|O_CREAT, 0666)            || die $!;
.Ve
To open file for update, file must not exist:
.PP
.Vb 2
\&    sysopen(FH, $path, O_RDWR|O_EXCL|O_CREAT)           || die $!;
\&    sysopen(FH, $path, O_RDWR|O_EXCL|O_CREAT, 0666)     || die $!;
.Ve
To open a file without blocking, creating if necessary:
.PP
.Vb 2
\&    sysopen(FH, "/tmp/somefile", O_WRONLY|O_NDELAY|O_CREAT)
\&            or die "can't open /tmp/somefile: $!":
.Ve
Be warned that neither creation nor deletion of files is guaranteed to
be an atomic operation over \s-1NFS\s0.  That is, two processes might both
successfully create or unlink the same file!  Therefore O_EXCL
isn't as exclusive as you might wish.
.PP
See also the new the perlopentut manpage if you have it (new for 5.6).
.if n .Sh "Why do I sometimes get an ""Argument list too long"" when I use <*>?"
.el .Sh "Why do I sometimes get an ``Argument list too long'' when I use <*>?"
.IX Subsection "Why do I sometimes get an "Argument list too long when I use <*>?"
The \f(CW\*(C`<>\*(C'\fR operator performs a globbing operation (see above).
In Perl versions earlier than v5.6.0, the internal \fIglob()\fR operator forks
\&\fIcsh\fR\|(1) to do the actual glob expansion, but
csh can't handle more than 127 items and so gives the error message
\&\f(CW\*(C`Argument list too long\*(C'\fR.  People who installed tcsh as csh won't
have this problem, but their users may be surprised by it.
.PP
To get around this, either upgrade to Perl v5.6.0 or later, do the glob
yourself with \fIreaddir()\fR and patterns, or use a module like Glob::KGlob,
one that doesn't use the shell to do globbing.
.Sh "Is there a leak/bug in \fIglob()\fP?"
.IX Subsection "Is there a leak/bug in glob()?"
Due to the current implementation on some operating systems, when you
use the \fIglob()\fR function or its angle-bracket alias in a scalar
context, you may cause a memory leak and/or unpredictable behavior.  It's
best therefore to use \fIglob()\fR only in list context.
.if n .Sh "How can I open a file with a leading "">"" or trailing blanks?"
.el .Sh "How can I open a file with a leading ``>'' or trailing blanks?"
.IX Subsection "How can I open a file with a leading "> or trailing blanks?"
Normally perl ignores trailing blanks in filenames, and interprets
certain leading characters (or a trailing \*(L"|\*(R") to mean something
special.  To avoid this, you might want to use a routine like the one below.
It turns incomplete pathnames into explicit relative ones, and tacks a
trailing null byte on the name to make perl leave it alone:
.PP
.Vb 6
\&    sub safe_filename {
\&        local $_  = shift;
\&        s#^([^./])#./$1#;
\&        $_ .= "\e0";
\&        return $_;
\&    }
.Ve
.Vb 3
\&    $badpath = "<<<something really wicked   ";
\&    $fn = safe_filename($badpath");
\&    open(FH, "> $fn") or "couldn't open $badpath: $!";
.Ve
This assumes that you are using \s-1POSIX\s0 (portable operating systems
interface) paths.  If you are on a closed, non-portable, proprietary
system, you may have to adjust the \f(CW\*(C`"./"\*(C'\fR above.
.PP
It would be a lot clearer to use \fIsysopen()\fR, though:
.PP
.Vb 4
\&    use Fcntl;
\&    $badpath = "<<<something really wicked   ";
\&    sysopen (FH, $badpath, O_WRONLY | O_CREAT | O_TRUNC)
\&        or die "can't open $badpath: $!";
.Ve
For more information, see also the new the perlopentut manpage if you have it
(new for 5.6).
.Sh "How can I reliably rename a file?"
.IX Subsection "How can I reliably rename a file?"
Well, usually you just use Perl's \fIrename()\fR function.  That may not
work everywhere, though, particularly when renaming files across file systems.
Some sub-Unix systems have broken ports that corrupt the semantics of
\&\fIrename()\fR\*(--for example, WinNT does this right, but Win95 and Win98
are broken.  (The last two parts are not surprising, but the first is. :\-)
.PP
If your operating system supports a proper \fImv\fR\|(1) program or its moral
equivalent, this works:
.PP
.Vb 1
\&    rename($old, $new) or system("mv", $old, $new);
.Ve
It may be more compelling to use the File::Copy module instead.  You
just copy to the new file to the new name (checking return values),
then delete the old one.  This isn't really the same semantically as a
real \fIrename()\fR, though, which preserves metainformation like
permissions, timestamps, inode info, etc.
.PP
Newer versions of File::Copy exports a \fImove()\fR function.
.Sh "How can I lock a file?"
.IX Subsection "How can I lock a file?"
Perl's builtin \fIflock()\fR function (see the perlfunc manpage for details) will call
\&\fIflock\fR\|(2) if that exists, \fIfcntl\fR\|(2) if it doesn't (on perl version 5.004 and
later), and \fIlockf\fR\|(3) if neither of the two previous system calls exists.
On some systems, it may even use a different form of native locking.
Here are some gotchas with Perl's \fIflock()\fR:
.Ip "1" 4
.IX Item "1"
Produces a fatal error if none of the three system calls (or their
close equivalent) exists.
.Ip "2" 4
.IX Item "2"
\&\fIlockf\fR\|(3) does not provide shared locking, and requires that the
filehandle be open for writing (or appending, or read/writing).
.Ip "3" 4
.IX Item "3"
Some versions of \fIflock()\fR can't lock files over a network (e.g. on \s-1NFS\s0 file
systems), so you'd need to force the use of \fIfcntl\fR\|(2) when you build Perl.
But even this is dubious at best.  See the flock entry of the perlfunc manpage
and the \fI\s-1INSTALL\s0\fR file in the source distribution for information on
building Perl to do this.
.Sp
Two potentially non-obvious but traditional flock semantics are that
it waits indefinitely until the lock is granted, and that its locks are
\&\fImerely advisory\fR.  Such discretionary locks are more flexible, but
offer fewer guarantees.  This means that files locked with \fIflock()\fR may
be modified by programs that do not also use \fIflock()\fR.  Cars that stop
for red lights get on well with each other, but not with cars that don't
stop for red lights.  See the perlport manpage, your port's specific
documentation, or your system-specific local manpages for details.  It's
best to assume traditional behavior if you're writing portable programs.
(If you're not, you should as always feel perfectly free to write
for your own system's idiosyncrasies (sometimes called \*(L"features\*(R").
Slavish adherence to portability concerns shouldn't get in the way of
your getting your job done.)
.Sp
For more information on file locking, see also 
the File Locking entry in the perlopentut manpage if you have it (new for 5.6).
.if n .Sh "Why can't I just open(\s-1FH\s0, "">file.lock"")?"
.el .Sh "Why can't I just open(\s-1FH\s0, ``>file.lock'')?"
.IX Subsection "Why can't I just open(FH, ">file.lock)?"
A common bit of code \fB\s-1NOT\s0 \s-1TO\s0 \s-1USE\s0\fR is this:
.PP
.Vb 2
\&    sleep(3) while -e "file.lock";      # PLEASE DO NOT USE
\&    open(LCK, "> file.lock");           # THIS BROKEN CODE
.Ve
This is a classic race condition: you take two steps to do something
which must be done in one.  That's why computer hardware provides an
atomic test-and-set instruction.   In theory, this \*(L"ought\*(R" to work:
.PP
.Vb 2
\&    sysopen(FH, "file.lock", O_WRONLY|O_EXCL|O_CREAT)
\&                or die "can't open  file.lock: $!":
.Ve
except that lamentably, file creation (and deletion) is not atomic
over \s-1NFS\s0, so this won't work (at least, not every time) over the net.
Various schemes involving \fIlink()\fR have been suggested, but
these tend to involve busy-wait, which is also subdesirable.
.Sh "I still don't get locking.  I just want to increment the number in the file.  How can I do this?"
.IX Subsection "I still don't get locking.  I just want to increment the number in the file.  How can I do this?"
Didn't anyone ever tell you web-page hit counters were useless?
They don't count number of hits, they're a waste of time, and they serve
only to stroke the writer's vanity.  It's better to pick a random number;
they're more realistic.
.PP
Anyway, this is what you can do if you can't help yourself.
.PP
.Vb 8
\&    use Fcntl qw(:DEFAULT :flock);
\&    sysopen(FH, "numfile", O_RDWR|O_CREAT)       or die "can't open numfile: $!";
\&    flock(FH, LOCK_EX)                           or die "can't flock numfile: $!";
\&    $num = <FH> || 0;
\&    seek(FH, 0, 0)                               or die "can't rewind numfile: $!";
\&    truncate(FH, 0)                              or die "can't truncate numfile: $!";
\&    (print FH $num+1, "\en")                      or die "can't write numfile: $!";
\&    close FH                                     or die "can't close numfile: $!";
.Ve
Here's a much better web-page hit counter:
.PP
.Vb 1
\&    $hits = int( (time() - 850_000_000) / rand(1_000) );
.Ve
If the count doesn't impress your friends, then the code might.  :\-)
.Sh "How do I randomly update a binary file?"
.IX Subsection "How do I randomly update a binary file?"
If you're just trying to patch a binary, in many cases something as
simple as this works:
.PP
.Vb 1
\&    perl -i -pe 's{window manager}{window mangler}g' /usr/bin/emacs
.Ve
However, if you have fixed sized records, then you might do something more
like this:
.PP
.Vb 9
\&    $RECSIZE = 220; # size of record, in bytes
\&    $recno   = 37;  # which record to update
\&    open(FH, "+<somewhere") || die "can't update somewhere: $!";
\&    seek(FH, $recno * $RECSIZE, 0);
\&    read(FH, $record, $RECSIZE) == $RECSIZE || die "can't read record $recno: $!";
\&    # munge the record
\&    seek(FH, -$RECSIZE, 1);
\&    print FH $record;
\&    close FH;
.Ve
Locking and error checking are left as an exercise for the reader.
Don't forget them or you'll be quite sorry.
.Sh "How do I get a file's timestamp in perl?"
.IX Subsection "How do I get a file's timestamp in perl?"
If you want to retrieve the time at which the file was last read,
written, or had its meta-data (owner, etc) changed, you use the \fB\-M\fR,
\&\fB\-A\fR, or \fB\-C\fR filetest operations as documented in the perlfunc manpage.  These
retrieve the age of the file (measured against the start-time of your
program) in days as a floating point number.  To retrieve the \*(L"raw\*(R"
time in seconds since the epoch, you would call the stat function,
then use \fIlocaltime()\fR, \fIgmtime()\fR, or \s-1POSIX:\\fIs0:strftime()\fR to convert this
into human-readable form.
.PP
Here's an example:
.PP
.Vb 3
\&    $write_secs = (stat($file))[9];
\&    printf "file %s updated at %s\en", $file,
\&        scalar localtime($write_secs);
.Ve
If you prefer something more legible, use the File::stat module
(part of the standard distribution in version 5.004 and later):
.PP
.Vb 5
\&    # error checking left as an exercise for reader.
\&    use File::stat;
\&    use Time::localtime;
\&    $date_string = ctime(stat($file)->mtime);
\&    print "file $file updated at $date_string\en";
.Ve
The \s-1POSIX:\\fIs0:strftime()\fR approach has the benefit of being,
in theory, independent of the current locale.  See the perllocale manpage
for details.
.Sh "How do I set a file's timestamp in perl?"
.IX Subsection "How do I set a file's timestamp in perl?"
You use the \fIutime()\fR function documented in the utime entry in the perlfunc manpage.
By way of example, here's a little program that copies the
read and write times from its first argument to all the rest
of them.
.PP
.Vb 6
\&    if (@ARGV < 2) {
\&        die "usage: cptimes timestamp_file other_files ...\en";
\&    }
\&    $timestamp = shift;
\&    ($atime, $mtime) = (stat($timestamp))[8,9];
\&    utime $atime, $mtime, @ARGV;
.Ve
Error checking is, as usual, left as an exercise for the reader.
.PP
Note that \fIutime()\fR currently doesn't work correctly with Win95/NT
ports.  A bug has been reported.  Check it carefully before using
\&\fIutime()\fR on those platforms.
.Sh "How do I print to more than one file at once?"
.IX Subsection "How do I print to more than one file at once?"
If you only have to do this once, you can do this:
.PP
.Vb 1
\&    for $fh (FH1, FH2, FH3) { print $fh "whatever\en" }
.Ve
To connect up to one filehandle to several output filehandles, it's
easiest to use the \fItee\fR\|(1) program if you have it, and let it take care
of the multiplexing:
.PP
.Vb 1
\&    open (FH, "| tee file1 file2 file3");
.Ve
Or even:
.PP
.Vb 4
\&    # make STDOUT go to three files, plus original STDOUT
\&    open (STDOUT, "| tee file1 file2 file3") or die "Teeing off: $!\en";
\&    print "whatever\en"                       or die "Writing: $!\en";
\&    close(STDOUT)                            or die "Closing: $!\en";
.Ve
Otherwise you'll have to write your own multiplexing print
function\*(--or your own tee program\*(--or use Tom Christiansen's,
at http://www.perl.com/CPAN/authors/id/TOMC/scripts/tct.gz , which is
written in Perl and offers much greater functionality
than the stock version.
.Sh "How can I read in an entire file all at once?"
.IX Subsection "How can I read in an entire file all at once?"
The customary Perl approach for processing all the lines in a file is to
do so one line at a time:
.PP
.Vb 6
\&    open (INPUT, $file)         || die "can't open $file: $!";
\&    while (<INPUT>) {
\&        chomp;
\&        # do something with $_
\&    } 
\&    close(INPUT)                || die "can't close $file: $!";
.Ve
This is tremendously more efficient than reading the entire file into
memory as an array of lines and then processing it one element at a time,
which is often\*(--if not almost always\*(--the wrong approach.  Whenever
you see someone do this:
.PP
.Vb 1
\&    @lines = <INPUT>;
.Ve
you should think long and hard about why you need everything loaded
at once.  It's just not a scalable solution.  You might also find it
more fun to use the standard DB_File module's \f(CW$DB_RECNO\fR bindings,
which allow you to tie an array to a file so that accessing an element
the array actually accesses the corresponding line in the file.
.PP
On very rare occasion, you may have an algorithm that demands that
the entire file be in memory at once as one scalar.  The simplest solution
to that is
.PP
.Vb 1
\&    $var = `cat $file`;
.Ve
Being in scalar context, you get the whole thing.  In list context,
you'd get a list of all the lines:
.PP
.Vb 1
\&    @lines = `cat $file`;
.Ve
This tiny but expedient solution is neat, clean, and portable to
all systems on which decent tools have been installed.  For those
who prefer not to use the toolbox, you can of course read the file
manually, although this makes for more complicated code.
.PP
.Vb 5
\&    {
\&        local(*INPUT, $/);
\&        open (INPUT, $file)     || die "can't open $file: $!";
\&        $var = <INPUT>;
\&    }
.Ve
That temporarily undefs your record separator, and will automatically 
close the file at block exit.  If the file is already open, just use this:
.PP
.Vb 1
\&    $var = do { local $/; <INPUT> };
.Ve
.Sh "How can I read in a file by paragraphs?"
.IX Subsection "How can I read in a file by paragraphs?"
Use the \f(CW\*(C`$/\*(C'\fR variable (see the perlvar manpage for details).  You can either
set it to \f(CW\*(C`""\*(C'\fR to eliminate empty paragraphs (\f(CW\*(C`"abc\en\en\en\endef"\*(C'\fR,
for instance, gets treated as two paragraphs and not three), or
\&\f(CW\*(C`"\en\en"\*(C'\fR to accept empty paragraphs.
.PP
Note that a blank line must have no blanks in it.  Thus \f(CW\*(C`"fred\en
\&\enstuff\en\en"\*(C'\fR is one paragraph, but \f(CW\*(C`"fred\en\enstuff\en\en"\*(C'\fR is two.
.Sh "How can I read a single character from a file?  From the keyboard?"
.IX Subsection "How can I read a single character from a file?  From the keyboard?"
You can use the builtin \f(CW\*(C`getc()\*(C'\fR function for most filehandles, but
it won't (easily) work on a terminal device.  For \s-1STDIN\s0, either use
the Term::ReadKey module from \s-1CPAN\s0 or use the sample code in
the getc entry in the perlfunc manpage.
.PP
If your system supports the portable operating system programming
interface (\s-1POSIX\s0), you can use the following code, which you'll note
turns off echo processing as well.
.PP
.Vb 10
\&    #!/usr/bin/perl -w
\&    use strict;
\&    $| = 1;
\&    for (1..4) {
\&        my $got;
\&        print "gimme: ";
\&        $got = getone();
\&        print "--> $got\en";
\&    }
\&    exit;
.Ve
.Vb 2
\&    BEGIN {
\&        use POSIX qw(:termios_h);
.Ve
.Vb 1
\&        my ($term, $oterm, $echo, $noecho, $fd_stdin);
.Ve
.Vb 1
\&        $fd_stdin = fileno(STDIN);
.Ve
.Vb 3
\&        $term     = POSIX::Termios->new();
\&        $term->getattr($fd_stdin);
\&        $oterm     = $term->getlflag();
.Ve
.Vb 2
\&        $echo     = ECHO | ECHOK | ICANON;
\&        $noecho   = $oterm & ~$echo;
.Ve
.Vb 5
\&        sub cbreak {
\&            $term->setlflag($noecho);
\&            $term->setcc(VTIME, 1);
\&            $term->setattr($fd_stdin, TCSANOW);
\&        }
.Ve
.Vb 5
\&        sub cooked {
\&            $term->setlflag($oterm);
\&            $term->setcc(VTIME, 0);
\&            $term->setattr($fd_stdin, TCSANOW);
\&        }
.Ve
.Vb 7
\&        sub getone {
\&            my $key = '';
\&            cbreak();
\&            sysread(STDIN, $key, 1);
\&            cooked();
\&            return $key;
\&        }
.Ve
.Vb 1
\&    }
.Ve
.Vb 1
\&    END { cooked() }
.Ve
The Term::ReadKey module from \s-1CPAN\s0 may be easier to use.  Recent versions
include also support for non-portable systems as well.
.PP
.Vb 8
\&    use Term::ReadKey;
\&    open(TTY, "</dev/tty");
\&    print "Gimme a char: ";
\&    ReadMode "raw";
\&    $key = ReadKey 0, *TTY;
\&    ReadMode "normal";
\&    printf "\enYou said %s, char number %03d\en",
\&        $key, ord $key;
.Ve
For legacy \s-1DOS\s0 systems, Dan Carson <dbc@tc.fluke.COM> reports the following:
.PP
To put the \s-1PC\s0 in \*(L"raw\*(R" mode, use ioctl with some magic numbers gleaned
from msdos.c (Perl source file) and Ralf Brown's interrupt list (comes
across the net every so often):
.PP
.Vb 3
\&    $old_ioctl = ioctl(STDIN,0,0);     # Gets device info
\&    $old_ioctl &= 0xff;
\&    ioctl(STDIN,1,$old_ioctl | 32);    # Writes it back, setting bit 5
.Ve
Then to read a single character:
.PP
.Vb 1
\&    sysread(STDIN,$c,1);               # Read a single character
.Ve
And to put the \s-1PC\s0 back to \*(L"cooked\*(R" mode:
.PP
.Vb 1
\&    ioctl(STDIN,1,$old_ioctl);         # Sets it back to cooked mode.
.Ve
So now you have \f(CW$c\fR.  If \f(CW\*(C`ord($c) == 0\*(C'\fR, you have a two byte code, which
means you hit a special key.  Read another byte with \f(CW\*(C`sysread(STDIN,$c,1)\*(C'\fR,
and that value tells you what combination it was according to this
table:
.PP
.Vb 1
\&    # PC 2-byte keycodes = ^@ + the following:
.Ve
.Vb 17
\&    # HEX     KEYS
\&    # ---     ----
\&    # 0F      SHF TAB
\&    # 10-19   ALT QWERTYUIOP
\&    # 1E-26   ALT ASDFGHJKL
\&    # 2C-32   ALT ZXCVBNM
\&    # 3B-44   F1-F10
\&    # 47-49   HOME,UP,PgUp
\&    # 4B      LEFT
\&    # 4D      RIGHT
\&    # 4F-53   END,DOWN,PgDn,Ins,Del
\&    # 54-5D   SHF F1-F10
\&    # 5E-67   CTR F1-F10
\&    # 68-71   ALT F1-F10
\&    # 73-77   CTR LEFT,RIGHT,END,PgDn,HOME
\&    # 78-83   ALT 1234567890-=
\&    # 84      CTR PgUp
.Ve
This is all trial and error I did a long time ago; I hope I'm reading the
file that worked...
.Sh "How can I tell whether there's a character waiting on a filehandle?"
.IX Subsection "How can I tell whether there's a character waiting on a filehandle?"
The very first thing you should do is look into getting the Term::ReadKey
extension from \s-1CPAN\s0.  As we mentioned earlier, it now even has limited
support for non-portable (read: not open systems, closed, proprietary,
not \s-1POSIX\s0, not Unix, etc) systems.
.PP
You should also check out the Frequently Asked Questions list in
comp.unix.* for things like this: the answer is essentially the same.
It's very system dependent.  Here's one solution that works on \s-1BSD\s0
systems:
.PP
.Vb 5
\&    sub key_ready {
\&        my($rin, $nfd);
\&        vec($rin, fileno(STDIN), 1) = 1;
\&        return $nfd = select($rin,undef,undef,0);
\&    }
.Ve
If you want to find out how many characters are waiting, there's
also the \s-1FIONREAD\s0 ioctl call to be looked at.  The \fIh2ph\fR tool that
comes with Perl tries to convert C include files to Perl code, which
can be \f(CW\*(C`require\*(C'\fRd.  \s-1FIONREAD\s0 ends up defined as a function in the
\&\fIsys/ioctl.ph\fR file:
.PP
.Vb 1
\&    require 'sys/ioctl.ph';
.Ve
.Vb 3
\&    $size = pack("L", 0);
\&    ioctl(FH, FIONREAD(), $size)    or die "Couldn't call ioctl: $!\en";
\&    $size = unpack("L", $size);
.Ve
If \fIh2ph\fR wasn't installed or doesn't work for you, you can
\&\fIgrep\fR the include files by hand:
.PP
.Vb 2
\&    % grep FIONREAD /usr/include/*/*
\&    /usr/include/asm/ioctls.h:#define FIONREAD      0x541B
.Ve
Or write a small C program using the editor of champions:
.PP
.Vb 9
\&    % cat > fionread.c
\&    #include <sys/ioctl.h>
\&    main() {
\&        printf("%#08x\en", FIONREAD);
\&    }
\&    ^D
\&    % cc -o fionread fionread.c
\&    % ./fionread
\&    0x4004667f
.Ve
And then hard-code it, leaving porting as an exercise to your successor.
.PP
.Vb 1
\&    $FIONREAD = 0x4004667f;         # XXX: opsys dependent
.Ve
.Vb 3
\&    $size = pack("L", 0);
\&    ioctl(FH, $FIONREAD, $size)     or die "Couldn't call ioctl: $!\en";
\&    $size = unpack("L", $size);
.Ve
\&\s-1FIONREAD\s0 requires a filehandle connected to a stream, meaning that sockets,
pipes, and tty devices work, but \fInot\fR files.
.if n .Sh "How do I do a \f(CW""tail \-f""\fP in perl?"
.el .Sh "How do I do a \f(CWtail \-f\fP in perl?"
.IX Subsection "How do I do a tail -f in perl?"
First try
.PP
.Vb 1
\&    seek(GWFILE, 0, 1);
.Ve
The statement \f(CW\*(C`seek(GWFILE, 0, 1)\*(C'\fR doesn't change the current position,
but it does clear the end-of-file condition on the handle, so that the
next <\s-1GWFILE\s0> makes Perl try again to read something.
.PP
If that doesn't work (it relies on features of your stdio implementation),
then you need something more like this:
.PP
.Vb 7
\&        for (;;) {
\&          for ($curpos = tell(GWFILE); <GWFILE>; $curpos = tell(GWFILE)) {
\&            # search for some stuff and put it into files
\&          }
\&          # sleep for a while
\&          seek(GWFILE, $curpos, 0);  # seek to where we had been
\&        }
.Ve
If this still doesn't work, look into the \s-1POSIX\s0 module.  \s-1POSIX\s0 defines
the \fIclearerr()\fR method, which can remove the end of file condition on a
filehandle.  The method: read until end of file, \fIclearerr()\fR, read some
more.  Lather, rinse, repeat.
.PP
There's also a File::Tail module from \s-1CPAN\s0.
.Sh "How do I \fIdup()\fP a filehandle in Perl?"
.IX Subsection "How do I dup() a filehandle in Perl?"
If you check the open entry in the perlfunc manpage, you'll see that several of the ways
to call \fIopen()\fR should do the trick.  For example:
.PP
.Vb 2
\&    open(LOG, ">>/tmp/logfile");
\&    open(STDERR, ">&LOG");
.Ve
Or even with a literal numeric descriptor:
.PP
.Vb 2
\&   $fd = $ENV{MHCONTEXTFD};
\&   open(MHCONTEXT, "<&=$fd");   # like fdopen(3S)
.Ve
Note that \*(L"<&STDIN\*(R" makes a copy, but \*(L"<&=STDIN\*(R" make
an alias.  That means if you close an aliased handle, all
aliases become inaccessible.  This is not true with 
a copied one.
.PP
Error checking, as always, has been left as an exercise for the reader.
.Sh "How do I close a file descriptor by number?"
.IX Subsection "How do I close a file descriptor by number?"
This should rarely be necessary, as the Perl \fIclose()\fR function is to be
used for things that Perl opened itself, even if it was a dup of a
numeric descriptor as with \s-1MHCONTEXT\s0 above.  But if you really have
to, you may be able to do this:
.PP
.Vb 3
\&    require 'sys/syscall.ph';
\&    $rc = syscall(&SYS_close, $fd + 0);  # must force numeric
\&    die "can't sysclose $fd: $!" unless $rc == -1;
.Ve
Or, just use the fdopen(3S) feature of \fIopen()\fR:
.PP
.Vb 5
\&    { 
\&        local *F; 
\&        open F, "<&=$fd" or die "Cannot reopen fd=$fd: $!";
\&        close F;
\&    }
.Ve
.if n .Sh "Why can't I use ""C:\etemp\efoo"" in \s-1DOS\s0 paths?  What doesn't `C:\etemp\efoo.exe` work?"
.el .Sh "Why can't I use ``C:\etemp\efoo'' in \s-1DOS\s0 paths?  What doesn't `C:\etemp\efoo.exe` work?"
.IX Subsection "Why can't I use "C:tempfoo in DOS paths?  What doesn't `C:tempfoo.exe` work?"
Whoops!  You just put a tab and a formfeed into that filename!
Remember that within double quoted strings (\*(L"like\ethis\*(R"), the
backslash is an escape character.  The full list of these is in
the Quote and Quote-like Operators entry in the perlop manpage.  Unsurprisingly, you don't
have a file called \*(L"c:(tab)emp(formfeed)oo\*(R" or
\&\*(L"c:(tab)emp(formfeed)oo.exe\*(R" on your legacy \s-1DOS\s0 filesystem.
.PP
Either single-quote your strings, or (preferably) use forward slashes.
Since all \s-1DOS\s0 and Windows versions since something like \s-1MS-DOS\s0 2.0 or so
have treated \f(CW\*(C`/\*(C'\fR and \f(CW\*(C`\e\*(C'\fR the same in a path, you might as well use the
one that doesn't clash with Perl\*(--or the \s-1POSIX\s0 shell, \s-1ANSI\s0 C and \*(C+,
awk, Tcl, Java, or Python, just to mention a few.  \s-1POSIX\s0 paths
are more portable, too.
.if n .Sh "Why doesn't glob(""*.*"") get all the files?"
.el .Sh "Why doesn't glob(``*.*'') get all the files?"
.IX Subsection "Why doesn't glob("*.*) get all the files?"
Because even on non-Unix ports, Perl's glob function follows standard
Unix globbing semantics.  You'll need \f(CW\*(C`glob("*")\*(C'\fR to get all (non-hidden)
files.  This makes \fIglob()\fR portable even to legacy systems.  Your
port may include proprietary globbing functions as well.  Check its
documentation for details.
.if n .Sh "Why does Perl let me delete read-only files?  Why does \f(CW""\-i""\fP clobber protected files?  Isn't this a bug in Perl?"
.el .Sh "Why does Perl let me delete read-only files?  Why does \f(CW\-i\fP clobber protected files?  Isn't this a bug in Perl?"
.IX Subsection "Why does Perl let me delete read-only files?  Why does -i clobber protected files?  Isn't this a bug in Perl?"
This is elaborately and painstakingly described in the \*(L"Far More Than
You Ever Wanted To Know\*(R" in
http://www.perl.com/CPAN/doc/FMTEYEWTK/file-dir-perms .
.PP
The executive summary: learn how your filesystem works.  The
permissions on a file say what can happen to the data in that file.
The permissions on a directory say what can happen to the list of
files in that directory.  If you delete a file, you're removing its
name from the directory (so the operation depends on the permissions
of the directory, not of the file).  If you try to write to the file,
the permissions of the file govern whether you're allowed to.
.Sh "How do I select a random line from a file?"
.IX Subsection "How do I select a random line from a file?"
Here's an algorithm from the Camel Book:
.PP
.Vb 2
\&    srand;
\&    rand($.) < 1 && ($line = $_) while <>;
.Ve
This has a significant advantage in space over reading the whole
file in.  A simple proof by induction is available upon 
request if you doubt the algorithm's correctness.
.Sh "Why do I get weird spaces when I print an array of lines?"
.IX Subsection "Why do I get weird spaces when I print an array of lines?"
Saying
.PP
.Vb 1
\&    print "@lines\en";
.Ve
joins together the elements of \f(CW\*(C`@lines\*(C'\fR with a space between them.
If \f(CW\*(C`@lines\*(C'\fR were \f(CW\*(C`("little", "fluffy", "clouds")\*(C'\fR then the above
statement would print
.PP
.Vb 1
\&    little fluffy clouds
.Ve
but if each element of \f(CW\*(C`@lines\*(C'\fR was a line of text, ending a newline
character \f(CW\*(C`("little\en", "fluffy\en", "clouds\en")\*(C'\fR then it would print:
.PP
.Vb 3
\&    little
\&     fluffy
\&     clouds
.Ve
If your array contains lines, just print them:
.PP
.Vb 1
\&    print @lines;
.Ve
.SH "AUTHOR AND COPYRIGHT"
.IX Header "AUTHOR AND COPYRIGHT"
Copyright (c) 1997\-1999 Tom Christiansen and Nathan Torkington.
All rights reserved.
.PP
When included as an integrated part of the Standard Distribution
of Perl or of its documentation (printed or otherwise), this works is
covered under Perl's Artistic License.  For separate distributions of
all or part of this \s-1FAQ\s0 outside of that, see the perlfaq manpage.
.PP
Irrespective of its distribution, all code examples here are in the public
domain.  You are permitted and encouraged to use this code and any
derivatives thereof in your own programs for fun or for profit as you
see fit.  A simple comment in the code giving credit to the \s-1FAQ\s0 would
be courteous but is not required.
