.\" Automatically generated by Pod::Man version 1.15
.\" Fri Apr 20 12:59:53 2001
.\"
.\" Standard preamble:
.\" ======================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R

.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used
.\" to do unbreakable dashes and therefore won't be available.  \*(C` and
.\" \*(C' expand to `' in nroff, nothing in troff, for use with C<>
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr
.\" for titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and
.\" index entries marked with X<> in POD.  Of course, you'll have to process
.\" the output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it
.\" makes way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.bd B 3
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ======================================================================
.\"
.IX Title "PERLFAQ4 1"
.TH PERLFAQ4 1 "perl v5.6.1" "2001-04-08" "Perl Programmers Reference Guide"
.UC
.SH "NAME"
perlfaq4 \- Data Manipulation ($Revision: 1.49 $, \f(CW$Date:\fR 1999/05/23 20:37:49 $)
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The section of the \s-1FAQ\s0 answers questions related to the manipulation
of data as numbers, dates, strings, arrays, hashes, and miscellaneous
data issues.
.SH "Data: Numbers"
.IX Header "Data: Numbers"
.Sh "Why am I getting long decimals (eg, 19.9499999999999) instead of the numbers I should be getting (eg, 19.95)?"
.IX Subsection "Why am I getting long decimals (eg, 19.9499999999999) instead of the numbers I should be getting (eg, 19.95)?"
The infinite set that a mathematician thinks of as the real numbers can
only be approximated on a computer, since the computer only has a finite
number of bits to store an infinite number of, um, numbers.
.PP
Internally, your computer represents floating-point numbers in binary.
Floating-point numbers read in from a file or appearing as literals
in your program are converted from their decimal floating-point
representation (eg, 19.95) to an internal binary representation.
.PP
However, 19.95 can't be precisely represented as a binary
floating-point number, just like 1/3 can't be exactly represented as a
decimal floating-point number.  The computer's binary representation
of 19.95, therefore, isn't exactly 19.95.
.PP
When a floating-point number gets printed, the binary floating-point
representation is converted back to decimal.  These decimal numbers
are displayed in either the format you specify with \fIprintf()\fR, or the
current output format for numbers.  (See the section on "$#" in the perlvar manpage if you use
print.  \f(CW\*(C`$#\*(C'\fR has a different default value in Perl5 than it did in
Perl4.  Changing \f(CW\*(C`$#\*(C'\fR yourself is deprecated.)
.PP
This affects \fBall\fR computer languages that represent decimal
floating-point numbers in binary, not just Perl.  Perl provides
arbitrary-precision decimal numbers with the Math::BigFloat module
(part of the standard Perl distribution), but mathematical operations
are consequently slower.
.PP
To get rid of the superfluous digits, just use a format (eg,
\&\f(CW\*(C`printf("%.2f", 19.95)\*(C'\fR) to get the required precision.
See the Floating-point Arithmetic entry in the perlop manpage.  
.Sh "Why isn't my octal data interpreted correctly?"
.IX Subsection "Why isn't my octal data interpreted correctly?"
Perl only understands octal and hex numbers as such when they occur
as literals in your program.  If they are read in from somewhere and
assigned, no automatic conversion takes place.  You must explicitly
use \fIoct()\fR or \fIhex()\fR if you want the values converted.  \fIoct()\fR interprets
both hex (\*(L"0x350\*(R") numbers and octal ones (\*(L"0350\*(R" or even without the
leading \*(L"0\*(R", like \*(L"377\*(R"), while \fIhex()\fR only converts hexadecimal ones,
with or without a leading \*(L"0x\*(R", like \*(L"0x255\*(R", \*(L"3A\*(R", \*(L"ff\*(R", or \*(L"deadbeef\*(R".
.PP
This problem shows up most often when people try using \fIchmod()\fR, \fImkdir()\fR,
\&\fIumask()\fR, or \fIsysopen()\fR, which all want permissions in octal.
.PP
.Vb 2
\&    chmod(644,  $file); # WRONG -- perl -w catches this
\&    chmod(0644, $file); # right
.Ve
.Sh "Does Perl have a \fIround()\fP function?  What about \fIceil()\fP and \fIfloor()\fP?  Trig functions?"
.IX Subsection "Does Perl have a round() function?  What about ceil() and floor()?  Trig functions?"
Remember that \fIint()\fR merely truncates toward 0.  For rounding to a
certain number of digits, \fIsprintf()\fR or \fIprintf()\fR is usually the easiest
route.
.PP
.Vb 1
\&    printf("%.3f", 3.1415926535);       # prints 3.142
.Ve
The \s-1POSIX\s0 module (part of the standard Perl distribution) implements
\&\fIceil()\fR, \fIfloor()\fR, and a number of other mathematical and trigonometric
functions.
.PP
.Vb 3
\&    use POSIX;
\&    $ceil   = ceil(3.5);                        # 4
\&    $floor  = floor(3.5);                       # 3
.Ve
In 5.000 to 5.003 perls, trigonometry was done in the Math::Complex
module.  With 5.004, the Math::Trig module (part of the standard Perl
distribution) implements the trigonometric functions. Internally it
uses the Math::Complex module and some functions can break out from
the real axis into the complex plane, for example the inverse sine of
2.
.PP
Rounding in financial applications can have serious implications, and
the rounding method used should be specified precisely.  In these
cases, it probably pays not to trust whichever system rounding is
being used by Perl, but to instead implement the rounding function you
need yourself.
.PP
To see why, notice how you'll still have an issue on half-way-point
alternation:
.PP
.Vb 1
\&    for ($i = 0; $i < 1.01; $i += 0.05) { printf "%.1f ",$i}
.Ve
.Vb 2
\&    0.0 0.1 0.1 0.2 0.2 0.2 0.3 0.3 0.4 0.4 0.5 0.5 0.6 0.7 0.7 
\&    0.8 0.8 0.9 0.9 1.0 1.0
.Ve
Don't blame Perl.  It's the same as in C.  \s-1IEEE\s0 says we have to do this.
Perl numbers whose absolute values are integers under 2**31 (on 32 bit
machines) will work pretty much like mathematical integers.  Other numbers
are not guaranteed.
.Sh "How do I convert bits into ints?"
.IX Subsection "How do I convert bits into ints?"
To turn a string of 1s and 0s like \f(CW\*(C`10110110\*(C'\fR into a scalar containing
its binary value, use the \fIpack()\fR and \fIunpack()\fR functions (documented in
the pack entry in the perlfunc manpage and the unpack entry in the perlfunc manpage):
.PP
.Vb 1
\&    $decimal = unpack('c', pack('B8', '10110110'));
.Ve
This packs the string \f(CW\*(C`10110110\*(C'\fR into an eight bit binary structure.
This is then unpacked as a character, which returns its ordinal value.
.PP
This does the same thing:
.PP
.Vb 1
\&    $decimal = ord(pack('B8', '10110110'));
.Ve
Here's an example of going the other way:
.PP
.Vb 1
\&    $binary_string = unpack('B*', "\ex29");
.Ve
.Sh "Why doesn't & work the way I want it to?"
.IX Subsection "Why doesn't & work the way I want it to?"
The behavior of binary arithmetic operators depends on whether they're
used on numbers or strings.  The operators treat a string as a series
of bits and work with that (the string \f(CW\*(C`"3"\*(C'\fR is the bit pattern
\&\f(CW\*(C`00110011\*(C'\fR).  The operators work with the binary form of a number
(the number \f(CW\*(C`3\*(C'\fR is treated as the bit pattern \f(CW\*(C`00000011\*(C'\fR).
.PP
So, saying \f(CW\*(C`11 & 3\*(C'\fR performs the \*(L"and\*(R" operation on numbers (yielding
\&\f(CW\*(C`1\*(C'\fR).  Saying \f(CW\*(C`"11" & "3"\*(C'\fR performs the \*(L"and\*(R" operation on strings
(yielding \f(CW\*(C`"1"\*(C'\fR).
.PP
Most problems with \f(CW\*(C`&\*(C'\fR and \f(CW\*(C`|\*(C'\fR arise because the programmer thinks
they have a number but really it's a string.  The rest arise because
the programmer says:
.PP
.Vb 3
\&    if ("\e020\e020" & "\e101\e101") {
\&        # ...
\&    }
.Ve
but a string consisting of two null bytes (the result of \f(CW\*(C`"\e020\e020"
& "\e101\e101"\*(C'\fR) is not a false value in Perl.  You need:
.PP
.Vb 3
\&    if ( ("\e020\e020" & "\e101\e101") !~ /[^\e000]/) {
\&        # ...
\&    }
.Ve
.Sh "How do I multiply matrices?"
.IX Subsection "How do I multiply matrices?"
Use the Math::Matrix or Math::MatrixReal modules (available from \s-1CPAN\s0)
or the \s-1PDL\s0 extension (also available from \s-1CPAN\s0).
.Sh "How do I perform an operation on a series of integers?"
.IX Subsection "How do I perform an operation on a series of integers?"
To call a function on each element in an array, and collect the
results, use:
.PP
.Vb 1
\&    @results = map { my_func($_) } @array;
.Ve
For example:
.PP
.Vb 1
\&    @triple = map { 3 * $_ } @single;
.Ve
To call a function on each element of an array, but ignore the
results:
.PP
.Vb 3
\&    foreach $iterator (@array) {
\&        some_func($iterator);
\&    }
.Ve
To call a function on each integer in a (small) range, you \fBcan\fR use:
.PP
.Vb 1
\&    @results = map { some_func($_) } (5 .. 25);
.Ve
but you should be aware that the \f(CW\*(C`..\*(C'\fR operator creates an array of
all integers in the range.  This can take a lot of memory for large
ranges.  Instead use:
.PP
.Vb 4
\&    @results = ();
\&    for ($i=5; $i < 500_005; $i++) {
\&        push(@results, some_func($i));
\&    }
.Ve
This situation has been fixed in Perl5.005. Use of \f(CW\*(C`..\*(C'\fR in a \f(CW\*(C`for\*(C'\fR
loop will iterate over the range, without creating the entire range.
.PP
.Vb 3
\&    for my $i (5 .. 500_005) {
\&        push(@results, some_func($i));
\&    }
.Ve
will not create a list of 500,000 integers.
.Sh "How can I output Roman numerals?"
.IX Subsection "How can I output Roman numerals?"
Get the http://www.perl.com/CPAN/modules/by-module/Roman module.
.Sh "Why aren't my random numbers random?"
.IX Subsection "Why aren't my random numbers random?"
If you're using a version of Perl before 5.004, you must call \f(CW\*(C`srand\*(C'\fR
once at the start of your program to seed the random number generator.
5.004 and later automatically call \f(CW\*(C`srand\*(C'\fR at the beginning.  Don't
call \f(CW\*(C`srand\*(C'\fR more than once\*(--you make your numbers less random, rather
than more.
.PP
Computers are good at being predictable and bad at being random
(despite appearances caused by bugs in your programs :\-).
http://www.perl.com/CPAN/doc/FMTEYEWTK/random , courtesy of Tom
Phoenix, talks more about this.  John von Neumann said, ``Anyone who
attempts to generate random numbers by deterministic means is, of
course, living in a state of sin.''
.PP
If you want numbers that are more random than \f(CW\*(C`rand\*(C'\fR with \f(CW\*(C`srand\*(C'\fR
provides, you should also check out the Math::TrulyRandom module from
\&\s-1CPAN\s0.  It uses the imperfections in your system's timer to generate
random numbers, but this takes quite a while.  If you want a better
pseudorandom generator than comes with your operating system, look at
``Numerical Recipes in C'' at http://www.nr.com/ .
.SH "Data: Dates"
.IX Header "Data: Dates"
.Sh "How do I find the week-of-the-year/day-of-the-year?"
.IX Subsection "How do I find the week-of-the-year/day-of-the-year?"
The day of the year is in the array returned by \fIlocaltime()\fR (see
the localtime entry in the perlfunc manpage):
.PP
.Vb 1
\&    $day_of_year = (localtime(time()))[7];
.Ve
or more legibly (in 5.004 or higher):
.PP
.Vb 2
\&    use Time::localtime;
\&    $day_of_year = localtime(time())->yday;
.Ve
You can find the week of the year by dividing this by 7:
.PP
.Vb 1
\&    $week_of_year = int($day_of_year / 7);
.Ve
Of course, this believes that weeks start at zero.  The Date::Calc
module from \s-1CPAN\s0 has a lot of date calculation functions, including
day of the year, week of the year, and so on.   Note that not
all businesses consider ``week 1'' to be the same; for example,
American businesses often consider the first week with a Monday
in it to be Work Week #1, despite \s-1ISO\s0 8601, which considers
\&\s-1WW1\s0 to be the first week with a Thursday in it.
.Sh "How do I find the current century or millennium?"
.IX Subsection "How do I find the current century or millennium?"
Use the following simple functions:
.PP
.Vb 6
\&    sub get_century    { 
\&        return int((((localtime(shift || time))[5] + 1999))/100);
\&    } 
\&    sub get_millennium { 
\&        return 1+int((((localtime(shift || time))[5] + 1899))/1000);
\&    }
.Ve
On some systems, you'll find that the \s-1POSIX\s0 module's \fIstrftime()\fR function
has been extended in a non-standard way to use a \f(CW\*(C`%C\*(C'\fR format, which they
sometimes claim is the \*(L"century\*(R".  It isn't, because on most such systems,
this is only the first two digits of the four-digit year, and thus cannot
be used to reliably determine the current century or millennium.
.Sh "How can I compare two dates and find the difference?"
.IX Subsection "How can I compare two dates and find the difference?"
If you're storing your dates as epoch seconds then simply subtract one
from the other.  If you've got a structured date (distinct year, day,
month, hour, minute, seconds values), then for reasons of accessibility,
simplicity, and efficiency, merely use either timelocal or timegm (from
the Time::Local module in the standard distribution) to reduce structured
dates to epoch seconds.  However, if you don't know the precise format of
your dates, then you should probably use either of the Date::Manip and
Date::Calc modules from \s-1CPAN\s0 before you go hacking up your own parsing
routine to handle arbitrary date formats.
.Sh "How can I take a string and turn it into epoch seconds?"
.IX Subsection "How can I take a string and turn it into epoch seconds?"
If it's a regular enough string that it always has the same format,
you can split it up and pass the parts to \f(CW\*(C`timelocal\*(C'\fR in the standard
Time::Local module.  Otherwise, you should look into the Date::Calc
and Date::Manip modules from \s-1CPAN\s0.
.Sh "How can I find the Julian Day?"
.IX Subsection "How can I find the Julian Day?"
Use the Time::JulianDay module (part of the Time-modules bundle
available from \s-1CPAN\s0.)
.PP
Before you immerse yourself too deeply in this, be sure to verify that it
is the \fIJulian\fR Day you really want.  Are you really just interested in
a way of getting serial days so that they can do date arithmetic?  If you
are interested in performing date arithmetic, this can be done using
either Date::Manip or Date::Calc, without converting to Julian Day first.
.PP
There is too much confusion on this issue to cover in this \s-1FAQ\s0, but the
term is applied (correctly) to a calendar now supplanted by the Gregorian
Calendar, with the Julian Calendar failing to adjust properly for leap
years on centennial years (among other annoyances).  The term is also used
(incorrectly) to mean: [1] days in the Gregorian Calendar; and [2] days
since a particular starting time or `epoch', usually 1970 in the Unix
world and 1980 in the MS-DOS/Windows world.  If you find that it is not
the first meaning that you really want, then check out the Date::Manip
and Date::Calc modules.  (Thanks to David Cassell for most of this text.)
.Sh "How do I find yesterday's date?"
.IX Subsection "How do I find yesterday's date?"
The \f(CW\*(C`time()\*(C'\fR function returns the current time in seconds since the
epoch.  Take twenty-four hours off that:
.PP
.Vb 1
\&    $yesterday = time() - ( 24 * 60 * 60 );
.Ve
Then you can pass this to \f(CW\*(C`localtime()\*(C'\fR and get the individual year,
month, day, hour, minute, seconds values.
.PP
Note very carefully that the code above assumes that your days are
twenty-four hours each.  For most people, there are two days a year
when they aren't: the switch to and from summer time throws this off.
A solution to this issue is offered by Russ Allbery.
.PP
.Vb 39
\&    sub yesterday {
\&        my $now  = defined $_[0] ? $_[0] : time;
\&        my $then = $now - 60 * 60 * 24;
\&        my $ndst = (localtime $now)[8] > 0;
\&        my $tdst = (localtime $then)[8] > 0;
\&        $then - ($tdst - $ndst) * 60 * 60;
\&    }
\&    # Should give you "this time yesterday" in seconds since epoch relative to
\&    # the first argument or the current time if no argument is given and
\&    # suitable for passing to localtime or whatever else you need to do with
\&    # it.  $ndst is whether we're currently in daylight savings time; $tdst is
\&    # whether the point 24 hours ago was in daylight savings time.  If $tdst
\&    # and $ndst are the same, a boundary wasn't crossed, and the correction
\&    # will subtract 0.  If $tdst is 1 and $ndst is 0, subtract an hour more
\&    # from yesterday's time since we gained an extra hour while going off
\&    # daylight savings time.  If $tdst is 0 and $ndst is 1, subtract a
\&    # negative hour (add an hour) to yesterday's time since we lost an hour.
\&    #
\&    # All of this is because during those days when one switches off or onto
\&    # DST, a "day" isn't 24 hours long; it's either 23 or 25.
\&    #
\&    # The explicit settings of $ndst and $tdst are necessary because localtime
\&    # only says it returns the system tm struct, and the system tm struct at
\&    # least on Solaris doesn't guarantee any particular positive value (like,
\&    # say, 1) for isdst, just a positive value.  And that value can
\&    # potentially be negative, if DST information isn't available (this sub
\&    # just treats those cases like no DST).
\&    #
\&    # Note that between 2am and 3am on the day after the time zone switches
\&    # off daylight savings time, the exact hour of "yesterday" corresponding
\&    # to the current hour is not clearly defined.  Note also that if used
\&    # between 2am and 3am the day after the change to daylight savings time,
\&    # the result will be between 3am and 4am of the previous day; it's
\&    # arguable whether this is correct.
\&    #
\&    # This sub does not attempt to deal with leap seconds (most things don't).
\&    #
\&    # Copyright relinquished 1999 by Russ Allbery <rra@stanford.edu>
\&    # This code is in the public domain
.Ve
.Sh "Does Perl have a Year 2000 problem?  Is Perl Y2K compliant?"
.IX Subsection "Does Perl have a Year 2000 problem?  Is Perl Y2K compliant?"
Short answer: No, Perl does not have a Year 2000 problem.  Yes, Perl is
Y2K compliant (whatever that means).  The programmers you've hired to
use it, however, probably are not.
.PP
Long answer: The question belies a true understanding of the issue.
Perl is just as Y2K compliant as your pencil\*(--no more, and no less.
Can you use your pencil to write a non-Y2K-compliant memo?  Of course
you can.  Is that the pencil's fault?  Of course it isn't.
.PP
The date and time functions supplied with Perl (gmtime and localtime)
supply adequate information to determine the year well beyond 2000
(2038 is when trouble strikes for 32\-bit machines).  The year returned
by these functions when used in a list context is the year minus 1900.
For years between 1910 and 1999 this \fIhappens\fR to be a 2\-digit decimal
number. To avoid the year 2000 problem simply do not treat the year as
a 2\-digit number.  It isn't.
.PP
When \fIgmtime()\fR and \fIlocaltime()\fR are used in scalar context they return
a timestamp string that contains a fully-expanded year.  For example,
\&\f(CW\*(C`$timestamp = gmtime(1005613200)\*(C'\fR sets \f(CW$timestamp\fR to \*(L"Tue Nov 13 01:00:00
2001\*(R".  There's no year 2000 problem here.
.PP
That doesn't mean that Perl can't be used to create non-Y2K compliant
programs.  It can.  But so can your pencil.  It's the fault of the user,
not the language.  At the risk of inflaming the \s-1NRA:\s0 ``Perl doesn't
break Y2K, people do.''  See http://language.perl.com/news/y2k.html for
a longer exposition.
.SH "Data: Strings"
.IX Header "Data: Strings"
.Sh "How do I validate input?"
.IX Subsection "How do I validate input?"
The answer to this question is usually a regular expression, perhaps
with auxiliary logic.  See the more specific questions (numbers, mail
addresses, etc.) for details.
.Sh "How do I unescape a string?"
.IX Subsection "How do I unescape a string?"
It depends just what you mean by ``escape''.  \s-1URL\s0 escapes are dealt
with in the perlfaq9 manpage.  Shell escapes with the backslash (\f(CW\*(C`\e\*(C'\fR)
character are removed with
.PP
.Vb 1
\&    s/\e\e(.)/$1/g;
.Ve
This won't expand \f(CW\*(C`"\en"\*(C'\fR or \f(CW\*(C`"\et"\*(C'\fR or any other special escapes.
.Sh "How do I remove consecutive pairs of characters?"
.IX Subsection "How do I remove consecutive pairs of characters?"
To turn \f(CW\*(C`"abbcccd"\*(C'\fR into \f(CW\*(C`"abccd"\*(C'\fR:
.PP
.Vb 1
\&    s/(.)\e1/$1/g;       # add /s to include newlines
.Ve
Here's a solution that turns \*(L"abbcccd\*(R" to \*(L"abcd\*(R":
.PP
.Vb 1
\&    y///cs;     # y == tr, but shorter :-)
.Ve
.Sh "How do I expand function calls in a string?"
.IX Subsection "How do I expand function calls in a string?"
This is documented in the perlref manpage.  In general, this is fraught with
quoting and readability problems, but it is possible.  To interpolate
a subroutine call (in list context) into a string:
.PP
.Vb 1
\&    print "My sub returned @{[mysub(1,2,3)]} that time.\en";
.Ve
If you prefer scalar context, similar chicanery is also useful for
arbitrary expressions:
.PP
.Vb 1
\&    print "That yields ${\e($n + 5)} widgets\en";
.Ve
Version 5.004 of Perl had a bug that gave list context to the
expression in \f(CW\*(C`${...}\*(C'\fR, but this is fixed in version 5.005.
.PP
See also ``How can I expand variables in text strings?'' in this
section of the \s-1FAQ\s0.
.Sh "How do I find matching/nesting anything?"
.IX Subsection "How do I find matching/nesting anything?"
This isn't something that can be done in one regular expression, no
matter how complicated.  To find something between two single
characters, a pattern like \f(CW\*(C`/x([^x]*)x/\*(C'\fR will get the intervening
bits in \f(CW$1\fR. For multiple ones, then something more like
\&\f(CW\*(C`/alpha(.*?)omega/\*(C'\fR would be needed.  But none of these deals with
nested patterns, nor can they.  For that you'll have to write a
parser.
.PP
If you are serious about writing a parser, there are a number of
modules or oddities that will make your life a lot easier.  There are
the \s-1CPAN\s0 modules Parse::RecDescent, Parse::Yapp, and Text::Balanced;
and the byacc program.
.PP
One simple destructive, inside-out approach that you might try is to
pull out the smallest nesting parts one at a time:
.PP
.Vb 3
\&    while (s/BEGIN((?:(?!BEGIN)(?!END).)*)END//gs) {
\&        # do something with $1
\&    }
.Ve
A more complicated and sneaky approach is to make Perl's regular
expression engine do it for you.  This is courtesy Dean Inada, and
rather has the nature of an Obfuscated Perl Contest entry, but it
really does work:
.PP
.Vb 3
\&    # $_ contains the string to parse
\&    # BEGIN and END are the opening and closing markers for the
\&    # nested text.
.Ve
.Vb 5
\&    @( = ('(','');
\&    @) = (')','');
\&    ($re=$_)=~s/((BEGIN)|(END)|.)/$)[!$3]\eQ$1\eE$([!$2]/gs;
\&    @$ = (eval{/$re/},$@!~/unmatched/);
\&    print join("\en",@$[0..$#$]) if( $$[-1] );
.Ve
.Sh "How do I reverse a string?"
.IX Subsection "How do I reverse a string?"
Use \fIreverse()\fR in scalar context, as documented in
the reverse entry in the perlfunc manpage.
.PP
.Vb 1
\&    $reversed = reverse $string;
.Ve
.Sh "How do I expand tabs in a string?"
.IX Subsection "How do I expand tabs in a string?"
You can do it yourself:
.PP
.Vb 1
\&    1 while $string =~ s/\et+/' ' x (length($&) * 8 - length($`) % 8)/e;
.Ve
Or you can just use the Text::Tabs module (part of the standard Perl
distribution).
.PP
.Vb 2
\&    use Text::Tabs;
\&    @expanded_lines = expand(@lines_with_tabs);
.Ve
.Sh "How do I reformat a paragraph?"
.IX Subsection "How do I reformat a paragraph?"
Use Text::Wrap (part of the standard Perl distribution):
.PP
.Vb 2
\&    use Text::Wrap;
\&    print wrap("\et", '  ', @paragraphs);
.Ve
The paragraphs you give to Text::Wrap should not contain embedded
newlines.  Text::Wrap doesn't justify the lines (flush-right).
.Sh "How can I access/change the first N letters of a string?"
.IX Subsection "How can I access/change the first N letters of a string?"
There are many ways.  If you just want to grab a copy, use
\&\fIsubstr()\fR:
.PP
.Vb 1
\&    $first_byte = substr($a, 0, 1);
.Ve
If you want to modify part of a string, the simplest way is often to
use \fIsubstr()\fR as an lvalue:
.PP
.Vb 1
\&    substr($a, 0, 3) = "Tom";
.Ve
Although those with a pattern matching kind of thought process will
likely prefer
.PP
.Vb 1
\&    $a =~ s/^.../Tom/;
.Ve
.Sh "How do I change the Nth occurrence of something?"
.IX Subsection "How do I change the Nth occurrence of something?"
You have to keep track of N yourself.  For example, let's say you want
to change the fifth occurrence of \f(CW\*(C`"whoever"\*(C'\fR or \f(CW\*(C`"whomever"\*(C'\fR into
\&\f(CW\*(C`"whosoever"\*(C'\fR or \f(CW\*(C`"whomsoever"\*(C'\fR, case insensitively.  These
all assume that \f(CW$_\fR contains the string to be altered.
.PP
.Vb 6
\&    $count = 0;
\&    s{((whom?)ever)}{
\&        ++$count == 5           # is it the 5th?
\&            ? "${2}soever"      # yes, swap
\&            : $1                # renege and leave it there
\&    }ige;
.Ve
In the more general case, you can use the \f(CW\*(C`/g\*(C'\fR modifier in a \f(CW\*(C`while\*(C'\fR
loop, keeping count of matches.
.PP
.Vb 8
\&    $WANT = 3;
\&    $count = 0;
\&    $_ = "One fish two fish red fish blue fish";
\&    while (/(\ew+)\es+fish\eb/gi) {
\&        if (++$count == $WANT) {
\&            print "The third fish is a $1 one.\en";
\&        }
\&    }
.Ve
That prints out: \f(CW\*(C`"The third fish is a red one."\*(C'\fR  You can also use a
repetition count and repeated pattern like this:
.PP
.Vb 1
\&    /(?:\ew+\es+fish\es+){2}(\ew+)\es+fish/i;
.Ve
.Sh "How can I count the number of occurrences of a substring within a string?"
.IX Subsection "How can I count the number of occurrences of a substring within a string?"
There are a number of ways, with varying efficiency.  If you want a
count of a certain single character (X) within a string, you can use the
\&\f(CW\*(C`tr///\*(C'\fR function like so:
.PP
.Vb 3
\&    $string = "ThisXlineXhasXsomeXx'sXinXit";
\&    $count = ($string =~ tr/X//);
\&    print "There are $count X characters in the string";
.Ve
This is fine if you are just looking for a single character.  However,
if you are trying to count multiple character substrings within a
larger string, \f(CW\*(C`tr///\*(C'\fR won't work.  What you can do is wrap a \fIwhile()\fR
loop around a global pattern match.  For example, let's count negative
integers:
.PP
.Vb 3
\&    $string = "-9 55 48 -2 23 -76 4 14 -44";
\&    while ($string =~ /-\ed+/g) { $count++ }
\&    print "There are $count negative numbers in the string";
.Ve
.Sh "How do I capitalize all the words on one line?"
.IX Subsection "How do I capitalize all the words on one line?"
To make the first letter of each word upper case:
.PP
.Vb 1
\&        $line =~ s/\eb(\ew)/\eU$1/g;
.Ve
This has the strange effect of turning "\f(CW\*(C`don't do it\*(C'\fR\*(L" into \*(R"\f(CW\*(C`Don'T
Do It\*(C'\fR".  Sometimes you might want this.  Other times you might need a
more thorough solution (Suggested by brian d.  foy):
.PP
.Vb 7
\&    $string =~ s/ (
\&                 (^\ew)    #at the beginning of the line
\&                   |      # or
\&                 (\es\ew)   #preceded by whitespace
\&                   )
\&                /\eU$1/xg;
\&    $string =~ /([\ew']+)/\eu\eL$1/g;
.Ve
To make the whole line upper case:
.PP
.Vb 1
\&        $line = uc($line);
.Ve
To force each word to be lower case, with the first letter upper case:
.PP
.Vb 1
\&        $line =~ s/(\ew+)/\eu\eL$1/g;
.Ve
You can (and probably should) enable locale awareness of those
characters by placing a \f(CW\*(C`use locale\*(C'\fR pragma in your program.
See the perllocale manpage for endless details on locales.
.PP
This is sometimes referred to as putting something into \*(L"title
case\*(R", but that's not quite accurate.  Consider the proper
capitalization of the movie \fIDr. Strangelove or: How I Learned to
Stop Worrying and Love the Bomb\fR, for example.
.Sh "How can I split a [character] delimited string except when inside [character]? (Comma-separated files)"
.IX Subsection "How can I split a [character] delimited string except when inside [character]? (Comma-separated files)"
Take the example case of trying to split a string that is comma-separated
into its different fields.  (We'll pretend you said comma-separated, not
comma-delimited, which is different and almost never what you mean.) You
can't use \f(CW\*(C`split(/,/)\*(C'\fR because you shouldn't split if the comma is inside
quotes.  For example, take a data line like this:
.PP
.Vb 1
\&    SAR001,"","Cimetrix, Inc","Bob Smith","CAM",N,8,1,0,7,"Error, Core Dumped"
.Ve
Due to the restriction of the quotes, this is a fairly complex
problem.  Thankfully, we have Jeffrey Friedl, author of a highly
recommended book on regular expressions, to handle these for us.  He
suggests (assuming your string is contained in \f(CW$text\fR):
.PP
.Vb 7
\&     @new = ();
\&     push(@new, $+) while $text =~ m{
\&         "([^\e"\e\e]*(?:\e\e.[^\e"\e\e]*)*)",?  # groups the phrase inside the quotes
\&       | ([^,]+),?
\&       | ,
\&     }gx;
\&     push(@new, undef) if substr($text,-1,1) eq ',';
.Ve
If you want to represent quotation marks inside a
quotation-mark-delimited field, escape them with backslashes (eg,
\&\f(CW\*(C`"like \e"this\e""\*(C'\fR.  Unescaping them is a task addressed earlier in
this section.
.PP
Alternatively, the Text::ParseWords module (part of the standard Perl
distribution) lets you say:
.PP
.Vb 2
\&    use Text::ParseWords;
\&    @new = quotewords(",", 0, $text);
.Ve
There's also a Text::CSV (Comma-Separated Values) module on \s-1CPAN\s0.
.Sh "How do I strip blank space from the beginning/end of a string?"
.IX Subsection "How do I strip blank space from the beginning/end of a string?"
Although the simplest approach would seem to be
.PP
.Vb 1
\&    $string =~ s/^\es*(.*?)\es*$/$1/;
.Ve
not only is this unnecessarily slow and destructive, it also fails with
embedded newlines.  It is much faster to do this operation in two steps:
.PP
.Vb 2
\&    $string =~ s/^\es+//;
\&    $string =~ s/\es+$//;
.Ve
Or more nicely written as:
.PP
.Vb 4
\&    for ($string) {
\&        s/^\es+//;
\&        s/\es+$//;
\&    }
.Ve
This idiom takes advantage of the \f(CW\*(C`foreach\*(C'\fR loop's aliasing
behavior to factor out common code.  You can do this
on several strings at once, or arrays, or even the 
values of a hash if you use a slice:
.PP
.Vb 6
\&    # trim whitespace in the scalar, the array, 
\&    # and all the values in the hash
\&    foreach ($scalar, @array, @hash{keys %hash}) {
\&        s/^\es+//;
\&        s/\es+$//;
\&    }
.Ve
.Sh "How do I pad a string with blanks or pad a number with zeroes?"
.IX Subsection "How do I pad a string with blanks or pad a number with zeroes?"
(This answer contributed by Uri Guttman, with kibitzing from
Bart Lateur.) 
.PP
In the following examples, \f(CW\*(C`$pad_len\*(C'\fR is the length to which you wish
to pad the string, \f(CW\*(C`$text\*(C'\fR or \f(CW\*(C`$num\*(C'\fR contains the string to be padded,
and \f(CW\*(C`$pad_char\*(C'\fR contains the padding character. You can use a single
character string constant instead of the \f(CW\*(C`$pad_char\*(C'\fR variable if you
know what it is in advance. And in the same way you can use an integer in
place of \f(CW\*(C`$pad_len\*(C'\fR if you know the pad length in advance.
.PP
The simplest method uses the \f(CW\*(C`sprintf\*(C'\fR function. It can pad on the left
or right with blanks and on the left with zeroes and it will not
truncate the result. The \f(CW\*(C`pack\*(C'\fR function can only pad strings on the
right with blanks and it will truncate the result to a maximum length of
\&\f(CW\*(C`$pad_len\*(C'\fR.
.PP
.Vb 2
\&    # Left padding a string with blanks (no truncation):
\&    $padded = sprintf("%${pad_len}s", $text);
.Ve
.Vb 2
\&    # Right padding a string with blanks (no truncation):
\&    $padded = sprintf("%-${pad_len}s", $text);
.Ve
.Vb 2
\&    # Left padding a number with 0 (no truncation): 
\&    $padded = sprintf("%0${pad_len}d", $num);
.Ve
.Vb 2
\&    # Right padding a string with blanks using pack (will truncate):
\&    $padded = pack("A$pad_len",$text);
.Ve
If you need to pad with a character other than blank or zero you can use
one of the following methods.  They all generate a pad string with the
\&\f(CW\*(C`x\*(C'\fR operator and combine that with \f(CW\*(C`$text\*(C'\fR. These methods do
not truncate \f(CW\*(C`$text\*(C'\fR.
.PP
Left and right padding with any character, creating a new string:
.PP
.Vb 2
\&    $padded = $pad_char x ( $pad_len - length( $text ) ) . $text;
\&    $padded = $text . $pad_char x ( $pad_len - length( $text ) );
.Ve
Left and right padding with any character, modifying \f(CW\*(C`$text\*(C'\fR directly:
.PP
.Vb 2
\&    substr( $text, 0, 0 ) = $pad_char x ( $pad_len - length( $text ) );
\&    $text .= $pad_char x ( $pad_len - length( $text ) );
.Ve
.Sh "How do I extract selected columns from a string?"
.IX Subsection "How do I extract selected columns from a string?"
Use \fIsubstr()\fR or \fIunpack()\fR, both documented in the perlfunc manpage.
If you prefer thinking in terms of columns instead of widths, 
you can use this kind of thing:
.PP
.Vb 3
\&    # determine the unpack format needed to split Linux ps output
\&    # arguments are cut columns
\&    my $fmt = cut2fmt(8, 14, 20, 26, 30, 34, 41, 47, 59, 63, 67, 72);
.Ve
.Vb 11
\&    sub cut2fmt { 
\&        my(@positions) = @_;
\&        my $template  = '';
\&        my $lastpos   = 1;
\&        for my $place (@positions) {
\&            $template .= "A" . ($place - $lastpos) . " "; 
\&            $lastpos   = $place;
\&        }
\&        $template .= "A*";
\&        return $template;
\&    }
.Ve
.Sh "How do I find the soundex value of a string?"
.IX Subsection "How do I find the soundex value of a string?"
Use the standard Text::Soundex module distributed with Perl.
Before you do so, you may want to determine whether `soundex' is in
fact what you think it is.  Knuth's soundex algorithm compresses words
into a small space, and so it does not necessarily distinguish between
two words which you might want to appear separately.  For example, the
last names `Knuth' and `Kant' are both mapped to the soundex code K530.
If Text::Soundex does not do what you are looking for, you might want
to consider the String::Approx module available at \s-1CPAN\s0.
.Sh "How can I expand variables in text strings?"
.IX Subsection "How can I expand variables in text strings?"
Let's assume that you have a string like:
.PP
.Vb 1
\&    $text = 'this has a $foo in it and a $bar';
.Ve
If those were both global variables, then this would
suffice:
.PP
.Vb 1
\&    $text =~ s/\e$(\ew+)/${$1}/g;  # no /e needed
.Ve
But since they are probably lexicals, or at least, they could
be, you'd have to do this:
.PP
.Vb 2
\&    $text =~ s/(\e$\ew+)/$1/eeg;
\&    die if $@;                  # needed /ee, not /e
.Ve
It's probably better in the general case to treat those
variables as entries in some special hash.  For example:
.PP
.Vb 5
\&    %user_defs = ( 
\&        foo  => 23,
\&        bar  => 19,
\&    );
\&    $text =~ s/\e$(\ew+)/$user_defs{$1}/g;
.Ve
See also ``How do I expand function calls in a string?'' in this section
of the \s-1FAQ\s0.
.if n .Sh "What's wrong with always quoting ""$vars""?"
.el .Sh "What's wrong with always quoting ``$vars''?"
.IX Subsection "What's wrong with always quoting "$vars?"
The problem is that those double-quotes force stringification\-\-
coercing numbers and references into strings\*(--even when you
don't want them to be strings.  Think of it this way: double-quote
expansion is used to produce new strings.  If you already 
have a string, why do you need more?
.PP
If you get used to writing odd things like these:
.PP
.Vb 3
\&    print "$var";       # BAD
\&    $new = "$old";      # BAD
\&    somefunc("$var");   # BAD
.Ve
You'll be in trouble.  Those should (in 99.8% of the cases) be
the simpler and more direct:
.PP
.Vb 3
\&    print $var;
\&    $new = $old;
\&    somefunc($var);
.Ve
Otherwise, besides slowing you down, you're going to break code when
the thing in the scalar is actually neither a string nor a number, but
a reference:
.PP
.Vb 5
\&    func(\e@array);
\&    sub func {
\&        my $aref = shift;
\&        my $oref = "$aref";  # WRONG
\&    }
.Ve
You can also get into subtle problems on those few operations in Perl
that actually do care about the difference between a string and a
number, such as the magical \f(CW\*(C`++\*(C'\fR autoincrement operator or the
\&\fIsyscall()\fR function.
.PP
Stringification also destroys arrays.  
.PP
.Vb 3
\&    @lines = `command`;
\&    print "@lines";             # WRONG - extra blanks
\&    print @lines;               # right
.Ve
.Sh "Why don't my <<\s-1HERE\s0 documents work?"
.IX Subsection "Why don't my <<HERE documents work?"
Check for these three things:
.Ip "1. There must be no space after the << part." 4
.IX Item "1. There must be no space after the << part."
.PD 0
.Ip "2. There (probably) should be a semicolon at the end." 4
.IX Item "2. There (probably) should be a semicolon at the end."
.Ip "3. You can't (easily) have any space in front of the tag." 4
.IX Item "3. You can't (easily) have any space in front of the tag."
.PD
.PP
If you want to indent the text in the here document, you 
can do this:
.PP
.Vb 5
\&    # all in one
\&    ($VAR = <<HERE_TARGET) =~ s/^\es+//gm;
\&        your text
\&        goes here
\&    HERE_TARGET
.Ve
But the \s-1HERE_TARGET\s0 must still be flush against the margin.
If you want that indented also, you'll have to quote 
in the indentation.
.PP
.Vb 7
\&    ($quote = <<'    FINIS') =~ s/^\es+//gm;
\&            ...we will have peace, when you and all your works have
\&            perished--and the works of your dark master to whom you
\&            would deliver us. You are a liar, Saruman, and a corrupter
\&            of men's hearts.  --Theoden in /usr/src/perl/taint.c
\&        FINIS
\&    $quote =~ s/\es*--/\en--/;
.Ve
A nice general-purpose fixer-upper function for indented here documents
follows.  It expects to be called with a here document as its argument.
It looks to see whether each line begins with a common substring, and
if so, strips that substring off.  Otherwise, it takes the amount of leading
whitespace found on the first line and removes that much off each
subsequent line.
.PP
.Vb 11
\&    sub fix {
\&        local $_ = shift;
\&        my ($white, $leader);  # common whitespace and common leading string
\&        if (/^\es*(?:([^\ew\es]+)(\es*).*\en)(?:\es*\e1\e2?.*\en)+$/) {
\&            ($white, $leader) = ($2, quotemeta($1));
\&        } else {
\&            ($white, $leader) = (/^(\es+)/, '');
\&        }
\&        s/^\es*?$leader(?:$white)?//gm;
\&        return $_;
\&    }
.Ve
This works with leading special strings, dynamically determined:
.PP
.Vb 10
\&    $remember_the_main = fix<<'    MAIN_INTERPRETER_LOOP';
\&        @@@ int
\&        @@@ runops() {
\&        @@@     SAVEI32(runlevel);
\&        @@@     runlevel++;
\&        @@@     while ( op = (*op->op_ppaddr)() );
\&        @@@     TAINT_NOT;
\&        @@@     return 0;
\&        @@@ }
\&    MAIN_INTERPRETER_LOOP
.Ve
Or with a fixed amount of leading whitespace, with remaining
indentation correctly preserved:
.PP
.Vb 9
\&    $poem = fix<<EVER_ON_AND_ON;
\&       Now far ahead the Road has gone,
\&          And I must follow, if I can,
\&       Pursuing it with eager feet,
\&          Until it joins some larger way
\&       Where many paths and errands meet.
\&          And whither then? I cannot say.
\&                --Bilbo in /usr/src/perl/pp_ctl.c
\&    EVER_ON_AND_ON
.Ve
.SH "Data: Arrays"
.IX Header "Data: Arrays"
.Sh "What is the difference between a list and an array?"
.IX Subsection "What is the difference between a list and an array?"
An array has a changeable length.  A list does not.  An array is something
you can push or pop, while a list is a set of values.  Some people make
the distinction that a list is a value while an array is a variable.
Subroutines are passed and return lists, you put things into list
context, you initialize arrays with lists, and you \fIforeach()\fR across
a list.  \f(CW\*(C`@\*(C'\fR variables are arrays, anonymous arrays are arrays, arrays
in scalar context behave like the number of elements in them, subroutines
access their arguments through the array \f(CW\*(C`@_\*(C'\fR, and push/pop/shift only work
on arrays.
.PP
As a side note, there's no such thing as a list in scalar context.
When you say
.PP
.Vb 1
\&    $scalar = (2, 5, 7, 9);
.Ve
you're using the comma operator in scalar context, so it uses the scalar
comma operator.  There never was a list there at all!  This causes the
last value to be returned: 9.
.Sh "What is the difference between \f(CW$array\fP[1] and \f(CW@array\fP[1]?"
.IX Subsection "What is the difference between $array[1] and @array[1]?"
The former is a scalar value; the latter an array slice, making
it a list with one (scalar) value.  You should use $ when you want a
scalar value (most of the time) and @ when you want a list with one
scalar value in it (very, very rarely; nearly never, in fact).
.PP
Sometimes it doesn't make a difference, but sometimes it does.
For example, compare:
.PP
.Vb 1
\&    $good[0] = `some program that outputs several lines`;
.Ve
with
.PP
.Vb 1
\&    @bad[0]  = `same program that outputs several lines`;
.Ve
The \f(CW\*(C`use warnings\*(C'\fR pragma and the \fB\-w\fR flag will warn you about these 
matters.
.Sh "How can I remove duplicate elements from a list or array?"
.IX Subsection "How can I remove duplicate elements from a list or array?"
There are several possible ways, depending on whether the array is
ordered and whether you wish to preserve the ordering.
.Ip "a)" 4
If \f(CW@in\fR is sorted, and you want \f(CW@out\fR to be sorted:
(this assumes all true values in the array)
.Sp
.Vb 2
\&    $prev = "not equal to $in[0]";
\&    @out = grep($_ ne $prev && ($prev = $_, 1), @in);
.Ve
This is nice in that it doesn't use much extra memory, simulating
\&\fIuniq\fR\|(1)'s behavior of removing only adjacent duplicates.  The \*(L", 1\*(R"
guarantees that the expression is true (so that grep picks it up)
even if the \f(CW$_\fR is 0, "", or undef.
.Ip "b)" 4
If you don't know whether \f(CW@in\fR is sorted:
.Sp
.Vb 2
\&    undef %saw;
\&    @out = grep(!$saw{$_}++, @in);
.Ve
.Ip "c)" 4
Like (b), but \f(CW@in\fR contains only small integers:
.Sp
.Vb 1
\&    @out = grep(!$saw[$_]++, @in);
.Ve
.Ip "d)" 4
A way to do (b) without any loops or greps:
.Sp
.Vb 3
\&    undef %saw;
\&    @saw{@in} = ();
\&    @out = sort keys %saw;  # remove sort if undesired
.Ve
.Ip "e)" 4
Like (d), but \f(CW@in\fR contains only small positive integers:
.Sp
.Vb 3
\&    undef @ary;
\&    @ary[@in] = @in;
\&    @out = grep {defined} @ary;
.Ve
.PP
But perhaps you should have been using a hash all along, eh?
.Sh "How can I tell whether a list or array contains a certain element?"
.IX Subsection "How can I tell whether a list or array contains a certain element?"
Hearing the word \*(L"in\*(R" is an \fIin\fRdication that you probably should have
used a hash, not a list or array, to store your data.  Hashes are
designed to answer this question quickly and efficiently.  Arrays aren't.
.PP
That being said, there are several ways to approach this.  If you
are going to make this query many times over arbitrary string values,
the fastest way is probably to invert the original array and keep an
associative array lying about whose keys are the first array's values.
.PP
.Vb 3
\&    @blues = qw/azure cerulean teal turquoise lapis-lazuli/;
\&    undef %is_blue;
\&    for (@blues) { $is_blue{$_} = 1 }
.Ve
Now you can check whether \f(CW$is_blue\fR{$some_color}.  It might have been a
good idea to keep the blues all in a hash in the first place.
.PP
If the values are all small integers, you could use a simple indexed
array.  This kind of an array will take up less space:
.PP
.Vb 4
\&    @primes = (2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31);
\&    undef @is_tiny_prime;
\&    for (@primes) { $is_tiny_prime[$_] = 1 }
\&    # or simply  @istiny_prime[@primes] = (1) x @primes;
.Ve
Now you check whether \f(CW$is_tiny_prime\fR[$some_number].
.PP
If the values in question are integers instead of strings, you can save
quite a lot of space by using bit strings instead:
.PP
.Vb 3
\&    @articles = ( 1..10, 150..2000, 2017 );
\&    undef $read;
\&    for (@articles) { vec($read,$_,1) = 1 }
.Ve
Now check whether \f(CW\*(C`vec($read,$n,1)\*(C'\fR is true for some \f(CW\*(C`$n\*(C'\fR.
.PP
Please do not use
.PP
.Vb 1
\&    ($is_there) = grep $_ eq $whatever, @array;
.Ve
or worse yet
.PP
.Vb 1
\&    ($is_there) = grep /$whatever/, @array;
.Ve
These are slow (checks every element even if the first matches),
inefficient (same reason), and potentially buggy (what if there are
regex characters in \f(CW$whatever\fR?).  If you're only testing once, then
use:
.PP
.Vb 8
\&    $is_there = 0;
\&    foreach $elt (@array) {
\&        if ($elt eq $elt_to_find) {
\&            $is_there = 1;
\&            last;
\&        }
\&    }
\&    if ($is_there) { ... }
.Ve
.Sh "How do I compute the difference of two arrays?  How do I compute the intersection of two arrays?"
.IX Subsection "How do I compute the difference of two arrays?  How do I compute the intersection of two arrays?"
Use a hash.  Here's code to do both and more.  It assumes that
each element is unique in a given array:
.PP
.Vb 7
\&    @union = @intersection = @difference = ();
\&    %count = ();
\&    foreach $element (@array1, @array2) { $count{$element}++ }
\&    foreach $element (keys %count) {
\&        push @union, $element;
\&        push @{ $count{$element} > 1 ? \e@intersection : \e@difference }, $element;
\&    }
.Ve
Note that this is the \fIsymmetric difference\fR, that is, all elements in
either A or in B but not in both.  Think of it as an xor operation.
.Sh "How do I test whether two arrays or hashes are equal?"
.IX Subsection "How do I test whether two arrays or hashes are equal?"
The following code works for single-level arrays.  It uses a stringwise
comparison, and does not distinguish defined versus undefined empty
strings.  Modify if you have other needs.
.PP
.Vb 1
\&    $are_equal = compare_arrays(\e@frogs, \e@toads);
.Ve
.Vb 9
\&    sub compare_arrays {
\&        my ($first, $second) = @_;
\&        no warnings;  # silence spurious -w undef complaints
\&        return 0 unless @$first == @$second;
\&        for (my $i = 0; $i < @$first; $i++) {
\&            return 0 if $first->[$i] ne $second->[$i];
\&        }
\&        return 1;
\&    }
.Ve
For multilevel structures, you may wish to use an approach more
like this one.  It uses the \s-1CPAN\s0 module FreezeThaw:
.PP
.Vb 2
\&    use FreezeThaw qw(cmpStr);
\&    @a = @b = ( "this", "that", [ "more", "stuff" ] );
.Ve
.Vb 4
\&    printf "a and b contain %s arrays\en",
\&        cmpStr(\e@a, \e@b) == 0 
\&            ? "the same" 
\&            : "different";
.Ve
This approach also works for comparing hashes.  Here
we'll demonstrate two different answers:
.PP
.Vb 1
\&    use FreezeThaw qw(cmpStr cmpStrHard);
.Ve
.Vb 3
\&    %a = %b = ( "this" => "that", "extra" => [ "more", "stuff" ] );
\&    $a{EXTRA} = \e%b;
\&    $b{EXTRA} = \e%a;
.Ve
.Vb 2
\&    printf "a and b contain %s hashes\en",
\&        cmpStr(\e%a, \e%b) == 0 ? "the same" : "different";
.Ve
.Vb 2
\&    printf "a and b contain %s hashes\en",
\&        cmpStrHard(\e%a, \e%b) == 0 ? "the same" : "different";
.Ve
The first reports that both those the hashes contain the same data,
while the second reports that they do not.  Which you prefer is left as
an exercise to the reader.
.Sh "How do I find the first array element for which a condition is true?"
.IX Subsection "How do I find the first array element for which a condition is true?"
You can use this if you care about the index:
.PP
.Vb 6
\&    for ($i= 0; $i < @array; $i++) {
\&        if ($array[$i] eq "Waldo") {
\&            $found_index = $i;
\&            last;
\&        }
\&    }
.Ve
Now \f(CW\*(C`$found_index\*(C'\fR has what you want.
.Sh "How do I handle linked lists?"
.IX Subsection "How do I handle linked lists?"
In general, you usually don't need a linked list in Perl, since with
regular arrays, you can push and pop or shift and unshift at either end,
or you can use splice to add and/or remove arbitrary number of elements at
arbitrary points.  Both pop and shift are both O(1) operations on Perl's
dynamic arrays.  In the absence of shifts and pops, push in general
needs to reallocate on the order every \fIlog\fR\|(N) times, and unshift will
need to copy pointers each time.
.PP
If you really, really wanted, you could use structures as described in
the perldsc manpage or the perltoot manpage and do just what the algorithm book tells you
to do.  For example, imagine a list node like this:
.PP
.Vb 4
\&    $node = {
\&        VALUE => 42,
\&        LINK  => undef,
\&    };
.Ve
You could walk the list this way:
.PP
.Vb 5
\&    print "List: ";
\&    for ($node = $head;  $node; $node = $node->{LINK}) {
\&        print $node->{VALUE}, " ";
\&    }
\&    print "\en";
.Ve
You could add to the list this way:
.PP
.Vb 5
\&    my ($head, $tail);
\&    $tail = append($head, 1);       # grow a new head
\&    for $value ( 2 .. 10 ) {
\&        $tail = append($tail, $value);
\&    }
.Ve
.Vb 11
\&    sub append {
\&        my($list, $value) = @_;
\&        my $node = { VALUE => $value };
\&        if ($list) {
\&            $node->{LINK} = $list->{LINK};
\&            $list->{LINK} = $node;
\&        } else {
\&            $_[0] = $node;      # replace caller's version
\&        }
\&        return $node;
\&    }
.Ve
But again, Perl's built-in are virtually always good enough.
.Sh "How do I handle circular lists?"
.IX Subsection "How do I handle circular lists?"
Circular lists could be handled in the traditional fashion with linked
lists, or you could just do something like this with an array:
.PP
.Vb 2
\&    unshift(@array, pop(@array));  # the last shall be first
\&    push(@array, shift(@array));   # and vice versa
.Ve
.Sh "How do I shuffle an array randomly?"
.IX Subsection "How do I shuffle an array randomly?"
Use this:
.PP
.Vb 10
\&    # fisher_yates_shuffle( \e@array ) : 
\&    # generate a random permutation of @array in place
\&    sub fisher_yates_shuffle {
\&        my $array = shift;
\&        my $i;
\&        for ($i = @$array; --$i; ) {
\&            my $j = int rand ($i+1);
\&            @$array[$i,$j] = @$array[$j,$i];
\&        }
\&    }
.Ve
.Vb 1
\&    fisher_yates_shuffle( \e@array );    # permutes @array in place
.Ve
You've probably seen shuffling algorithms that work using splice,
randomly picking another element to swap the current element with
.PP
.Vb 6
\&    srand;
\&    @new = ();
\&    @old = 1 .. 10;  # just a demo
\&    while (@old) {
\&        push(@new, splice(@old, rand @old, 1));
\&    }
.Ve
This is bad because splice is already O(N), and since you do it N times,
you just invented a quadratic algorithm; that is, O(N**2).  This does
not scale, although Perl is so efficient that you probably won't notice
this until you have rather largish arrays.
.Sh "How do I process/modify each element of an array?"
.IX Subsection "How do I process/modify each element of an array?"
Use \f(CW\*(C`for\*(C'\fR/\f(CW\*(C`foreach\*(C'\fR:
.PP
.Vb 4
\&    for (@lines) {
\&        s/foo/bar/;     # change that word
\&        y/XZ/ZX/;       # swap those letters
\&    }
.Ve
Here's another; let's compute spherical volumes:
.PP
.Vb 4
\&    for (@volumes = @radii) {   # @volumes has changed parts
\&        $_ **= 3;
\&        $_ *= (4/3) * 3.14159;  # this will be constant folded
\&    }
.Ve
If you want to do the same thing to modify the values of the hash,
you may not use the \f(CW\*(C`values\*(C'\fR function, oddly enough.  You need a slice:
.PP
.Vb 3
\&    for $orbit ( @orbits{keys %orbits} ) {
\&        ($orbit **= 3) *= (4/3) * 3.14159; 
\&    }
.Ve
.Sh "How do I select a random element from an array?"
.IX Subsection "How do I select a random element from an array?"
Use the \fIrand()\fR function (see the rand entry in the perlfunc manpage):
.PP
.Vb 2
\&    # at the top of the program:
\&    srand;                      # not needed for 5.004 and later
.Ve
.Vb 3
\&    # then later on
\&    $index   = rand @array;
\&    $element = $array[$index];
.Ve
Make sure you \fIonly call srand once per program, if then\fR.
If you are calling it more than once (such as before each 
call to rand), you're almost certainly doing something wrong.
.Sh "How do I permute N elements of a list?"
.IX Subsection "How do I permute N elements of a list?"
Here's a little program that generates all permutations
of all the words on each line of input.  The algorithm embodied
in the \fIpermute()\fR function should work on any list:
.PP
.Vb 18
\&    #!/usr/bin/perl -n
\&    # tsc-permute: permute each word of input
\&    permute([split], []);
\&    sub permute {
\&        my @items = @{ $_[0] };
\&        my @perms = @{ $_[1] };
\&        unless (@items) {
\&            print "@perms\en";
\&        } else {
\&            my(@newitems,@newperms,$i);
\&            foreach $i (0 .. $#items) {
\&                @newitems = @items;
\&                @newperms = @perms;
\&                unshift(@newperms, splice(@newitems, $i, 1));
\&                permute([@newitems], [@newperms]);
\&            }
\&        }
\&    }
.Ve
.Sh "How do I sort an array by (anything)?"
.IX Subsection "How do I sort an array by (anything)?"
Supply a comparison function to \fIsort()\fR (described in the sort entry in the perlfunc manpage):
.PP
.Vb 1
\&    @list = sort { $a <=> $b } @list;
.Ve
The default sort function is cmp, string comparison, which would
sort \f(CW\*(C`(1, 2, 10)\*(C'\fR into \f(CW\*(C`(1, 10, 2)\*(C'\fR.  \f(CW\*(C`<=>\*(C'\fR, used above, is
the numerical comparison operator.
.PP
If you have a complicated function needed to pull out the part you
want to sort on, then don't do it inside the sort function.  Pull it
out first, because the sort \s-1BLOCK\s0 can be called many times for the
same element.  Here's an example of how to pull out the first word
after the first number on each item, and then sort those words
case-insensitively.
.PP
.Vb 6
\&    @idx = ();
\&    for (@data) {
\&        ($item) = /\ed+\es*(\eS+)/;
\&        push @idx, uc($item);
\&    }
\&    @sorted = @data[ sort { $idx[$a] cmp $idx[$b] } 0 .. $#idx ];
.Ve
which could also be written this way, using a trick
that's come to be known as the Schwartzian Transform:
.PP
.Vb 3
\&    @sorted = map  { $_->[0] }
\&              sort { $a->[1] cmp $b->[1] }
\&              map  { [ $_, uc( (/\ed+\es*(\eS+)/)[0]) ] } @data;
.Ve
If you need to sort on several fields, the following paradigm is useful.
.PP
.Vb 4
\&    @sorted = sort { field1($a) <=> field1($b) ||
\&                     field2($a) cmp field2($b) ||
\&                     field3($a) cmp field3($b)
\&                   }     @data;
.Ve
This can be conveniently combined with precalculation of keys as given
above.
.PP
See http://www.perl.com/CPAN/doc/FMTEYEWTK/sort.html for more about
this approach.
.PP
See also the question below on sorting hashes.
.Sh "How do I manipulate arrays of bits?"
.IX Subsection "How do I manipulate arrays of bits?"
Use \fIpack()\fR and \fIunpack()\fR, or else \fIvec()\fR and the bitwise operations.
.PP
For example, this sets \f(CW$vec\fR to have bit N set if \f(CW$ints\fR[N] was set:
.PP
.Vb 2
\&    $vec = '';
\&    foreach(@ints) { vec($vec,$_,1) = 1 }
.Ve
And here's how, given a vector in \f(CW$vec\fR, you can
get those bits into your \f(CW@ints\fR array:
.PP
.Vb 28
\&    sub bitvec_to_list {
\&        my $vec = shift;
\&        my @ints;
\&        # Find null-byte density then select best algorithm
\&        if ($vec =~ tr/\e0// / length $vec > 0.95) {
\&            use integer;
\&            my $i;
\&            # This method is faster with mostly null-bytes
\&            while($vec =~ /[^\e0]/g ) {
\&                $i = -9 + 8 * pos $vec;
\&                push @ints, $i if vec($vec, ++$i, 1);
\&                push @ints, $i if vec($vec, ++$i, 1);
\&                push @ints, $i if vec($vec, ++$i, 1);
\&                push @ints, $i if vec($vec, ++$i, 1);
\&                push @ints, $i if vec($vec, ++$i, 1);
\&                push @ints, $i if vec($vec, ++$i, 1);
\&                push @ints, $i if vec($vec, ++$i, 1);
\&                push @ints, $i if vec($vec, ++$i, 1);
\&            }
\&        } else {
\&            # This method is a fast general algorithm
\&            use integer;
\&            my $bits = unpack "b*", $vec;
\&            push @ints, 0 if $bits =~ s/^(\ed)// && $1;
\&            push @ints, pos $bits while($bits =~ /1/g);
\&        }
\&        return \e@ints;
\&    }
.Ve
This method gets faster the more sparse the bit vector is.
(Courtesy of Tim Bunce and Winfried Koenig.)
.PP
Here's a demo on how to use \fIvec()\fR:
.PP
.Vb 7
\&    # vec demo
\&    $vector = "\exff\ex0f\exef\exfe";
\&    print "Ilya's string \e\exff\e\ex0f\e\exef\e\exfe represents the number ", 
\&        unpack("N", $vector), "\en";
\&    $is_set = vec($vector, 23, 1);
\&    print "Its 23rd bit is ", $is_set ? "set" : "clear", ".\en";
\&    pvec($vector);
.Ve
.Vb 3
\&    set_vec(1,1,1);
\&    set_vec(3,1,1);
\&    set_vec(23,1,1);
.Ve
.Vb 6
\&    set_vec(3,1,3);
\&    set_vec(3,2,3);
\&    set_vec(3,4,3);
\&    set_vec(3,4,7);
\&    set_vec(3,8,3);
\&    set_vec(3,8,7);
.Ve
.Vb 2
\&    set_vec(0,32,17);
\&    set_vec(1,32,17);
.Ve
.Vb 7
\&    sub set_vec { 
\&        my ($offset, $width, $value) = @_;
\&        my $vector = '';
\&        vec($vector, $offset, $width) = $value;
\&        print "offset=$offset width=$width value=$value\en";
\&        pvec($vector);
\&    }
.Ve
.Vb 5
\&    sub pvec {
\&        my $vector = shift;
\&        my $bits = unpack("b*", $vector);
\&        my $i = 0;
\&        my $BASE = 8;
.Ve
.Vb 4
\&        print "vector length in bytes: ", length($vector), "\en";
\&        @bytes = unpack("A8" x length($vector), $bits);
\&        print "bits are: @bytes\en\en";
\&    }
.Ve
.Sh "Why does \fIdefined()\fP return true on empty arrays and hashes?"
.IX Subsection "Why does defined() return true on empty arrays and hashes?"
The short story is that you should probably only use defined on scalars or
functions, not on aggregates (arrays and hashes).  See the defined entry in the perlfunc manpage
in the 5.004 release or later of Perl for more detail.
.SH "Data: Hashes (Associative Arrays)"
.IX Header "Data: Hashes (Associative Arrays)"
.Sh "How do I process an entire hash?"
.IX Subsection "How do I process an entire hash?"
Use the \fIeach()\fR function (see the each entry in the perlfunc manpage) if you don't care
whether it's sorted:
.PP
.Vb 3
\&    while ( ($key, $value) = each %hash) {
\&        print "$key = $value\en";
\&    }
.Ve
If you want it sorted, you'll have to use \fIforeach()\fR on the result of
sorting the keys as shown in an earlier question.
.Sh "What happens if I add or remove keys from a hash while iterating over it?"
.IX Subsection "What happens if I add or remove keys from a hash while iterating over it?"
Don't do that. :\-)
.PP
[lwall] In Perl 4, you were not allowed to modify a hash at all while
iterating over it.  In Perl 5 you can delete from it, but you still
can't add to it, because that might cause a doubling of the hash table,
in which half the entries get copied up to the new top half of the
table, at which point you've totally bamboozled the iterator code.
Even if the table doesn't double, there's no telling whether your new
entry will be inserted before or after the current iterator position.
.PP
Either treasure up your changes and make them after the iterator finishes
or use keys to fetch all the old keys at once, and iterate over the list
of keys.
.Sh "How do I look up a hash element by value?"
.IX Subsection "How do I look up a hash element by value?"
Create a reverse hash:
.PP
.Vb 2
\&    %by_value = reverse %by_key;
\&    $key = $by_value{$value};
.Ve
That's not particularly efficient.  It would be more space-efficient
to use:
.PP
.Vb 3
\&    while (($key, $value) = each %by_key) {
\&        $by_value{$value} = $key;
\&    }
.Ve
If your hash could have repeated values, the methods above will only find
one of the associated keys.   This may or may not worry you.  If it does
worry you, you can always reverse the hash into a hash of arrays instead:
.PP
.Vb 3
\&     while (($key, $value) = each %by_key) {
\&         push @{$key_list_by_value{$value}}, $key;
\&     }
.Ve
.Sh "How can I know how many entries are in a hash?"
.IX Subsection "How can I know how many entries are in a hash?"
If you mean how many keys, then all you have to do is
take the scalar sense of the \fIkeys()\fR function:
.PP
.Vb 1
\&    $num_keys = scalar keys %hash;
.Ve
The \fIkeys()\fR function also resets the iterator, which in void context is
faster for tied hashes than would be iterating through the whole 
hash, one key-value pair at a time.
.Sh "How do I sort a hash (optionally by value instead of key)?"
.IX Subsection "How do I sort a hash (optionally by value instead of key)?"
Internally, hashes are stored in a way that prevents you from imposing
an order on key-value pairs.  Instead, you have to sort a list of the
keys or values:
.PP
.Vb 4
\&    @keys = sort keys %hash;    # sorted by key
\&    @keys = sort {
\&                    $hash{$a} cmp $hash{$b}
\&            } keys %hash;       # and by value
.Ve
Here we'll do a reverse numeric sort by value, and if two keys are
identical, sort by length of key, or if that fails, by straight \s-1ASCII\s0
comparison of the keys (well, possibly modified by your locale\*(--see
the perllocale manpage).
.PP
.Vb 7
\&    @keys = sort {
\&                $hash{$b} <=> $hash{$a}
\&                          ||
\&                length($b) <=> length($a)
\&                          ||
\&                      $a cmp $b
\&    } keys %hash;
.Ve
.Sh "How can I always keep my hash sorted?"
.IX Subsection "How can I always keep my hash sorted?"
You can look into using the DB_File module and \fItie()\fR using the
\&\f(CW$DB_BTREE\fR hash bindings as documented in the In Memory Databases entry in the DB_File manpage.
The Tie::IxHash module from \s-1CPAN\s0 might also be instructive.
.if n .Sh "What's the difference between ""delete"" and ""undef"" with hashes?"
.el .Sh "What's the difference between ``delete'' and ``undef'' with hashes?"
.IX Subsection "What's the difference between "delete and undef with hashes?"
Hashes are pairs of scalars: the first is the key, the second is the
value.  The key will be coerced to a string, although the value can be
any kind of scalar: string, number, or reference.  If a key \f(CW\*(C`$key\*(C'\fR is
present in the array, \f(CW\*(C`exists($key)\*(C'\fR will return true.  The value for
a given key can be \f(CW\*(C`undef\*(C'\fR, in which case \f(CW\*(C`$array{$key}\*(C'\fR will be
\&\f(CW\*(C`undef\*(C'\fR while \f(CW\*(C`$exists{$key}\*(C'\fR will return true.  This corresponds to
(\f(CW\*(C`$key\*(C'\fR, \f(CW\*(C`undef\*(C'\fR) being in the hash.
.PP
Pictures help...  here's the \f(CW\*(C`%ary\*(C'\fR table:
.PP
.Vb 7
\&          keys  values
\&        +------+------+
\&        |  a   |  3   |
\&        |  x   |  7   |
\&        |  d   |  0   |
\&        |  e   |  2   |
\&        +------+------+
.Ve
And these conditions hold
.PP
.Vb 6
\&        $ary{'a'}                       is true
\&        $ary{'d'}                       is false
\&        defined $ary{'d'}               is true
\&        defined $ary{'a'}               is true
\&        exists $ary{'a'}                is true (Perl5 only)
\&        grep ($_ eq 'a', keys %ary)     is true
.Ve
If you now say
.PP
.Vb 1
\&        undef $ary{'a'}
.Ve
your table now reads:
.PP
.Vb 7
\&          keys  values
\&        +------+------+
\&        |  a   | undef|
\&        |  x   |  7   |
\&        |  d   |  0   |
\&        |  e   |  2   |
\&        +------+------+
.Ve
and these conditions now hold; changes in caps:
.PP
.Vb 6
\&        $ary{'a'}                       is FALSE
\&        $ary{'d'}                       is false
\&        defined $ary{'d'}               is true
\&        defined $ary{'a'}               is FALSE
\&        exists $ary{'a'}                is true (Perl5 only)
\&        grep ($_ eq 'a', keys %ary)     is true
.Ve
Notice the last two: you have an undef value, but a defined key!
.PP
Now, consider this:
.PP
.Vb 1
\&        delete $ary{'a'}
.Ve
your table now reads:
.PP
.Vb 6
\&          keys  values
\&        +------+------+
\&        |  x   |  7   |
\&        |  d   |  0   |
\&        |  e   |  2   |
\&        +------+------+
.Ve
and these conditions now hold; changes in caps:
.PP
.Vb 6
\&        $ary{'a'}                       is false
\&        $ary{'d'}                       is false
\&        defined $ary{'d'}               is true
\&        defined $ary{'a'}               is false
\&        exists $ary{'a'}                is FALSE (Perl5 only)
\&        grep ($_ eq 'a', keys %ary)     is FALSE
.Ve
See, the whole entry is gone!
.Sh "Why don't my tied hashes make the defined/exists distinction?"
.IX Subsection "Why don't my tied hashes make the defined/exists distinction?"
They may or may not implement the \fIEXISTS()\fR and \fIDEFINED()\fR methods
differently.  For example, there isn't the concept of undef with hashes
that are tied to DBM* files. This means the true/false tables above
will give different results when used on such a hash.  It also means
that exists and defined do the same thing with a DBM* file, and what
they end up doing is not what they do with ordinary hashes.
.Sh "How do I reset an \fIeach()\fP operation part-way through?"
.IX Subsection "How do I reset an each() operation part-way through?"
Using \f(CW\*(C`keys %hash\*(C'\fR in scalar context returns the number of keys in
the hash \fIand\fR resets the iterator associated with the hash.  You may
need to do this if you use \f(CW\*(C`last\*(C'\fR to exit a loop early so that when you
re-enter it, the hash iterator has been reset.
.Sh "How can I get the unique keys from two hashes?"
.IX Subsection "How can I get the unique keys from two hashes?"
First you extract the keys from the hashes into lists, then solve
the \*(L"removing duplicates\*(R" problem described above.  For example:
.PP
.Vb 5
\&    %seen = ();
\&    for $element (keys(%foo), keys(%bar)) {
\&        $seen{$element}++;
\&    }
\&    @uniq = keys %seen;
.Ve
Or more succinctly:
.PP
.Vb 1
\&    @uniq = keys %{{%foo,%bar}};
.Ve
Or if you really want to save space:
.PP
.Vb 8
\&    %seen = ();
\&    while (defined ($key = each %foo)) {
\&        $seen{$key}++;
\&    }
\&    while (defined ($key = each %bar)) {
\&        $seen{$key}++;
\&    }
\&    @uniq = keys %seen;
.Ve
.Sh "How can I store a multidimensional array in a \s-1DBM\s0 file?"
.IX Subsection "How can I store a multidimensional array in a DBM file?"
Either stringify the structure yourself (no fun), or else
get the \s-1MLDBM\s0 (which uses Data::Dumper) module from \s-1CPAN\s0 and layer
it on top of either DB_File or GDBM_File.
.Sh "How can I make my hash remember the order I put elements into it?"
.IX Subsection "How can I make my hash remember the order I put elements into it?"
Use the Tie::IxHash from \s-1CPAN\s0.
.PP
.Vb 7
\&    use Tie::IxHash;
\&    tie(%myhash, Tie::IxHash);
\&    for ($i=0; $i<20; $i++) {
\&        $myhash{$i} = 2*$i;
\&    }
\&    @keys = keys %myhash;
\&    # @keys = (0,1,2,3,...)
.Ve
.Sh "Why does passing a subroutine an undefined element in a hash create it?"
.IX Subsection "Why does passing a subroutine an undefined element in a hash create it?"
If you say something like:
.PP
.Vb 1
\&    somefunc($hash{"nonesuch key here"});
.Ve
Then that element \*(L"autovivifies\*(R"; that is, it springs into existence
whether you store something there or not.  That's because functions
get scalars passed in by reference.  If \fIsomefunc()\fR modifies \f(CW\*(C`$_[0]\*(C'\fR,
it has to be ready to write it back into the caller's version.
.PP
This has been fixed as of Perl5.004.
.PP
Normally, merely accessing a key's value for a nonexistent key does
\&\fInot\fR cause that key to be forever there.  This is different than
awk's behavior.
.Sh "How can I make the Perl equivalent of a C structure/\*(C+ class/hash or array of hashes or arrays?"
.IX Subsection "How can I make the Perl equivalent of a C structure/ class/hash or array of hashes or arrays?"
Usually a hash ref, perhaps like this:
.PP
.Vb 8
\&    $record = {
\&        NAME   => "Jason",
\&        EMPNO  => 132,
\&        TITLE  => "deputy peon",
\&        AGE    => 23,
\&        SALARY => 37_000,
\&        PALS   => [ "Norbert", "Rhys", "Phineas"],
\&    };
.Ve
References are documented in the perlref manpage and the upcoming the perlreftut manpage.
Examples of complex data structures are given in the perldsc manpage and
the perllol manpage.  Examples of structures and object-oriented classes are
in the perltoot manpage.
.Sh "How can I use a reference as a hash key?"
.IX Subsection "How can I use a reference as a hash key?"
You can't do this directly, but you could use the standard Tie::Refhash
module distributed with Perl.
.SH "Data: Misc"
.IX Header "Data: Misc"
.Sh "How do I handle binary data correctly?"
.IX Subsection "How do I handle binary data correctly?"
Perl is binary clean, so this shouldn't be a problem.  For example,
this works fine (assuming the files are found):
.PP
.Vb 3
\&    if (`cat /vmunix` =~ /gzip/) {
\&        print "Your kernel is GNU-zip enabled!\en";
\&    }
.Ve
On less elegant (read: Byzantine) systems, however, you have
to play tedious games with \*(L"text\*(R" versus \*(L"binary\*(R" files.  See
the binmode entry in the perlfunc manpage or the perlopentut manpage.  Most of these ancient-thinking
systems are curses out of Microsoft, who seem to be committed to putting
the backward into backward compatibility.
.PP
If you're concerned about 8\-bit \s-1ASCII\s0 data, then see the perllocale manpage.
.PP
If you want to deal with multibyte characters, however, there are
some gotchas.  See the section on Regular Expressions.
.Sh "How do I determine whether a scalar is a number/whole/integer/float?"
.IX Subsection "How do I determine whether a scalar is a number/whole/integer/float?"
Assuming that you don't care about \s-1IEEE\s0 notations like \*(L"NaN\*(R" or
\&\*(L"Infinity\*(R", you probably just want to use a regular expression.
.PP
.Vb 8
\&   if (/\eD/)            { print "has nondigits\en" }
\&   if (/^\ed+$/)         { print "is a whole number\en" }
\&   if (/^-?\ed+$/)       { print "is an integer\en" }
\&   if (/^[+-]?\ed+$/)    { print "is a +/- integer\en" }
\&   if (/^-?\ed+\e.?\ed*$/) { print "is a real number\en" }
\&   if (/^-?(?:\ed+(?:\e.\ed*)?|\e.\ed+)$/) { print "is a decimal number" }
\&   if (/^([+-]?)(?=\ed|\e.\ed)\ed*(\e.\ed*)?([Ee]([+-]?\ed+))?$/)
\&                        { print "a C float" }
.Ve
If you're on a \s-1POSIX\s0 system, Perl's supports the \f(CW\*(C`POSIX::strtod\*(C'\fR
function.  Its semantics are somewhat cumbersome, so here's a \f(CW\*(C`getnum\*(C'\fR
wrapper function for more convenient access.  This function takes
a string and returns the number it found, or \f(CW\*(C`undef\*(C'\fR for input that
isn't a C float.  The \f(CW\*(C`is_numeric\*(C'\fR function is a front end to \f(CW\*(C`getnum\*(C'\fR
if you just want to say, ``Is this a float?''
.PP
.Vb 13
\&    sub getnum {
\&        use POSIX qw(strtod);
\&        my $str = shift;
\&        $str =~ s/^\es+//;
\&        $str =~ s/\es+$//;
\&        $! = 0;
\&        my($num, $unparsed) = strtod($str);
\&        if (($str eq '') || ($unparsed != 0) || $!) {
\&            return undef;
\&        } else {
\&            return $num;
\&        } 
\&    }
.Ve
.Vb 1
\&    sub is_numeric { defined getnum($_[0]) }
.Ve
Or you could check out the String::Scanf module on \s-1CPAN\s0 instead.  The
\&\s-1POSIX\s0 module (part of the standard Perl distribution) provides the
\&\f(CW\*(C`strtod\*(C'\fR and \f(CW\*(C`strtol\*(C'\fR for converting strings to double and longs,
respectively.
.Sh "How do I keep persistent data across program calls?"
.IX Subsection "How do I keep persistent data across program calls?"
For some specific applications, you can use one of the \s-1DBM\s0 modules.
See the AnyDBM_File manpage.  More generically, you should consult the FreezeThaw,
Storable, or Class::Eroot modules from \s-1CPAN\s0.  Here's one example using
Storable's \f(CW\*(C`store\*(C'\fR and \f(CW\*(C`retrieve\*(C'\fR functions:
.PP
.Vb 2
\&    use Storable; 
\&    store(\e%hash, "filename");
.Ve
.Vb 3
\&    # later on...  
\&    $href = retrieve("filename");        # by ref
\&    %hash = %{ retrieve("filename") };   # direct to hash
.Ve
.Sh "How do I print out or copy a recursive data structure?"
.IX Subsection "How do I print out or copy a recursive data structure?"
The Data::Dumper module on \s-1CPAN\s0 (or the 5.005 release of Perl) is great
for printing out data structures.  The Storable module, found on \s-1CPAN\s0,
provides a function called \f(CW\*(C`dclone\*(C'\fR that recursively copies its argument.
.PP
.Vb 2
\&    use Storable qw(dclone); 
\&    $r2 = dclone($r1);
.Ve
Where \f(CW$r1\fR can be a reference to any kind of data structure you'd like.
It will be deeply copied.  Because \f(CW\*(C`dclone\*(C'\fR takes and returns references,
you'd have to add extra punctuation if you had a hash of arrays that
you wanted to copy.
.PP
.Vb 1
\&    %newhash = %{ dclone(\e%oldhash) };
.Ve
.Sh "How do I define methods for every class/object?"
.IX Subsection "How do I define methods for every class/object?"
Use the \s-1UNIVERSAL\s0 class (see the UNIVERSAL manpage).
.Sh "How do I verify a credit card checksum?"
.IX Subsection "How do I verify a credit card checksum?"
Get the Business::CreditCard module from \s-1CPAN\s0.
.Sh "How do I pack arrays of doubles or floats for \s-1XS\s0 code?"
.IX Subsection "How do I pack arrays of doubles or floats for XS code?"
The kgbpack.c code in the \s-1PGPLOT\s0 module on \s-1CPAN\s0 does just this.
If you're doing a lot of float or double processing, consider using
the \s-1PDL\s0 module from \s-1CPAN\s0 instead\*(--it makes number-crunching easy.
.SH "AUTHOR AND COPYRIGHT"
.IX Header "AUTHOR AND COPYRIGHT"
Copyright (c) 1997\-1999 Tom Christiansen and Nathan Torkington.
All rights reserved.
.PP
When included as part of the Standard Version of Perl, or as part of
its complete documentation whether printed or otherwise, this work
may be distributed only under the terms of Perl's Artistic License.
Any distribution of this file or derivatives thereof \fIoutside\fR
of that package require that special arrangements be made with
copyright holder.
.PP
Irrespective of its distribution, all code examples in this file
are hereby placed into the public domain.  You are permitted and
encouraged to use this code in your own programs for fun
or for profit as you see fit.  A simple comment in the code giving
credit would be courteous but is not required.
