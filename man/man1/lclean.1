.\" Automatically generated by Pod::Man version 1.15
.\" Mon Apr 23 12:56:33 2001
.\"
.\" Standard preamble:
.\" ======================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R

.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used
.\" to do unbreakable dashes and therefore won't be available.  \*(C` and
.\" \*(C' expand to `' in nroff, nothing in troff, for use with C<>
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr
.\" for titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and
.\" index entries marked with X<> in POD.  Of course, you'll have to process
.\" the output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it
.\" makes way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.bd B 3
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ======================================================================
.\"
.IX Title "LCLEAN 1"
.TH LCLEAN 1 "perl v5.6.1" "1998-02-25" "User Contributed Perl Documentation"
.UC
.SH "NAME"
lclean \- Detect and clean trash in Structured Storage documents
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
lclean \f(CW\*(C`\-r\*(C'\fR || \f(CW\*(C`\-c\*(C'\fR || \f(CW\*(C`\-s\*(C'\fR || \f(CW\*(C`\-i\*(C'\fR || \f(CW\*(C`\-l\*(C'\fR || \f(CW\*(C`\-e\*(C'\fR document
.PP
\&\fINote!\fR
If you use switch \f(CW\*(C`\-c\*(C'\fR or \f(CW\*(C`\-i\*(C'\fR, lclean changes your document! Please keep
a backup of the treated documents, until you are sure they did not take any
harm! 
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
lclean deals with documents created typically with \s-1MS\s0 Windows applications.
It gives a report about the trash sections in those \*(L"\s-1OLE\s0 / Structured
Storage\*(R" documents, cleans this trash or saves it to files. Further more a
file can be hidden into and extracted from those trash sections. 
.Ip "clean" 4
.IX Item "clean"
lclean \f(CW\*(C`\-c\*(C'\fR [\f(CW\*(C`\-n\*(C'\fR] {document}
.Sp
The trash sections will be cleaned. Unused blocks are filled with null
bytes. System data will be cleaned with 0xff bytes. File end trash 
(type 4) will be cleaned with random bytes. When using switch \f(CW\*(C`\-n\*(C'\fR, file 
end trash also will be filled with zero bytes (faster on files with 
lots of embedded objects).
.Ip "extract" 4
.IX Item "extract"
lclean \f(CW\*(C`\-e\*(C'\fR [\f(CW\*(C`\-f\*(C'\fR] [\f(CW\*(C`\-z\*(C'\fR] {document}
.Sp
Extracts the hidden file. This makes a copy of the hidden file. If the file
got corrupted by what reason ever, it will not be extracted. The file will
get the date of its last modification. If the file already exists, you will
be prompted to overwrite it with the new extracted file. With switch \f(CW\*(C`\-f\*(C'\fR
you will not be prompted, but the file will be overwritten. With switch \f(CW\*(C`\-z\*(C'\fR 
no zero length files will be created.
.Ip "insert" 4
.IX Item "insert"
lclean \f(CW\*(C`\-i\*(C'\fR <file> [\f(CW\*(C`\-a\*(C'\fR] {document}
.Sp
Insert a file into the document (hide it).
The trash in your document will be substituted by some <file>. This file
cannot be seen by any standard Windows application. The file must be smaller,
than the size of the trash in your documents (plus 20 bytes plus the size to
store the filename). Normally, only trash types 1 and 2 will be used for
this. If they offer not enough space, with switch \f(CW\*(C`\-a\*(C'\fR trash type 4 and 8
will be used additionally.
.Ip "list" 4
.IX Item "list"
lclean \f(CW\*(C`\-l\*(C'\fR {document}
.Sp
List if there is a file hidden in the documents trash.
.Ip "report" 4
.IX Item "report"
lclean \f(CW\*(C`\-r\*(C'\fR {document}
.Sp
Gets a small report about the trash in the documents.
.Ip "save" 4
.IX Item "save"
lclean \f(CW\*(C`\-s\*(C'\fR [\f(CW\*(C`\-a\*(C'\fR] [\f(CW\*(C`\-d\*(C'\fR] [\f(CW\*(C`\-z\*(C'\fR] {document}
.Sp
The trash sections will be saved to own files. They will be stored to an
directory in your current directory. Normally it will be the directory
"\f(CW\*(C`doctrash\*(C'\fR\*(L". E.g., if there is the example file \*(R"\f(CW\*(C`legacy.doc\*(C'\fR\*(L" the
trashfiles will be stored as: \*(R"\f(CW\*(C`doctrash/legacy.tr1\*(C'\fR\*(L",
\&\*(R"\f(CW\*(C`doctrash/legacy.tr2\*(C'\fR\*(L", \*(R"\f(CW\*(C`doctrash/legacy.tr3\*(C'\fR\*(L" and
\&\*(R"\f(CW\*(C`doctrash/legacy.tr4\*(C'\fR".
.RS 4
.if n .Ip "\f(CW""""\-a""""\fR" 4
.el .Ip "\f(CW\-a\fR" 4
.IX Item "-a"
All trash will be stored into one big file "\f(CW\*(C`doctrash/legacy.tra\*(C'\fR".
.if n .Ip "\f(CW""""\-d""""\fR" 4
.el .Ip "\f(CW\-d\fR" 4
.IX Item "-d"
The trash \fIfile\fR\|(s) will not be stored into directory "\f(CW\*(C`doctrash\*(C'\fR\*(L",
but each into an own directory. E.g. into directory \*(R"\f(CW\*(C`legacy/\*(C'\fR".
.if n .Ip "\f(CW""""\-z""""\fR" 4
.el .Ip "\f(CW\-z\fR" 4
.IX Item "-z"
When using switch \f(CW\*(C`\-z\*(C'\fR, zero length files will not be created.
.RE
.RS 4
.SH "EXAMPLES"
.IX Header "EXAMPLES"
.RS 4
.RE
.if n .Ip "lclean \f(CW""""\-cs""""\fR {document}" 4
.el .Ip "lclean \f(CW\-cs\fR {document}" 4
.IX Item "lclean -cs {document}"
This would first save all trash chunks into separate files into 
directory "\f(CW\*(C`doctrash\*(C'\fR", then it would clean the document.
.if n .Ip "lclean \f(CW""""\-aci""""\fR <file> {document}" 4
.el .Ip "lclean \f(CW\-aci\fR <file> {document}" 4
.IX Item "lclean -aci <file> {document}"
This would first clean the document, then insert the hidden file by using
all trash types.
.RE
.RS 4
.SH "HISTORY"
.IX Header "HISTORY"
Microsoft's first and still most spread \s-1OLE\s0 implementations had bugs. One
caused that some sections of documents that actually should be filled with
zero bytes contained more or less private data.
.Sp
Management of \s-1OLE\s0 documents is a little bit difficult and takes some 
time. A way to fasten this up is not to care about the old data, but
simply to add the new data to the document. Cleaning up could be done later.
When switched on the \*(L"fast save\*(R" option, Microsoft Word uses this strategy.
So, thus saved files contain the new and the old version of a document. The
old data cannot be edited any more and stays invisible in the document.
.Sp
Some programs seem to use the Microsoft \s-1OLE\s0 library not properly. 
For example, the Star Office 3.1. programs create documents, that 
always contain 1024 bytes of trash.
.Sp
As far as I know, Microsoft offers a bugfix for 32 bit Windows 
systems, only.
.Sp
The program \*(L"lclean\*(R" can access this kind of garbage in \s-1OLE\s0 documents. 
To do this it uses the \f(CW\*(C`modify_trash\*(C'\fR method of \s-1OLE:\s0:Storage.
This library decides between four different types of trash. 
.Sp
Overview:
.RS 4
.RE
.Ip "Type 1" 4
.IX Item "Type 1"
Unused \*(L"big blocks\*(R". These blocks are not used by the document. Each of 
these blocks is 512 bytes long.
.Ip "Type 2" 4
.IX Item "Type 2"
Unused \*(L"small blocks\*(R". These blocks are not used by the document. Each of 
these blocks is 64 bytes long.
.Ip "Type 4" 4
.IX Item "Type 4"
File end space. This refers to the \*(L"streams\*(R" of an \s-1OLE\s0 document.
The space is made up of all the space between the end of a stream
and the end of a block.
.Ip "Type 8" 4
.IX Item "Type 8"
System space. These sections are required by file format, though
they are not used by \s-1OLE\s0 system. Actually this data is no garbage. 
.RE
.RS 4
.SH "SEE ALSO"
.IX Header "SEE ALSO"
the OLE::Storage manpage
.SH "AUTHOR"
.IX Header "AUTHOR"
Martin Schwartz <\fIschwartz@cs.tu-berlin.de\fR>. 
